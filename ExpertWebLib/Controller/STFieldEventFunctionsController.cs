using System;
using System.Data;
using System.Text;
using System.Collections.Generic;

namespace ExpertWebLib
{
    #region STFieldEventFunctions
    //-----------------------------------------------------------
    //Generated By: SQLDBTools.Net ♫ Hồռ؏ ₤ĩռᶋ (v2.0.96)
    //Class: STFieldEventFunctionsController
    //Created Date: Monday, 06 Aug 2018
    //-----------------------------------------------------------
    
    public class STFieldEventFunctionsController : BaseBusinessController
    {
        private readonly string spGetSTFieldEventFunctionsBySTFieldEventID = "STFieldEventFunctions_SelectBySTFieldEventID";
        private readonly string spGetMaxSortOrderFunctionBySTFieldEventID = "STFieldEventFunctions_SelectMaxSTFieldEventFunctionSortOrderBySTFieldEventID";
        private readonly string spGetSTFieldEventFunctionsBySTFieldEventIDAndSTFieldEventFunctionFullNameAndSTFieldEventFunctionClass = "STFieldEventFunctions_SelectBySTFieldEventIDAndSTFieldEventFunctionFullNameAndSTFieldEventFunctionClass";
        private readonly string spDeleteSTFieldEventFunctionsBySTFieldEventID = "STFieldEventFunctions_DeleteBySTFieldEventID";
        public STFieldEventFunctionsController()
        {
            dal = new DALBaseProvider("STFieldEventFunctions",typeof(STFieldEventFunctionsInfo));
        }
        public void DeleteFieldEventFunctionByFieldEventID(int iFieldEventID)
        {
            object[] paramValues = new object[] { iFieldEventID };
            base.dal.GetDataSet(this.spDeleteSTFieldEventFunctionsBySTFieldEventID, paramValues);
        }

        public DataSet GetFieldEventFunctionByFieldEventID(int iFieldEventID)
        {
            object[] paramValues = new object[] { iFieldEventID };
            return base.dal.GetDataSet(this.spGetSTFieldEventFunctionsBySTFieldEventID, paramValues);
        }

        public STFieldEventFunctionsInfo GetFieldEventFunctionByFieldEventIDAndFunctionFullNameAndFunctionClass(int iFieldEventID, string strFieldEventFunctionFullName, string strFieldEventFunctionClass)
        {
            object[] paramValues = new object[] { iFieldEventID, strFieldEventFunctionFullName, strFieldEventFunctionClass };
            return (STFieldEventFunctionsInfo)base.dal.GetDataObject(this.spGetSTFieldEventFunctionsBySTFieldEventIDAndSTFieldEventFunctionFullNameAndSTFieldEventFunctionClass, paramValues);
        }

        public int GetMaxSortOrderFunctionByFieldEventID(int iFieldEventID)
        {
            int num = 0;
            try
            {
                object[] paramValues = new object[] { iFieldEventID };
                DataSet dataSet = base.dal.GetDataSet(this.spGetMaxSortOrderFunctionBySTFieldEventID, paramValues);
                if (((dataSet.Tables.Count > 0) && (dataSet.Tables[0].Rows.Count > 0)) && (dataSet.Tables[0].Rows[0][0] != null))
                {
                    num = Convert.ToInt32(dataSet.Tables[0].Rows[0][0]);
                }
            }
            catch (Exception)
            {
                num = 0;
            }
            return num;
        }
    }
    #endregion
}