using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;


namespace ExpertERP.BusinessEntities
{
	#region ARPriceListDetails
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ARPriceListDetailsController
	//Created Date:Monday, March 10, 2008
	//-----------------------------------------------------------
	
	public class ARPriceListDetailsController:BaseBusinessController
	{
        private readonly string spGetPriceListDetailsByPriceListAndPriceListDateAndProductAndProductQtyAndCurrency =
                                "ARPriceListDetails_SelectByPriceListAndPriceListDateAndProductAndProductQtyAndAndCurrency";
		public ARPriceListDetailsController()
		{
			dal= new DALBaseProvider("ARPriceListDetails",typeof(ARPriceListDetailsInfo));
		}

        public DataSet GetPriceListDetailsByPriceListAndPriceListDateAndProductAndProductQtyAndCurrency(
                        int iARPriceListID,DateTime dtARPriceListDetailDate,int iICProductID,double dbARProductQty,int iGECurrencyID, int iARCustomerID
            ,int iUOMID = 0)
        {
            //return (DataSet)dal.GetDataSet(spGetPriceListDetailsByPriceListAndPriceListDateAndProductAndProductQtyAndCurrency,
            //                                iARPriceListID,dtARPriceListDetailDate,iICProductID,dbARProductQty,iGECurrencyID);
            string str = string.Format(@"SELECT *
	                                    FROM
		                                    [dbo].[ARPriceListDetails]
	                                    WHERE
		                                    [FK_ARPriceListID]={0}
		                                    AND
		                                    ([FK_ARCustomerID]={1} || {1} = 0)
		                                    AND
		                                    ([FK_ICProductID] = {2})
		                                    AND
		                                    ([FK_GECurrencyID]={3})

                                            AND (
                                                    (CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{4}'
                                                    AND ARPriceListDetailToDate IS NULL)
                                                    OR
                                                    (CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{4}'
                                                    AND CONVERT(VARCHAR, ARPriceListDetailToDate, 112) >= '{4}')
                                            )
                                            AND (
                                                    ARPriceListDetailFromQuantity <= {5} 
                                                    AND 
                                                    (
                                                        {5} <= ARPriceListDetailToQuantity
                                                        OR
                                                        ARPriceListDetailToQuantity = 0
                                                    )
                                                )
                                            AND ([FK_ICUOMID] = {6})
                                            ORDER BY ARPriceListDetailFromDate DESC"
                                , iARPriceListID, iARCustomerID, iICProductID, iGECurrencyID, dtARPriceListDetailDate.ToString("yyyyMMdd"), dbARProductQty
                                , iUOMID);
            return dal.GetDataSet(str);
        }

        public ARPriceListDetailsInfo GetPriceListDetailByProduct(int iPriceListID, int iProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ARPriceListDetails
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ARPriceListID = {0}
                                                AND FK_ICProductID = {1}
                                                ", iPriceListID, iProductID);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARPriceListDetailsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        public DataSet GetAllDataByCustomerANDDate(int iICProductID, int iARCustomerID, DateTime dt)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ARPriceListDetails
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICProductID = {0}
                                            AND CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{2}'
                                            AND CONVERT(VARCHAR, ARPriceListDetailToDate, 112) >= '{2}'
                                            AND FK_ARPriceListID IN (
                                                                        SELECT ARPriceListID FROM dbo.ARPriceLists
                                                                        WHERE AAStatus = 'Alive'
                                                                        AND FK_ARCustomerID = {1}
                                                                    )
                                        ", iICProductID, iARCustomerID, dt.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }

        public DataSet GetAllDataByGroupCustomerANDDate(int iICProductID, int iARCustomerGroupID, DateTime dt)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ARPriceListDetails
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICProductID = {0}
                                            AND CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{2}'
                                            AND CONVERT(VARCHAR, ARPriceListDetailToDate, 112) >= '{2}'
                                            AND FK_ARPriceListID IN (
                                                                        SELECT ARPriceListID FROM dbo.ARPriceLists
                                                                        WHERE AAStatus = 'Alive'
                                                                        AND FK_ARCustomerGroupID = {1}
                                                                    )
                                        ", iICProductID, iARCustomerGroupID, dt.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }

        public DataSet GetAllDataByPriceListTypeANDDate(int iICProductID, String strARPriceListTypeCombo, DateTime dt)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ARPriceListDetails
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICProductID = {0}
                                            AND CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{2}'
                                            AND CONVERT(VARCHAR, ARPriceListDetailToDate, 112) >= '{2}'
                                            AND FK_ARPriceListID IN (
                                                                        SELECT ARPriceListID FROM dbo.ARPriceLists
                                                                        WHERE AAStatus = 'Alive'
                                                                        AND ARPriceListTypeCombo LIKE '{1}'
                                                                    )
                                        ", iICProductID, strARPriceListTypeCombo, dt.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }
        //(LINHCLH - 2016.02.18 - Lấy chi tiết bảng giá theo đối tượng áp dụng ưu tiên theo ngày bắt đầu gần với ngày chứng từ nhất
        public ARPriceListDetailsInfo GetPriceListDetailsByPriceListDateAndProductAndProductQtyAndCurrencyAndCustomer(
                        DateTime dtARPriceListDetailDate, int iICProductID, double dbARProductQty, int iGECurrencyID, int iARCustomerID
            ,int iUOMID)
        {
            return null;
            string str = string.Format(@"
SELECT *
FROM    [dbo].[ARPriceListDetails]
WHERE   ([FK_ICProductID] = {0})
    AND ([FK_GECurrencyID] = {1})
    AND (
            (CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{2}'
                AND ARPriceListDetailToDate IS NULL
            )
            OR (CONVERT(VARCHAR, ARPriceListDetailFromDate, 112) <= '{2}'
                AND CONVERT(VARCHAR, ARPriceListDetailToDate, 112) >= '{2}'
            )
        )
    AND (
            ARPriceListDetailFromQuantity <= {3} 
            AND 
            (
                {3} <= ARPriceListDetailToQuantity
                OR
                ARPriceListDetailToQuantity = 0
            )
        )
    AND ([FK_ICUOMID] = {4})
ORDER BY ARPriceListDetailFromDate DESC
"
                                , iICProductID, iGECurrencyID, dtARPriceListDetailDate.ToString("yyyyMMdd"), dbARProductQty
                                ,iUOMID);

            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ARPriceListDetailsInfo _objPriceListDetailsInfo = (ARPriceListDetailsInfo)GetObjectFromDataRow(dr);
                    if (IsCustomerApplyInPriceList(_objPriceListDetailsInfo.FK_ARPriceListID, iARCustomerID))
                    {
                        return _objPriceListDetailsInfo;
                    }
                }
            }
            return null;
        }
        public bool IsCustomerApplyInPriceList(int iARPriceListID, int iCustID)
        {
//            string str = String.Format(@"
//SELECT * 
//FROM dbo.ARCustomers 
//WHERE AAStatus = 'Alive' 
//    AND ARCustomerID = {0} {1}"
//                            , iCustID, GenObjectApplyInPriceList(iARPriceListID, "ARCustomers"));
//            DataSet ds = dal.GetDataSet(str);
//            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
//                return true;
            return false;
        }
        //public string GenObjectApplyInPriceList(int piARPriceListID, string strObjectType)
        //{
        //    string strCondition = "";
        //    ARPriceListObjectsController objARPriceListObjectCtrl = new ARPriceListObjectsController();
        //    ARPriceListObjectRegExsController objARPriceListObjectRegExCtrl = new ARPriceListObjectRegExsController();

        //    List<BusinessObject> lstObjects = new List<BusinessObject>();

        //    //Key1: Nhóm điều kiện, Key2: Thứ tự điều kiện, Value: Điều kiện
        //    SortedList<int, SortedList<int, ARPriceListObjectRegExsInfo>> lstARPriceListObjectRegExsTempGroup = new SortedList<int, SortedList<int, ARPriceListObjectRegExsInfo>>();

        //    DataSet dsARPriceListObjects = objARPriceListObjectCtrl.GetAllDataByForeignColumn("FK_ARPriceListID", piARPriceListID);
        //    List<BusinessObject> lstARPriceListObjects = objARPriceListObjectCtrl.GetListFromDataset(dsARPriceListObjects);
        //    foreach (ARPriceListObjectsInfo objARPriceListObjectInfo in lstARPriceListObjects)
        //    {
        //        if (objARPriceListObjectInfo != null && strObjectType == objARPriceListObjectInfo.ARPriceListObjectTableName)
        //        {
        //            DataSet dsARPriceListObjectRegExs = objARPriceListObjectRegExCtrl.GetAllDataByForeignColumn("FK_ARPriceListObjectID", objARPriceListObjectInfo.ARPriceListObjectID);
        //            List<BusinessObject> lstARPriceListObjectRegExs = objARPriceListObjectRegExCtrl.GetListFromDataset(dsARPriceListObjectRegExs);
        //            foreach (ARPriceListObjectRegExsInfo objARPriceListObjectRegExInfo in lstARPriceListObjectRegExs)
        //            {
        //                if (lstARPriceListObjectRegExsTempGroup.ContainsKey(objARPriceListObjectRegExInfo.ARPriceListObjectRegExGroup) == false)
        //                {
        //                    //Key: Thứ tự điều kiện, Value: Điều kiện
        //                    SortedList<int, ARPriceListObjectRegExsInfo> lstARPriceListObjectRegExsTempOrder = new SortedList<int, ARPriceListObjectRegExsInfo>();
        //                    lstARPriceListObjectRegExsTempGroup.Add(objARPriceListObjectRegExInfo.ARPriceListObjectRegExGroup, lstARPriceListObjectRegExsTempOrder);
        //                    lstARPriceListObjectRegExsTempOrder.Add(objARPriceListObjectRegExInfo.ARPriceListObjectRegExOrder, objARPriceListObjectRegExInfo);
        //                }
        //                else
        //                    lstARPriceListObjectRegExsTempGroup[objARPriceListObjectRegExInfo.ARPriceListObjectRegExGroup].Add(objARPriceListObjectRegExInfo.ARPriceListObjectRegExOrder, objARPriceListObjectRegExInfo);
        //            }

        //            #region Sắp xếp điều kiện

        //            foreach (int iGroup in lstARPriceListObjectRegExsTempGroup.Keys)
        //            {
        //                ARPriceListObjectRegExsInfo objARPriceListObjectRegExInfoLast = new ARPriceListObjectRegExsInfo();
        //                strCondition += " (";
        //                foreach (int iOrder in lstARPriceListObjectRegExsTempGroup[iGroup].Keys)
        //                {
        //                    ARPriceListObjectRegExsInfo objARPriceListObjectRegExInfo = lstARPriceListObjectRegExsTempGroup[iGroup][iOrder];
        //                    objARPriceListObjectRegExInfoLast = objARPriceListObjectRegExInfo;
        //                    strCondition += objARPriceListObjectRegExInfo.ARPriceListObjectRegExColumn + " ";
        //                    strCondition += objARPriceListObjectRegExInfo.ARPriceListObjectRegExOperatorTypeCombo + " ";
        //                    if (objARPriceListObjectRegExInfo.ARPriceListObjectRegExColumn.StartsWith("FK_") ||
        //                        GMCDbUtil.GetCSharpVariableType(objARPriceListObjectInfo.ARPriceListObjectTableName, objARPriceListObjectRegExInfo.ARPriceListObjectRegExColumn) == typeof(int) ||
        //                        GMCDbUtil.GetCSharpVariableType(objARPriceListObjectInfo.ARPriceListObjectTableName, objARPriceListObjectRegExInfo.ARPriceListObjectRegExColumn) == typeof(double) ||
        //                        GMCDbUtil.GetCSharpVariableType(objARPriceListObjectInfo.ARPriceListObjectTableName, objARPriceListObjectRegExInfo.ARPriceListObjectRegExColumn) == typeof(decimal))
        //                        strCondition += objARPriceListObjectRegExInfo.ARPriceListObjectRegExValue + " ";
        //                    else
        //                        strCondition += "N'" + objARPriceListObjectRegExInfo.ARPriceListObjectRegExValue + "' ";

        //                    if (lstARPriceListObjectRegExsTempGroup[iGroup].IndexOfKey(iOrder) == lstARPriceListObjectRegExsTempGroup[iGroup].Count - 1)
        //                        strCondition += ") ";

        //                    if (lstARPriceListObjectRegExsTempGroup.IndexOfKey(iGroup) != lstARPriceListObjectRegExsTempGroup.Count - 1
        //                        && lstARPriceListObjectRegExsTempGroup[iGroup].IndexOfKey(iOrder) != lstARPriceListObjectRegExsTempGroup[iGroup].Count - 1)
        //                        strCondition += objARPriceListObjectRegExInfo.ARPriceListObjectRegExConditionCombo + " ";
        //                }
        //            }

        //            #endregion

        //        }
        //    }
        //    if (strCondition.Length > 0)
        //        strCondition = " AND " + strCondition;
        //    return strCondition;
        //}
        //)
	}
	#endregion
}