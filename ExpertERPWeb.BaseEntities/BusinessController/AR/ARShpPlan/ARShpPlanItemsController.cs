using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ARShpPlanItems
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ARShpPlanItemsController
	//Created Date:Thursday, September 06, 2012
	//-----------------------------------------------------------
	
	public class ARShpPlanItemsController:BaseBusinessController
	{
		public ARShpPlanItemsController()
		{
			dal= new DALBaseProvider("ARShpPlanItems",typeof(ARShpPlanItemsInfo));
		}
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date: 2012.09.19
        /// </summary>
        /// <param name="iICProductID">Sản phẩm</param>
        /// <param name="iMonth">Tháng</param>
        /// <param name="iYear">Năm</param>
        /// <returns>Item of Shipment Plan</returns>
        public ARShpPlanItemsInfo GetObjectByProductInPeriod(int iICProductID, int iMonth, int iYear)
        {
            string strQuery = string.Format(@"Select Top 1 * from ARShpPlanItems where AAStatus='Alive' AND FK_ICProductID={0}
                                                AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive' 
                                                        AND ARShpPlanPeriod={1} AND ARShpPlanYear={2})", iICProductID, iMonth, iYear);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARShpPlanItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public DataSet GetAllProductsFromShpPlanItems()
        {
            String strQuery = @"SELECT Distinct FK_ICProductID FROM ARShpPlanItems WHERE AAStatus = 'Alive' AND FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive') 
            GROUP BY FK_ICProductID";
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetAllObjectByPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ARShpPlanItems WHERE AAStatus = 'Alive' AND ARShpPlnItemPeriod = {0} AND ARShpPlnItemYear = {1}", iPeriod, iYear);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        public DataSet GetAllObjectByPeriodOrderByPriority(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ARShpPlanItems WHERE AAStatus = 'Alive' AND ARShpPlnItemPeriod = {0} AND ARShpPlnItemYear = {1} order by ARShpPlanItemPriority", iPeriod, iYear);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public int GetMaxModifyCntInShpPlanItem(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"select max(ARShpPlanItemModifyCnt) from ARShpPlanItems where AAStatus='Alive'
                                        and FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive'
	                                    and ARShpPlanPeriod={0} and ARShpPlanYear={1})", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            return 0;
        }
        public DataSet GetAllProductsFromShpPlanItems(int iPeriod, int iYear)
        {
            String strQuery = string.Format(@"SELECT FK_ICProductID FROM ARShpPlanItems WHERE AAStatus = 'Alive' AND FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive' 
                                                    AND ARShpPlnItemPeriod = {0} AND ARShpPlnItemYear = {1})
                                                    GROUP BY FK_ICProductID", iPeriod, iYear);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        public DataSet GetAllProductFromShpPlanItemPriorityInRange(int iPeriod, int iYear, double FromPriority, double ToPriority)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' And ARShpPlanItemPriority>= {0} and ARShpPlanItemPriority <={1}
                                                       AND FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive' AND ARShpPlanPeriod={2} AND ARShpPlanYear={3})
                                                        order by ARShpPlanItemPriority", FromPriority, ToPriority, iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2012/11/30
        /// Get All Data In Range AND Sort By Product Year AND Period
        /// </summary>
        public DataSet GetAllDataByProductInRangeSortByProductTime(int iFromYear, int iFromPeriod, int iToYear, int iToPeriod)
        {
            string strQuery = string.Format(@" select FK_ICProductID,FK_ARShpPlanID,ARShpPlanYear as ARShpPlnItemYear,ARShpPlanPeriod as ARShpPlnItemPeriod,SUM(ARShpPlanItemNTSQty) as ARShpPlanItemNTSQty
                                                	,SUM(ARShpPlanItemATSQty)as ARShpPlanItemATSQty,SUM(ARShpPlanItemHTSQty) as ARShpPlanItemHTSQty from ARShpPlanItems 
                                                     inner join ARShpPlans on FK_ARShpPlanID = ARShpPlanID
                                                     where ARShpPlans.AAStatus='Alive' AND ARShpPlanItems.AAStatus='Alive'
                                                  AND ARShpPlanYear*12+ARShpPlanPeriod>={0} AND ARShpPlanYear*12+ARShpPlanPeriod<={1}
                                                    Group by FK_ICProductID,FK_ARShpPlanID,ARShpPlanYear,ARShpPlanPeriod 
                                                       order by FK_ICProductID,ARShpPlanYear,ARShpPlanPeriod ", iFromYear * 12 + iFromPeriod, iToYear * 12 + iToPeriod);
            return dal.GetDataSet(strQuery);

        }

        /// <summary>
        /// Viet Nguyen 2012/12/03
        /// Get Max Modify Of ShpPlanItem In OrdrPlan
        /// </summary>
        public int GetMaxModifyCntOfShpPlanItemInOrdrPln(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"select max(ARShpPlanItemOrdrPlnModifyCnt) from ARShpPlanItems where AAStatus='Alive'
                                        and FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive'
	                                    and ARShpPlanPeriod={0} and ARShpPlanYear={1})", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            return 0;
        }
        public DataSet GetAllObjectByARShpPlanIDOrderByPriority(int iARShpPlanID)
        {
            String strQuery = String.Format(@"SELECT * FROM ARShpPlanItems WHERE AAStatus = 'Alive' AND FK_ARShpPlanID={0} order by ARShpPlanItemPriority", iARShpPlanID);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataForProductPlnSemiDetailOrderByPriority(int iARShpPlanID, int iProductTypeID)
        {
            string strQuery = string.Format(@"SELECT PPNormRMs.PPNormRMQty*ARShpPlanItemNeedToProcessQty - isnull(APSemiOrdPlanQty, 0)as PPProductPlnItemSemiProductQty,
                                                PPNormRMs.PPNormRMQty*NormRMLevel2.PPNormRMQty*ARShpPlanItemNeedToProcessQty- isnull(APSemiOrdPlanQty, 0)*NormRMLevel2.PPNormRMQty-isnull(APSemiDetailOrdPlanQty, 0) as PPProductPlnItemNeedToProcessQty
                                                ,ARShpPlanItemPriority as PPProductPlnItemPriority,ARShpPlanItems.FK_ICProductID as FK_ICFGProductID
                                                ,NormLevel2.FK_ICProductID as FK_ICSemiProductID,NormRMLevel2.FK_ICProductID as FK_ICProductID,ICProducts.*,ARShpPlanItems.FK_ARSOID as FK_ARSOID
                                                FROM ARShpPlanItems 
                                                    inner join PPNorms on ARShpPlanItems.FK_ICProductID=PPNorms.FK_ICProductID
                                                    inner join PPNormRMs on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
                                                    inner join PPNorms as NormLevel2 on NormLevel2.FK_ICProductID=PPNormRMs.FK_ICProductID
                                                    inner join PPNormRMs as NormRMLevel2 on NormLevel2.PPNormID=NormRMLevel2.FK_PPNormID
                                                    inner join ICProducts  on ICProducts.ICProductID=NormRMLevel2.FK_ICProductID
                                                    LEFT  join APSemiOrdPlans on APSemiOrdPlans.FK_ARShpPlanItemID = ARShpPlanItems.ARShpPlanItemID AND APSemiOrdPlans.FK_ICProductID=PPNormRMs.FK_ICProductID
                                                    LEFT  join APSemiDetailOrdPlans on APSemiDetailOrdPlans.FK_ARShpPlanItemID = ARShpPlanItems.ARShpPlanItemID AND APSemiDetailOrdPlans.FK_ICProductID=NormRMLevel2.FK_ICProductID
                                                    where ARShpPlanItems.AAStatus='Alive' AND PPNorms.AAStatus='Alive'
                                                    AND NormLevel2.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                    AND (APSemiDetailOrdPlans.AAStatus='Alive' or APSemiDetailOrdPlans.AAStatus is NULL)
                                                    AND (APSemiOrdPlans.AAStatus='Alive' or APSemiOrdPlans.AAStatus is NULL)
                                                    AND ARShpPlanItems.FK_ARShpPlanID={0}
                                                    AND FK_ICProductTypeID={1}
                                                    order by ARShpPlanItemPriority", iARShpPlanID, iProductTypeID);
                        return dal.GetDataSet(strQuery);
        }

        public ARShpPlanItemsInfo GetFirstObjectByProductAndShpPlan(int iProductID, int iARShpPlanID)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' AND FK_ARShpPlanID ={0} AND FK_ICProductID={1}", iARShpPlanID, iProductID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARShpPlanItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public DataSet GetAllDatForProductPlnSemiOrderByPriority(int iARShpPlanID, int iProductTypeID)
        {
            string strQuery = string.Format(@"SELECT 
                                            PPNormRMs.PPNormRMQty*ARShpPlanItemNeedToProcessQty-isnull(APSemiOrdPlanQty, 0) as PPProductPlnItemQty
                                            ,ARShpPlanItemPriority as PPProductPlnItemPriority,ARShpPlanItems.FK_ICProductID as FK_ICFGProductID
                                            ,PPNormRMs.FK_ICProductID as FK_ICProductID,ARShpPlanItems.FK_ARSOID as FK_ARSOID
                                            ,ICProducts.*
                                            FROM ARShpPlanItems 
                                                inner join PPNorms on ARShpPlanItems.FK_ICProductID=PPNorms.FK_ICProductID
                                                inner join PPNormRMs on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
                                                inner join ICProducts  on ICProducts.ICProductID=PPNormRMs.FK_ICProductID
                                                LEFT  join APSemiOrdPlans on APSemiOrdPlans.FK_ARShpPlanItemID = ARShpPlanItems.ARShpPlanItemID and ICProducts.ICProductID=APSemiOrdPlans.FK_ICProductID
                                                where ARShpPlanItems.AAStatus='Alive' AND PPNorms.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND (APSemiOrdPlans.AAStatus='Alive' or APSemiOrdPlans.AAStatus is NULL)
                                                AND ARShpPlanItems.FK_ARShpPlanID={0}
                                                AND FK_ICProductTypeID={1}
                                                order by ARShpPlanItemPriority", iARShpPlanID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }

        public double GetHTSByProductNoInPeriod(string  strProductNo, int iMonth, int iYear)
        {
            string strQuery = string.Format(@"Select ARShpPlanItemHTSQty from ARShpPlanItems where AAStatus='Alive' AND FK_ICProductID in (select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo='{0}')
                                                AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive' 
                                                        AND ARShpPlanPeriod={1} AND ARShpPlanYear={2})", strProductNo, iMonth, iYear);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2013.01.24
        /// Get ShpPlanItem By Product & SOID
        /// </summary>
        public ARShpPlanItemsInfo GetShpPlanItemByProductAndSOID(int iProductID, int iSOID)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' and FK_ICProductID={0} and FK_ARSOID={1}", iProductID, iSOID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARShpPlanItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary>
        /// Viet Nguyen 2013.01.24
        /// Get ShpPlanItem By Product & Period Year AND SOID
        /// </summary>
        public ARShpPlanItemsInfo GetObjectByProductSOInPeriod(int iICProductID,int iARSOID)
        {
            string strQuery = string.Format(@"Select Top 1 * from ARShpPlanItems where AAStatus='Alive' AND FK_ICProductID={0}
                                                AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive' 
                                                        )
                                                AND FK_ARSOID={1}
                                                    ", iICProductID, iARSOID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARShpPlanItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary>
        /// Viet Nguyen 2013.01.24
        /// Get HTS Qty In Period & Year By Product AND Customer In SO
        /// </summary>
        public double GetHTSQtyInPeriodByProductAndCustInSO(int iProductID, int iARSOID, int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"select SUM(ARShpPlanItemHTSQty) from ARShpPlanItems
                                                inner join ARShpPlans on ARShpPlans.ARShpPlanID = ARShpPlanItems.FK_ARShpPlanID
                                                inner join ARSOs on ARShpPlanItems.FK_ARSOID=ARSOs.ARSOID
                                                where  ARShpPlanPeriod={1} AND ARShpPlanYear={2}
                                                AND ARShpPlanItems.FK_ICProductID={0}
                                                AND ARShpPlanItems.AAStatus='Alive' AND ARShpPlans.AAStatus='Alive'
                                                AND ARSOs.AAStatus='Alive'
                                                AND FK_ARSOID in (select FK_ARSOID from ARSOs where AAStatus='Alive' 
															AND FK_ARCustomerID in (select FK_ARCustomerID from ARSOs where AAStatus='Alive'
																AND ARSOID={3}))
                                                "
                     , iProductID, iPeriod, iYear, iARSOID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {

                }
            }
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2013.01.24
        /// Get Accumulate Allocate Qty In Period & Year By Product AND Customer In SO
        /// </summary>
        public double GetHTSQtyInPeriodByProduct(int iProductID, int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"select SUM(ARShpPlanItemAccumulateAllocateQty) from ARShpPlanItems
                                                inner join ARShpPlans on ARShpPlans.ARShpPlanID = ARShpPlanItems.FK_ARShpPlanID
                                                inner join ARSOs on ARShpPlanItems.FK_ARSOID=ARSOs.ARSOID
                                                where  ARShpPlanPeriod={1} AND ARShpPlanYear={2}
                                                AND ARShpPlanItems.FK_ICProductID={0}
                                                AND ARShpPlanItems.AAStatus='Alive' AND ARShpPlans.AAStatus='Alive'
                                                AND ARSOs.AAStatus='Alive'
                                                "
                     , iProductID, iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {

                }
            }
            return 0;
        }

        public bool CheckAccumulateAllocateQtyInPeriod(int iProductID, int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"select SUM(ARShpPlanItemAccumulateAllocateQty) from ARShpPlanItems
                                                inner join ARShpPlans on ARShpPlans.ARShpPlanID = ARShpPlanItems.FK_ARShpPlanID
                                                inner join ARSOs on ARShpPlanItems.FK_ARSOID=ARSOs.ARSOID
                                                where  ARShpPlanPeriod={1} AND ARShpPlanYear={2}
                                                AND ARShpPlanItems.FK_ICProductID={0}
                                                AND ARShpPlanItems.AAStatus='Alive' AND ARShpPlans.AAStatus='Alive'
                                                AND ARSOs.AAStatus='Alive'
                                                "
                     , iProductID, iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return true;
            }
            return false;
        }

       /// <summary>
       /// Viet nguyen 2013.01.03
       /// Get ARShpPlanItem Inner join Product
       /// </summary>
        public DataSet GetAllDataAndProduct(int iARShpPlanID,int iARSOID,int iFromPeriod,int iFromYear,int iToPeriod,int iToYear)
        {
            string strQuery = string.Format(@"select ARShpPlanID,ARShpPlanNo,ARSOID,ARSONo,ICProducts.ICProductID,ICProducts.ICProductNo,ICProducts.ICProductName,ICProducts.ICProductPkgCBM,
                                            ARShpPlanItemPriority,ARShpPlanItemNTSQty,ARShpPlanItemHTSQty,ARShpPlanItemFWInvQty,ARShpPlanItemAccumulateAllocateQty
                                            ,ARShpPlanItemAllocateQty,ARShpPlanItemNeedToProcessQty,ARShpPlanItemEstSemiInvQty,ARShpPlanItemAllocateSemiInvQty,ARShpPlanItemID
                                            from ARShpPlanItems 
                                            inner join ICProducts on ICProducts.ICProductID=ARShpPlanItems.FK_ICProductID
                                            inner join ARShpPlans on ARShpPlans.ARShpPlanID=ARShpPlanItems.FK_ARShpPlanID
                                            inner join ARSOs on ARSOs.ARSOID=ARShpPlanItems.FK_ARSOID
                                            where ARShpPlanItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                            AND ARShpPlans.AAStatus='Alive' AND ARSOs.AAStatus='Alive'
                                            AND (FK_ARShpPlanID={0} or {0}=0) AND (FK_ARSOID={1} or {1}=0)
                                            ", iARShpPlanID,iARSOID);
            string strShp = string.Empty;
                if (iARShpPlanID == 0)
                    strShp += string.Format("AND ARShpPlanPeriod+ARShpPlanYear*12 >= {0} AND ARShpPlanPeriod+ARShpPlanYear*12 <={1}", iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12);
                strQuery += strShp + "Order By ARShpPlanID,ARSOID,ARShpPlanItemPriority";
                return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet nguyen 2013.01.03
        /// Lấy sản phẩm trong kế hoạch và k có trong kế hoạch (theo kế hoạch cụ thể hoặc theo ngày tháng).
        /// Đối với sản phẩm có trong kế hoạch lấy SUM(HTS) theo sản phẩm, kế hoạch.
        /// strProductTypeTPGo,strProductTypeTPV: Loại sản phẩm.
        /// ARShpPlanItems Right Join Product.
        /// </summary>
        public DataSet LaySanPhamTrongKHXH(int iARShpPlanID, int iFromPeriod, int iFromYear, int iToPeriod, int iToYear,string strProductTypeTPGo,string strProductTypeTPV)
        {
            string strQueryRightJoinProduct = string.Format(@"inner join (select * from ARShpPlans WHERE ARShpPlans.AAStatus='Alive' AND (ARShpPlanID={0} OR {0}=0)
                                                               ", iARShpPlanID);
            if (iARShpPlanID == 0)
                strQueryRightJoinProduct += string.Format(@" AND (ARShpPlanPeriod+ARShpPlanYear*12 >= {0} AND ARShpPlanPeriod+ARShpPlanYear*12 <={1})", iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12);
            strQueryRightJoinProduct += ") AS ARShpPlans on ARShpPlans.ARShpPlanID=ARShpPlanItems.FK_ARShpPlanID";
            string strQuery = string.Format(@"select ARShpPlanID,ARShpPlanNo,ICProducts.ICProductID,ICProducts.ICProductNo,ICProducts.ICProductName,ICProducts.ICProductPkgCBM,
                                            SUM(ARShpPlanItemHTSQty) as ARShpPlanItemHTSQty
                                            from ARShpPlanItems 
                                           {0}
                                            Right join ICProducts on ICProducts.ICProductID=ARShpPlanItems.FK_ICProductID
                                            inner join ICProductTypes on ICProducts.FK_ICProductTypeID=ICProductTypes.ICProductTypeID
                                            where (ARShpPlanItems.AAStatus='Alive' or ARShpPlanItems.AAStatus is NULL) AND ICProducts.AAStatus='Alive'
                                            AND (ARShpPlans.AAStatus='Alive' or ARShpPlans.AAStatus is NULL)
                                            AND (ICProductTypeNo='{1}' or ICProductTypeNo='{2}')
                                            ", strQueryRightJoinProduct, strProductTypeTPGo, strProductTypeTPV);
            string strShp = string.Empty;
            strShp += string.Format("AND ((ARShpPlanPeriod+ARShpPlanYear*12 >= {0} AND ARShpPlanPeriod+ARShpPlanYear*12 <={1}) or (ARShpPlanID is NULL))", iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12);

            strQuery += strShp;
            strQuery += " Group by ARShpPlanID,ARShpPlanNo,ICProducts.ICProductID,ICProducts.ICProductNo,ICProducts.ICProductName,ICProducts.ICProductPkgCBM";
            strQuery += " Order By  ICProducts.ICProductID,COALESCE(ARShpPlanID,9999999)";
            return dal.GetDataSet(strQuery);
        }

        public double GetAllocateQtyByProductInRange(int iProductID, int iFromPeriod, int iFromYear, int iToPeriod, int iToYear)
        {
            string strQuery = string.Format(@"Select SUM(ARShpPlanItemAllocateQty) from ARShpPlanItems where FK_ICProductID={0} AND AAStatus='Alive' AND ARShpPlanItemAllocateQty>0
                                                   AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive' AND
                                                           ARShpPlanPeriod+ARShpPlanYear*12>={1} AND ARShpPlanPeriod+ARShpPlanYear*12<={2})"
                                    , iProductID, iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2013.04.22
        /// Get ARShpPlanItem By Product, From Period Year To Period Year
        /// </summary>
        public DataSet GetAllDataByProductInRange(int iICProductID, int iFromPeriod,int iFromYear,int iToPeriod,int iToYear)
        {
            string strQuery = string.Format(@"Select  * from ARShpPlanItems where AAStatus='Alive' AND FK_ICProductID={0}
                                                AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive' 
                                                        AND ARShpPlanPeriod+ ARShpPlanYear*12>={1} AND ARShpPlanPeriod+ ARShpPlanYear*12<={2})"
                                        , iICProductID, iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12); ;

            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Lấy về giá trị tất cả SOItems mà có RQty > 0
        /// </summary>
        /// <param name="dtFrom"></param>
        /// <param name="dtTo"></param>
        /// <returns></returns>
        public double GetSUMARShpPlanItemInComplete(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("DATEADD(DAY, ARCUstomers.ARCustomerPmtDueDays, ARShpPlans.ARShpPlanDueDate)", dtFrom, dtTo);

            String strQuery = String.Format(@"SELECT SUM(ARShpPlanItems.ARShpPlanItemHTSQty * ARShpPlanItems.ARShpPlanItemUnitPrice * ARSOs.ARSOExcRate)
                                                FROM dbo.ARShpPlanItems,
                                                ARShpPlans,
                                                dbo.ARSOs,
                                                dbo.ARCustomers
                                                WHERE ARShpPlanItems.ARShpPlanItemHTSQty > 0 
                                                AND ARShpPlanItems.FK_ARSOID = ARSOID
                                                AND ARShpPlanItems.FK_ARShpPlanID = ARShpPlans.ARShpPlanID
                                                AND ARSOs.FK_ARCustomerID = ARCustomers.ARCustomerID
                                                AND ARShpPlanItems.AAStatus = 'Alive'
                                                AND ARSOs.AAStatus = 'Alive'
                                                AND ARCustomers.AAStatus = 'Alive'
                                                AND ARShpPlans.AAStatus = 'Alive'
                                                AND {0}", strDateCond);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        /// <summary>
        /// Lấy về giá trị tất cả SO mà có RQty > 0
        /// </summary>
        /// <param name="dtFrom"></param>
        /// <param name="dtTo"></param>
        /// <returns></returns>
        public DataSet GetAllARShpPlanItemInComplete(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("DATEADD(DAY, ARCUstomers.ARCustomerPmtDueDays, ARShpPlans.ARShpPlanDueDate)", dtFrom, dtTo);

            String strQuery = String.Format(@"SELECT ARShpPlanItems.*
                                                FROM dbo.ARShpPlanItems,
                                                ARShpPlans,
                                                dbo.ARSOs,
                                                dbo.ARCustomers
                                                WHERE ARShpPlanItems.ARShpPlanItemHTSQty > 0 
                                                AND ARShpPlanItems.FK_ARSOID = ARSOID
                                                AND ARShpPlanItems.FK_ARShpPlanID = ARShpPlans.ARShpPlanID
                                                AND ARSOs.FK_ARCustomerID = ARCustomers.ARCustomerID
                                                AND ARShpPlanItems.AAStatus = 'Alive'
                                                AND ARSOs.AAStatus = 'Alive'
                                                AND ARCustomers.AAStatus = 'ALive'
                                                AND ARShpPlans.AAStatus = 'Alive'
                                                AND {0}", strDateCond);

            return GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2014.06.30
        /// Get SUM(NTS) by Product And SO
        /// </summary>
        public double GetSumQtyByProductAndSO(int iProductID, int iSOID)
        {
            string strQuery = string.Format(@"Select SUM(ARShpPlanItemNTSQty) from ARShpPlanItems where AAStatus='Alive' and FK_ICProductID={0} and FK_ARSOID={1}", iProductID, iSOID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2014.06.30
        /// Get SUM(NTS) by SOItem
        /// </summary>
        public double GetSumQtyBySOItem(int iARSOItemID)
        {
            string strQuery = string.Format(@"  SELECT SUM(ARShpPlanItemNTSQty)
                                                FROM ARShpPlanItems
                                                    INNER JOIN dbo.ARShpPlans
                                                        ON ARShpPlans.ARShpPlanID = ARShpPlanItems.FK_ARShpPlanID
                                                           AND ARShpPlans.AAStatus = 'Alive'
                                                WHERE ARShpPlanItems.AAStatus = 'Alive'
                                                      AND ARShpPlanItems.FK_ARSOItemID = {0};", iARSOItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2014.06.30
        /// Get List ARShpPlanItem by Product And SO
        /// </summary>
        public DataSet GetAllDataByProductAndSO(int iProductID, int iSOID)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' and FK_ICProductID={0} and FK_ARSOID={1}
                                                AND FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive')", iProductID, iSOID);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2014.06.30
        /// Get List ARShpPlanItem by ARShpPlanID And SO
        /// </summary>
        public DataSet GetAllDataByARShpPlanIDAndSO(int iARShpPlanID, int iSOID)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' and (FK_ARShpPlanID={0} or {0} = 0) and (FK_ARSOID={1} or {1}=0)", iARShpPlanID, iSOID);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2014.06.30
        /// Get SUM(FieldQty) by SOItem
        /// </summary>
        public double GetSumQtyBySOItem(int iARSOItemID, string strFieldQty)
        {
            string strQuery = string.Format(@"Select SUM({1}) from ARShpPlanItems where AAStatus='Alive' and FK_ARSOItemID={0}
                                                AND FK_ARShpPlanID in (select ARShpPlanID from ARShpPlans where AAStatus='Alive')", iARSOItemID, strFieldQty);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Vinh 2015.07.15
        /// Get List ARShpPlanItem by SOItem
        /// </summary>
        public DataSet GetAllDataBySOItem(int iARSOItemID)
        {
            string strQuery = string.Format(@"Select * from ARShpPlanItems where AAStatus='Alive' and FK_ARSOItemID = {0}
                                                AND FK_ARShpPlanID in (Select ARShpPlanID from ARShpPlans where AAStatus='Alive')", iARSOItemID);
            return dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// NhamNDH add -02/12/2016- Lấy các SO còn số lượng tạo lệnh sản xuất
        /// 170424: T.Bao - modify trường hợp không chọn SO thì lấy hết
        /// </summary>
        /// <param name="iARSOID"></param>
        /// <returns></returns>
        public DataSet GetAllObjectHasARSOQty(int iARSOID)
        {
            string strQuery = string.Format(@"  SELECT  ARShpPlanItems.*
                                                FROM    dbo.ARShpPlanItems
                                                        INNER JOIN dbo.ARSOItems ON ARSOItems.ARSOItemID = ARShpPlanItems.FK_ARSOItemID
                                                                                    AND ARSOItems.AAStatus = 'Alive'
                                                        INNER JOIN dbo.ARSOs ON ARSOs.ARSOID = ARSOItems.FK_ARSOID
                                                                                AND ARSOs.AAStatus = 'Alive'
                                                        INNER JOIN dbo.ARShpPlans ON ARShpPlanItems.FK_ARShpPlanID = ARShpPlans.ARShpPlanID
                                                                                AND ARShpPlans.AAStatus = 'Alive'
                                                WHERE   ARShpPlanItems.AAStatus = 'Alive'
                                                        AND ARShpPlanItems.ARShpPlanItemQty > ARShpPlanItems.ARShpPlanItemOnWO
                                                        AND (ARSOs.ARSOID = {0} --OR 0 = {0}
                                                        )
                                                ORDER BY ARShpPlanItems.FK_ARSOID ASC,
			                                                ARShpPlanItems.FK_ICProductID ASC"
                                            , iARSOID);
            return dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// NhamNDH add -02/12/2016- lấy ngày hoàn thành theo plan
        /// </summary>
        /// <param name="iARShpPlanItemID"></param>
        /// <returns></returns>
        public DateTime GetDateFinishPlan(int iARShpPlanItemID)
        {
            string strQuery = string.Format(@"  SELECT dbo.ARShpPlans.ARShpPlanDueDate
                                                FROM dbo.ARShpPlanItems
                                                INNER JOIN dbo.ARShpPlans ON ARShpPlans.ARShpPlanID = ARShpPlanItems.FK_ARShpPlanID
                                                WHERE ARShpPlanItemID={0}", iARShpPlanItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            return DateTime.Now;
        }
	}
	#endregion
}
