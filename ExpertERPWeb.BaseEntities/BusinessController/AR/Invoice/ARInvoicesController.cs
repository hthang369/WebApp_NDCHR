using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;



namespace ExpertERP.BusinessEntities
{
	#region ARInvoices
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ARInvoicesController
	//Created Date:Sunday, June 15, 2008
	//-----------------------------------------------------------

    public class ARInvoicesController : BaseBusinessController
    {
        public ARInvoicesController()
        {
            dal = new DALBaseProvider("ARInvoices", typeof(ARInvoicesInfo));
        }
        public DataSet GetInvoice(DateTime FromDate, DateTime ToDate)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.ARInvoices WHERE AAStatus='Alive' 
                                            AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) 
                                            AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)", FromDate.ToString("yyyyMMdd"), ToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetInvoicesByStatus()
        {
            return dal.GetDataSet("ARInvoices_SelectByStatus");
        }

        public DataSet GetInvoicesByCreatedDateAndStatus(DateTime dtDateFrom, DateTime dtDateTo)
        {
            return dal.GetDataSet("ARInvoices_SelectByCreatedDateAndStatus", dtDateFrom, dtDateTo);
        }

        public List<ARInvoicesInfo> GetInvoiceByStatus()
        {
            List<ARInvoicesInfo> lstARInvoices = new List<ARInvoicesInfo>();
            DataSet ds = GetInvoicesByStatus();
            if (ds.Tables.Count > 0)
            {
                ARInvoicesController objInvoicesController = new ARInvoicesController();
                foreach (DataRow row in ds.Tables[0].Rows)
                {
                    ARInvoicesInfo objInvoicesInfo = (ARInvoicesInfo)objInvoicesController.GetObjectFromDataRow(row);
                    lstARInvoices.Add(objInvoicesInfo);
                }
            }
            return lstARInvoices;
        }

        #region--hieu nguyen--
        public DataSet GetARInvoicesByBranchAndFromDateToDate(int iBranchID, DateTime dtFromDate, DateTime dtToDate)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] {0}", QueryCondition(iBranchID, dtFromDate, dtToDate));
            return GetDataSet(strQuery);
        }
        private String QueryCondition(int iBranchID, DateTime dtFromDate, DateTime dtToDate)
        {
            String strFormatDate = "yyyyMMdd";
            return String.Format(" WHERE [FK_BRBranchID]={0} AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iBranchID, dtFromDate.ToString(strFormatDate), dtToDate.ToString(strFormatDate), BusinessObject.DefaultAAStatus);
        }

        #endregion

        public DataSet GetAllARInvoiceByFK_BRBranchIDAndFromDateToDate(int iBRBranchID, DateTime dtFrom, DateTime dtTo)
        {
            return dal.GetDataSet("ARInvoices_SelectByFK_BRBranchIDAndARInvoiceDate", iBRBranchID, dtFrom, dtTo);
        }
        //hieu nguyen add,Feb 24,2010
        public List<ARInvoicesInfo> ListObjectsByCustomerIDAndFromDateToDateAndStatus(int iARCustomerID, DateTime dtFromDate, DateTime dtToDate, String strStatus)
        {
            List<ARInvoicesInfo> lstARInvoices = new List<ARInvoicesInfo>();
            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strStatus))
                strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] WHERE [FK_ARCustomerID]={0} AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iARCustomerID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            else
                strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] WHERE [FK_ARCustomerID]={0} AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'AND ([ARInvoiceStatusCombo] ='{4}')", iARCustomerID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strStatus);
            DataSet dsARInvoices = dal.GetDataSet(strQuery);
            if (dsARInvoices != null)
            {
                if (dsARInvoices.Tables.Count > 0)
                {
                    foreach (DataRow row in dsARInvoices.Tables[0].Rows)
                    {
                        ARInvoicesInfo objARInvoicesInfo = (ARInvoicesInfo)dal.GetObjectFromDataRow(row);
                        if (objARInvoicesInfo != null)
                        {
                            lstARInvoices.Add(objARInvoicesInfo);
                        }
                    }
                }
            }
            return lstARInvoices;
        }
        public DataSet GetAllInvoiceByStatusNewOrPost()
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARInvoices] WHERE ([ARInvoiceStatusCombo]='{0}' OR [ARInvoiceStatusCombo]='{1}') AND [AAStatus]='{2}'", "New", "Post", BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetInvoicesByRangeDate(DateTime dtFromDate, DateTime dtToDate)
        {
            String strQuery = String.Format("Select * From [ARInvoices] WHERE (CONVERT(VARCHAR(10), [ARInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)) AND ([AAStatus]='Alive')", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }

        public double GetTotalRAmtInvoiceDueDayInRange(DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT SUM(ARInvoiceRAmtTot) FROM dbo.ARInvoices WHERE AAStatus='Alive' and ARInvoiceRAmtTot> 0 AND ARInvoiceExpireDate IS NOT NULL
                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) > CONVERT(VARCHAR(10), '{0}', 112))
                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112))",
                                                                                      String.Format("{0:yyyyMMdd}", dtFrom), String.Format("{0:yyyyMMdd}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;

        }

        public DataSet GetDataSetARSOsByYearMonthAndFK_CustomerID(int year, int month, int FK_CustomerID)
        {
            return dal.GetDataSet("ARInvoices_SelectByYearMonthAndFK_CustomerID", year, month, FK_CustomerID);
        }

        public int GetAllInvoice_ByPeriodAndNotCompleteAndCustomer(int iPeriod, int iYear, int iCustomerID)
        {

            string strQuery = string.Format("select * from ARInvoices where AAStatus='Alive' and  datepart(month, ARInvoiceDate)={0}  and datepart(year,ARInvoiceDate)={1}  and FK_ARCustomerID= {2} and ARInvoiceStatusCombo!='Completed' ", iPeriod, iYear, iCustomerID);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null || ds.Tables[0].Rows.Count == 0) return 0;
            return ds.Tables[0].Rows.Count;
        }

        public int GetAllInvoice_BySmallerPeriodAndNotCompleteAndCustomer(int iPeriod, int year, int iCustomerID)
        {

            string strQuery = string.Format("select * from ARInvoices where AAStatus='Alive' and  datepart(month, ARInvoiceDate)+ datepart(year,ARInvoiceDate)*12<={0} and FK_ARCustomerID={1} and ARInvoiceStatusCombo!='Completed' ", iPeriod + year * 12, iCustomerID);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null || ds.Tables[0].Rows.Count == 0) return 0;
            return ds.Tables[0].Rows.Count;
        }

        public DataSet GetAllInvoiceIsDebtByCustomer(int iCustomerID)
        {
            string strQuery = string.Format("Select * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 and FK_ARCustomerID={0} ", iCustomerID);
            DataSet ds = GetDataSet(strQuery);
            return ds;

        }

        public DataSet GetAllInvoice_InPeriod(int iPeriod, int iYear, string status)
        {
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT * FROM ARInvoices WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ARInvoiceDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ARInvoiceDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            DataSet ds = dal.GetDataSet(query + string.Format(" and (AAPostStatus is Null or AAPostStatus = N'{0}')", status));
            return ds;
        }

        public DataSet GetAllInvoiceDuePayment(int iCutOffDay)
        {
            DateTime dtFromDate = DateTime.Now;
            DateTime dtToDate = DateTime.Now.AddDays(iCutOffDay);

            string strQuery = string.Format("Select * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllInvoiceOverDueInRange(DateTime cutoffday, int iFromdate, int iToday)
        {
            DateTime dtFromDate = cutoffday.AddDays(-iToday);
            DateTime dtToDate = cutoffday.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllInvoiceOverDueInRangeByCustomer(DateTime cutoffday, int iFromdate, int iToday, int iCustomerID)
        {
            DateTime dtFromDate = cutoffday.AddDays(-iToday);
            DateTime dtToDate = cutoffday.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select * from ARInvoices where AAStatus='Alive' And FK_ARCustomerID = {0} And ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{1}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{2}', 112)) ", iCustomerID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetTopInvoiceOverDueInRange(int top, int iFromdate, int iToday)
        {
            DateTime dtFromDate = new DateTime();
            if (iToday == int.MaxValue)
                dtFromDate = DateTime.MinValue;
            else
                dtFromDate = DateTime.Now.AddDays(-iToday);
            DateTime dtToDate = DateTime.Now.AddDays(-iFromdate);

            string strQuery = string.Format("Select top {2} * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) order by ARInvoiceExpireDate", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), top);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetTopInvoiceOverDueInRange(int top, DateTime dtFromDate, DateTime dtToDate)
        {            
            string strQuery = string.Format("Select top {2} * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) order by ARInvoiceExpireDate", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), top);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllInvoiceOverDuePayment(DateTime dteDate)
        {
            string strQuery = string.Format("Select * from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) < CONVERT(VARCHAR(10), '{0}', 112)) ", dteDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public double GetSumIncomeAmtInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT Sum(ARInvoiceAmtTot) FROM  ARInvoices Where AAStatus = 'Alive' And month(ARInvoiceDate) = {0} AND year(ARInvoiceDate) = {1}", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetListInvoiceInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM  ARInvoices Where AAStatus = 'Alive' And month(ARInvoiceDate) = {0} AND year(ARInvoiceDate) = {1}", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return ds;

            return null;
        }

        public DataSet GetListInvoiceInPeriodByCustomer(int iPeriod, int iYear, int iCustomerID)
        {
            String strQuery = String.Format(@"SELECT * FROM  ARInvoices Where AAStatus = 'Alive' And month(ARInvoiceDate) = {0} AND year(ARInvoiceDate) = {1} And FK_ARCustomerID = {2}", iPeriod, iYear, iCustomerID);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return ds;

            return null;
        }

        public double GetSumIncomeAmtByBranchInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT SUM(ARInvoiceAmtTot) FROM ARInvoices 
                                                    WHERE FK_BRBranchID = {0} 
                                                    And AAStatus = 'Alive'
                                                    AND  ARInvoiceDate >= '{1}'
                                                    AND  ARInvoiceDate <= '{2}'",
                                                    iBranchID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetListInvoiceByBranchInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT * FROM ARInvoices 
                                                    WHERE FK_BRBranchID = {0} 
                                                    And AAStatus = 'Alive'
                                                    AND  ARInvoiceDate >= '{1}'
                                                    AND  ARInvoiceDate <= '{2}'",
                                                    iBranchID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return ds;

            return null;
        }

        //        public List<BusinessObject> GetAllDataDueDayInRange(DateTime dtFrom, DateTime dtTo)
        //        {
        //            string strQuery = String.Format(@"SELECT * FROM dbo.ARInvoices WHERE AAStatus='Alive' and ARInvoiceRAmtTot> 0 AND ARInvoiceExpireDate IS NOT NULL
        //                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) > CONVERT(VARCHAR(10), '{0}', 112))
        //                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112))",
        //                                                                                      String.Format("{0:yyyyMMdd}", dtFrom), String.Format("{0:yyyyMMdd}", dtTo));
        //            DataSet ds = dal.GetDataSet(strQuery);
        //            if (ds != null)
        //                return GetListFromDataset(ds);
        //            return null;
        //        }

        public DataSet GetAllDataDueDayInRange(DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT * FROM dbo.ARInvoices WHERE AAStatus='Alive' and ARInvoiceRAmtTot> 0 AND ARInvoiceExpireDate IS NOT NULL
                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) > CONVERT(VARCHAR(10), '{0}', 112))
                                                                                    AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112))",
                                                                                      String.Format("{0:yyyyMMdd}", dtFrom), String.Format("{0:yyyyMMdd}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllDataByCustomerTypeInPeriodYear(int iCustomerID, int iPeriod, int iYear, string strType)
        {
            String strQuery = String.Format(@"SELECT * FROM  ARInvoices Where AAStatus = 'Alive' And month(ARInvoiceDate) = {0} AND year(ARInvoiceDate) = {1} and FK_ARCustomerID={2}", iPeriod, iYear, iCustomerID);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return ds;

            return null;
        }

        #region Kiểm tra khách hàng có hóa đơn quá hạn thanh toán -- Vinh --10/10/2012

        public DataSet GetAllInvoiceExpired(int iCustomerID, DateTime dt)
        {
            String strDateCond = DALUtil.GennerateCondition("ARInvoiceExpireDate", CompareType.LessEqualThan, dt);
            string strQuery = string.Format(@"SELECT * FROM ARInvoices 
                                                    where AAStatus='Alive' 
                                                    AND FK_ARCustomerID = {0} 
                                                    And ARInvoiceRAmtTot > 0 
                                                    AND [ARInvoiceExpireDate] IS NOT NULL 
                                                    AND  {1}", iCustomerID, strDateCond);

            return GetDataSet(strQuery);
        }

        #endregion

        /// <summary> Get All Invoice Before Date
        ///Created By Huu Vinh
        /// Created Date 17.04.12
        /// </summary>
        /// 
        public DataSet GetAllARInvoiceBeforeDate(int iCustomerID, DateTime date)
        {
            String query = string.Format(@"SELECT * FROM ARInvoices WHERE AAStatus = 'Alive' AND FK_ARCustomerID={0} AND (CONVERT(VARCHAR(10), [ARInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112))", iCustomerID, date.ToString("yyyyMMdd"));
            return dal.GetDataSet(query);
        }

        public void UpdateInvoiceCostTotFromItems(int iYear, int iPeriod)
        {
            String strQuery = String.Format(@"UPDATE ARInvoices 
                                                SET ARInvoiceCostTot = (SELECT SUM(ARInvoiceItemCostTot) 
                                                                            FROM ARInvoiceItems WHERE FK_ARInvoiceID = ARInvoiceID AND ARInvoiceItems.AAStatus = 'Alive')
                                                WHERE ARInvoices.AAStatus = 'Alive' 
                                                AND Month(ARInvoiceDate) = {0}
                                                AND Year(ARInvoiceDate) = {1}", iPeriod, iYear);

            GetDataSet(strQuery);
        }

        #region Get All Amt By FromDate ToDate AND Customer --Vinh --16/08/2012

        public DataSet GetAllAmtByFromDateToDateANDCustomer(int iCustomerID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ARInvoiceDate) AS Year, MONTH(ARInvoiceDate) AS Month, ARCustomerGroupID, SUM(dbo.ARInvoiceItems.ARInvoiceItemAmtTot) AS Amt
                                        FROM dbo.ARInvoices INNER JOIN dbo.ARInvoiceItems ON ARInvoiceID = FK_ARInvoiceID INNER JOIN dbo.ARCustomers ON dbo.ARInvoices.FK_ARCustomerID=dbo.ARCustomers.ARCustomerID INNER JOIN dbo.ARCustomerGroups ON dbo.ARCustomers.FK_ARCustomerGroupID=dbo.ARCustomerGroups.ARCustomerGroupID
                                        WHERE dbo.ARInvoices.AAStatus='Alive' AND dbo.ARInvoiceItems.AAStatus='Alive' AND dbo.ARCustomers.AAStatus='Alive' AND dbo.ARCustomerGroups.AAStatus='Alive'
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iCustomerID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID={0}", iCustomerID);
            }
            str += String.Format(@"GROUP BY YEAR(ARInvoiceDate), MONTH(ARInvoiceDate), ARCustomerGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Amt By FromDate ToDate AND Product --Vinh --23/08/2012

        public DataSet GetAllAmtByFromDateToDateANDProduct(int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ARInvoiceDate) AS Year, MONTH(ARInvoiceDate) AS Month, ICProductGroupID, SUM(dbo.ARInvoiceItems.ARInvoiceItemAmtTot) AS Amt
                                        FROM dbo.ARInvoices INNER JOIN dbo.ARInvoiceItems ON ARInvoiceID = FK_ARInvoiceID INNER JOIN dbo.ICProducts ON dbo.ARInvoiceItems.FK_ICProductID=dbo.ICProducts.ICProductID INNER JOIN dbo.ICProductGroups ON dbo.ICProducts.FK_ICProductGroupID=dbo.ICProductGroups.ICProductGroupID
                                        WHERE dbo.ARInvoices.AAStatus='Alive' AND dbo.ARInvoiceItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoiceItems.FK_ICProductID={0}", iProductID);
            }
            str += String.Format(@"GROUP BY YEAR(ARInvoiceDate), MONTH(ARInvoiceDate), ICProductGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Invoice By FromDate ToDate AND Customer --Vinh --20/08/2012

        public DataSet GetAllARInvoiceByFromDateToDateANDCustomer(int iCustomerGroupID, int iCustomerID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.ARInvoices
                                        WHERE dbo.ARInvoices.AAStatus='Alive'
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iCustomerID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID={0}", iCustomerID);
            }
            if (iCustomerGroupID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ARCustomerGroupID = {0})", iCustomerGroupID);
            }
            else if (iCustomerGroupID == 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ARCustomerGroupID <>0)");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Invoice By FromDate ToDate AND Product --Vinh --23/08/2012

        public DataSet GetAllARInvoiceByFromDateToDateANDProduct(int iProductGroupID, int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.ARInvoices
                                        WHERE dbo.ARInvoices.AAStatus='Alive'
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.ARInvoiceID IN (SELECT FK_ARInvoiceID FROM ARInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            }
            if (iProductGroupID != 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.ARInvoiceID IN (SELECT FK_ARInvoiceID FROM ARInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID = {0}))", iProductGroupID);
            }
            else if (iProductGroupID == 0)
            {
                str += String.Format(@" AND dbo.ARInvoices.ARInvoiceID IN (SELECT FK_ARInvoiceID FROM ARInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID <> 0))");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Invoice By Product

        public DataSet GetAllARInvoiceByProduct(int iProductID)
        {
            String str = String.Format(@"SELECT * FROM ARInvoices WHERE AAStatus='Alive' AND ARInvoiceID IN (SELECT FK_ARInvoiceID FROM ARInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get Sum Invoice By Customer --Vinh --31/10/2012

        public double GetAmtTotByCustomer(int iCustomerID)
        {
            String str = String.Format(@"SELECT SUM(ARInvoiceAmtTot) FROM ARInvoices WHERE AAStatus='Alive'");
            if (iCustomerID!=0)
            {
                str += String.Format(@" AND FK_ARCustomerID={0}", iCustomerID);
            }
            DataSet ds = dal.GetDataSet(str);
            if (ds!=null && ds.Tables.Count>0 && ds.Tables[0].Rows.Count>0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        #endregion

        public DataSet GetAllInvoiceNeedPayment(int iCustomerID, int iCurrencyID, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GennerateCondition("ARInvoiceDate", CompareType.LessEqualThan, dtTo);
            String strQuery = String.Format(@"SELECT * FROM ARInvoices 
                                                    WHERE AAStatus = 'Alive' 
                                                    AND FK_ARCustomerID = {0}
                                                    AND ARInvoiceRFAmtTot > 0
                                                    AND FK_GECurrencyID = {1} 
                                                    AND {2} 
                                                    ORDER BY ARInvoiceExpireDate", iCustomerID,iCurrencyID,strTimeCond);

            return GetDataSet(strQuery);

        }

        /// <summary> Get Last Invoice By Customer 
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLastInvoiceByCustomer(int iCustomerID)
        {
            String query = string.Format(@"select top 1 * from ARInvoices where  AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                         order by ARInvoiceDate desc", iCustomerID);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Get Last Invoice By Customer less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLastInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select top 1 * from ARInvoices where  AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}  order by ARInvoiceDate desc", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Get largest Amt Invoice By Customer 
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLargestAmtInvoiceByCustomer(int iCustomerID)
        {
            String query = string.Format(@"select top 1 * from ARInvoices where  AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                         order by ARInvoiceAmtTot desc", iCustomerID);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Get largest Amt Invoice By Customer less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLargestAmtInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select top 1 * from ARInvoices where  AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}  order by ARInvoiceAmtTot desc", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Get AmtTotal Invoice By less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double GetAmtTotInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select SUM(ARInvoiceAmtTot) from ARInvoices where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Count Invoice By less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double CountInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select count(*) from ARInvoices where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Get AmtTotal Invoice By Customer Status less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double GetAmtTotalByCustomerStatusAndLessThanMonth(int iCustomerID, int iMonth, int iYear, string strInvoiceStatus)
        {
            String query = string.Format(@"select SUM(ARInvoiceAmtTot) from ARInvoices where AAStatus = 'Alive' and ARInvoiceStatusCombo = '{2}' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}", iCustomerID, iMonth + iYear * 12, strInvoiceStatus);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Count Invoice By Status less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double CountPmtByCustomerStatusAndLessThanMonth(int iCustomerID, int iMonth, int iYear, string strInvoiceStatus)
        {
            String query = string.Format(@"select count(*) from ARInvoices where AAStatus = 'Alive' and ARInvoiceStatusCombo = '{2}' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}", iCustomerID, iMonth + iYear * 12, strInvoiceStatus);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Get largest Disc Amt Invoice By Customer less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLargestDiscAmtInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select top 1 * from ARInvoices where  AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1}  order by ARInvoiceDiscAmt desc", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Get DiscAmtTotal Invoice By less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double GetDiscAmtTotInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select SUM(ARInvoiceDiscAmt) from ARInvoices where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1} AND ARInvoiceDiscAmt>0", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Get Last Disc Invoice By Customer
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public ARInvoicesInfo GetLastDiscInvoiceByCustomer(int iCustomerID)
        {
            String query = string.Format(@"select * from ARInvoices where AAStatus = 'Alive' and FK_ARCustomerID = {0} AND
                        ARInvoiceDiscAmt>0 order by ARInvoiceDiscAmt desc ", iCustomerID);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        /// <summary> Count DiscAmt Invoice By less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public int CountDiscAmtInvoiceByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select count(*) from ARInvoices where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARInvoiceDate) + year(ARInvoiceDate)*12 <={1} AND ARInvoiceDiscAmt>0", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return int.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Get All Invoice Before Date
        ///Created By Huu Vinh
        /// Created Date 17.04.12
        /// </summary>
        /// 

        public DataSet GetAllDataByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.ARInvoices WHERE AAStatus='Alive' AND FK_HREmployeeID={0} AND ARInvoiceAmtTot >0 
	                                                    	AND MONTH(ARInvoiceDate)={1} AND YEAR(ARInvoiceDate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }

        public double GetAmtTotInvoiceInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(ARInvoiceAmtTot) FROM  ARInvoices Where AAStatus = 'Alive' And month(ARInvoiceDate) = {0} AND year(ARInvoiceDate) = {1}", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {

                }
            }

            return 0;
        }

        public double GetAmtTotInvoiceOverDueInRange(DateTime cutoffday, int iFromdate, int iToday)
        {
            DateTime dtFromDate = cutoffday.AddDays(-iToday);
            DateTime dtToDate = cutoffday.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select Sum(ARInvoiceAmtTot) from ARInvoices where AAStatus='Alive' and  ARInvoiceRAmtTot>0 AND [ARInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [ARInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0].ToString());
                }
                catch (System.Exception ex)
                {

                }
            }
            return 0;
        }

        public double GetTotalAmtByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear, ref double count)
        {
            String strQuery = String.Format(@"SELECT SUM(ARInvoiceAmtTot),COUNT(*) FROM dbo.ARInvoices WHERE AAStatus='Alive' AND FK_HREmployeeID={0}
	                                                    	AND MONTH(ARInvoiceDate)={1} AND YEAR(ARInvoiceDate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            DataSet dsARQuots = dal.GetDataSet(strQuery);
            count = 0;
            if (dsARQuots != null && dsARQuots.Tables.Count > 0 && dsARQuots.Tables[0].Rows.Count > 0 && dsARQuots.Tables[0].Rows[0][0] != DBNull.Value && dsARQuots.Tables[0].Rows[0][1] != DBNull.Value)
            {
                count = Convert.ToDouble(dsARQuots.Tables[0].Rows[0][1]);
                return Convert.ToDouble(dsARQuots.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public int GetTotalCustByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT count(DISTINCT FK_ARCustomerID) FROM dbo.ARInvoices WHERE AAStatus='Alive' AND FK_HREmployeeID={0}
	                                                    	AND MONTH(ARInvoiceDate)={1} AND YEAR(ARInvoiceDate)={2}
                                                           "
                                                        , iHREmployeeID, iPeriod, iYear);
            DataSet dsARQuots = dal.GetDataSet(strQuery);
            if (dsARQuots != null && dsARQuots.Tables.Count > 0 && dsARQuots.Tables[0].Rows.Count > 0 && dsARQuots.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToInt32(dsARQuots.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public double GetTotalCustPmtInPeriod(int iCustomerID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select SUM(ARInvoiceAmtTot) From [ARInvoices] WHERE FK_ARCustomerID = {0} AND Month(ARInvoiceDate) = {1} AND Year(ARInvoiceDate) = {2} AND AAStatus='Alive'", iCustomerID, iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }

            return 0;
        }

        //        public DataSet GetAllARInvoiceByFromDateToDateANDCustomer(int iCustomerGroupID, int iCustomerID, DateTime FromDate, DateTime ToDate)
//        {
//            String str = String.Format(@"SELECT * FROM dbo.ARInvoices
//                                        WHERE dbo.ARInvoices.AAStatus='Alive'
//                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  >= ({0} * 12 + {1})
//                                        AND (YEAR(ARInvoiceDate) * 12 +MONTH(ARInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
//            if (iCustomerID != 0)
//            {
//                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID={0}", iCustomerID);
//            }
//            if (iCustomerGroupID != 0)
//            {
//                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
//                                                                          WHERE AAStatus='Alive'
//                                                                          AND FK_ARCustomerGroupID = {0})", iCustomerGroupID);
//            }
//            else if (iCustomerGroupID == 0)
//            {
//                str += String.Format(@" AND dbo.ARInvoices.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
//                                                                          WHERE AAStatus='Alive'
//                                                                          AND FK_ARCustomerGroupID <>0)");
//            }
//            return dal.GetDataSet(str);
//        }
        /// <summary>
        /// Add Trung - 04-01-2012 - Tính Dòng Tiền
        /// </summary>
        /// <param name="dtFrom"></param>
        /// <param name="dtTo"></param>
        /// <returns></returns>
        public double GetRAmtTotByRangeDate(DateTime dtFrom, DateTime dtTo)
        {
            string strDate=DALUtil.GenerateBeetween("ARInvoiceExpireDate",dtFrom,dtTo);
            string strQuery = String.Format(@"SELECT SUM(ARInvoiceRAmtTot) FROM ARInvoices WHERE AAStatus='Alive' AND ARInvoiceRAmtTot> 0 AND ARInvoiceExpireDate IS NOT NULL AND {0}", strDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public DataSet GetAllObjectRAmtTotByRangeDate(DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("ARInvoiceExpireDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT * FROM ARInvoices WHERE AAStatus='Alive' AND ARInvoiceRAmtTot> 0 AND ARInvoiceExpireDate IS NOT NULL AND {0}", strDate);
            return dal.GetDataSet(strQuery);
            
        }

        public double GetSumFieldBySupllierInRange(string strFieldNeedSum, int iCustomer, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("ARInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM({0}) FROM ARInvoices WHERE AAStatus='Alive' AND FK_ARCustomerID={1} AND ARInvoiceExpireDate IS NOT NULL AND {2}", strFieldNeedSum, iCustomer, strDate);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllInvoiceByCustomerInRange(int iCustomer, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("ARInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM ARInvoices WHERE AAStatus='Alive' AND FK_ARCustomerID={0} AND ARInvoiceExpireDate IS NOT NULL AND {1}", iCustomer, strDate);
            return GetDataSet(strQuery);
        }

        public DataSet GetTotalAmtGroupByCustomer(DateTime dtFrom, DateTime dtTo)
        {
            string strRange = DALUtil.GenerateBeetween("ARInvoiceDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT FK_ARCustomerID, SUM(ARInvoiceAmtTot)
                                                FROM ARInvoices WHERE AAStatus = 'Alive'
                                                AND {0}
                                                GROUP BY FK_ARCustomerID", strRange);

            return GetDataSet(strQuery);
        }


        public double GetSUMInvoiceRAmt(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("ARInvoiceDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT ARInvoiceRAmtTot
                                            FROM dbo.ARInvoices
                                            WHERE AAStatus = 'Alive'
                                            AND {0}", strDateCond);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllInvoiceInComplete(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("ARInvoiceDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT ARInvoices.*
                                            FROM dbo.ARInvoices
                                            WHERE AAStatus = 'Alive'
                                            AND ARInvoiceRAmtTot > 0
                                            AND {0}", strDateCond);

            return GetDataSet(strQuery);
        }
        public DataSet GetCancelInv()
        {
            String strQuery = String.Format(@"SELECT  a.*
FROM    dbo.ARInvoices a
LEFT JOIN ARInvoices b ON b.AAStatus = 'Alive' AND a.ARInvoiceID = b.FK_ARInvoiceCancelID
WHERE   a.AAStatus = 'Cancel' AND b.FK_ARInvoiceCancelID is null");
            return GetDataSet(strQuery);
        }

        public DataSet GetAllCancelInvByDate(DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT  a.*
FROM    dbo.ARInvoices a
WHERE   a.AAStatus = 'Cancel'");

            if (dtFrom > DateTime.MinValue)
                strQuery += String.Format(@"
    AND a.ARInvoiceDate >= '{0}'", dtFrom.ToString("yyyyMMdd"));
            if (dtTo > DateTime.MinValue)
                strQuery += String.Format(@"
    AND a.ARInvoiceDate <= '{0}'", dtTo.ToString("yyyyMMdd"));

            return GetDataSet(strQuery);
        }
        public ARInvoicesInfo GetCancelInvByID(int piID)
        {
            String strQuery = String.Format(@"SELECT  a.*
FROM    dbo.ARInvoices a
WHERE   a.AAStatus = 'Cancel' AND ARInvoiceID = {0}", piID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            else
                return null;
        }
        public ARInvoicesInfo GetReplInvByCancelInvID(int piID)
        {
            String strQuery = String.Format(@"SELECT *
FROM    dbo.ARInvoices a
WHERE   AAStatus = 'Alive' AND FK_ARInvoiceCancelID = {0}", piID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            else
                return null;
        }
        public void MoveAllInvVoucherTrans(int piFromID, int piToID)
        {
            String strQuery = String.Format(@"UPDATE GLVoucherTransactionItems
SET FK_ARInvoiceID = {1}
WHERE   AAStatus = 'Alive' AND FK_ARInvoiceID = {0}", piFromID, piToID);
            dal.GetDataSet(strQuery);
        }
        public void CancelInvSaleDiscTrans(int piID)
        {
            String strQuery = String.Format(@"UPDATE ARInvoiceItemSalesDiscountItems 
SET AAStatus = 'Cancel'
FROM ARInvoiceItemSalesDiscountItems a
INNER JOIN ARInvoiceItems b ON a.FK_ARInvoiceItemID = b.ARInvoiceItemID AND b.FK_ARInvoiceID = {0}", piID);
            dal.GetDataSet(strQuery);
        }
        public void UnCancelInvSaleDiscTrans(int piID)
        {
            String strQuery = String.Format(@"UPDATE ARInvoiceItemSalesDiscountItems 
SET AAStatus = 'Alive'
FROM ARInvoiceItemSalesDiscountItems a
INNER JOIN ARInvoiceItems b ON a.FK_ARInvoiceItemID = b.ARInvoiceItemID AND b.FK_ARInvoiceID = {0}", piID);
            dal.GetDataSet(strQuery);
        }
        
        public int GetMaxDueDayByCustAndDate(int piCustomerID, DateTime dtCalc)
        {
            //(LINHCLH - 2016.12.20 - Dung store de tinh - Van su dung cach tinh cu trong truong hop store tra ve ds = null
            object[] _objParrs = {piCustomerID
                    ,dtCalc
                                };
            DataSet ds = SqlDatabaseHelper.RunStoredProcedure("spL_GetMaxInvoiceDueDay", _objParrs);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);

            //)
            

            return 0;
        }
        public DataSet GetAllDataByAPAccount(int iGLAccountID, int iGECurrencyID, int iSupplierID, string strStatus, DateTime dtFromDate, DateTime dtToDate)
        {
            string strQuery = string.Empty;
            string strStatusCondition = string.Empty;

            if (strStatus == "New")
            {
                strStatusCondition = " AND ARInvoiceAPRAmtTot > 0 AND  ARInvoiceAPRAmtTot = ARInvoiceAmtTot";
            }
            else if (strStatus == "Incomplete")
            {
                strStatusCondition = " AND ARInvoiceAPRAmtTot < ARInvoiceAmtTot AND ARInvoiceAPRAmtTot > 0";
            }
            else if (strStatus == "Completed")
            {
                strStatusCondition = " AND ARInvoiceAPRAmtTot = 0";
            }
            else
            {
                strStatusCondition = " AND ARInvoiceAPRAmtTot > 0";
            }
            strQuery = string.Format(@"
SELECT  ARInvoices.*
FROM   dbo.ARInvoices 
INNER JOIN dbo.GLAccounts ON dbo.ARInvoices.FK_GLAPAccountID = dbo.GLAccounts.GLAccountID 
    AND dbo.GLAccounts.AAStatus = 'Alive'
    AND dbo.GLAccounts.GLAccountTypeCombo = 'AP'
    AND dbo.ARInvoices.AAStatus = 'Alive'
    AND dbo.ARInvoices.AAPostStatus = 'Post'
    AND ( dbo.ARInvoices.FK_GLAPAccountID = {0}
    OR {0} = 0
    )
    AND ( dbo.ARInvoices.FK_APSupplierID = {1}
    OR {1} = 0
    )
    AND ( dbo.ARInvoices.FK_GECurrencyID = {2}
    OR {2} = 0
    )
    AND ( CONVERT(VARCHAR(20), dbo.ARInvoices.ARInvoiceDate, 112) BETWEEN CONVERT(VARCHAR(20), '{3}', 112)
                AND
                CONVERT(VARCHAR(20), '{4}', 112) )
						             {5}", iGLAccountID, iSupplierID, iGECurrencyID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), strStatusCondition);
            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByDebitAccount(int iGLAccountID, int iGECurrencyID, int iARCustomerID, string strStatus, DateTime dtFromDate, DateTime dtToDate, ARCustomersInfo objARCustomer, String strModule)
        {
            ARCustomersController objARCustomersCtrl = new ARCustomersController();

            string strQuery = string.Empty;
            string strStatusCondition = string.Empty;

            if (strStatus == "New")
            {
                strStatusCondition = " AND ARInvoiceRAmtTot <> 0 AND  ARInvoiceRAmtTot = ARInvoiceAmtTot";
            }
            else if (strStatus == "Incomplete")
            {
                strStatusCondition = " AND ARInvoiceRAmtTot <> ARInvoiceAmtTot AND ARInvoiceRAmtTot <> 0";
            }
            else if (strStatus == "Completed")
            {
                strStatusCondition = " AND ARInvoiceRAmtTot = 0";
            }
            else
            {
                strStatusCondition = " AND ARInvoiceRAmtTot <> 0";
            }

            string sKeyCustomer = string.Format("AND (dbo.ARInvoices.FK_ARCustomerID = {0} OR {0} = 0)", iARCustomerID);//objARCustomersCtrl.GenKeyCustomerByOCode(iARCustomerID, objARCustomer, "dbo.ARInvoices.FK_ARCustomerID", strModule, false);

            strQuery = string.Format(@"
SELECT  ARInvoices.*
FROM   dbo.ARInvoices 
INNER JOIN dbo.GLAccounts ON dbo.ARInvoices.FK_GLAccountID = dbo.GLAccounts.GLAccountID 
    AND dbo.GLAccounts.AAStatus = 'Alive'
    AND dbo.GLAccounts.GLAccountTypeCombo = 'AR'
    AND dbo.ARInvoices.AAStatus = 'Alive'
    AND dbo.ARInvoices.AAPostStatus = 'Post'
    AND ( dbo.ARInvoices.FK_GLAccountID = {0}
    OR {0} = 0
    )
    {1}
    AND ( dbo.ARInvoices.FK_GECurrencyID = {2}
    OR {2} = 0
    )
    AND ( CONVERT(VARCHAR(20), dbo.ARInvoices.ARInvoiceDate, 112) BETWEEN CONVERT(VARCHAR(20), '{3}', 112)
                AND
                CONVERT(VARCHAR(20), '{4}', 112) )
						             {5}", iGLAccountID, sKeyCustomer, iGECurrencyID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), strStatusCondition);
            return GetDataSet(strQuery);
        }

    }
    #endregion
}