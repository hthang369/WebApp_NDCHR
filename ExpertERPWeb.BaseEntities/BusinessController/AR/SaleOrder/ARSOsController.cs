using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ARSOs
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ARSOsController
	//Created Date:Wednesday, April 01, 2009
	//-----------------------------------------------------------
	
	public class ARSOsController:BaseBusinessController
	{
		public ARSOsController()
		{
			dal= new DALBaseProvider("ARSOs",typeof(ARSOsInfo));
		}
        public DataSet GetSO(DateTime FromDate, DateTime ToDate)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.ARSOs WHERE AAStatus='Alive' 
                                            AND CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) 
                                            AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)", FromDate.ToString("yyyyMMdd"), ToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }
        public List<ARSOsInfo> ListObjectsByStatusNewAndIncomplete()
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [ARSOStatusCombo]<> '{0}' AND AAStatus='{1}'","Complete", BusinessObject.DefaultAAStatus);
            DataSet ds = dal.GetDataSet(strQuery);
            List<ARSOsInfo> lst = new List<ARSOsInfo>();
            if (ds!=null)
            {
                if (ds.Tables.Count>0)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ARSOsInfo objARSOsInfo = (ARSOsInfo)dal.GetObjectFromDataRow(row);
                        if (objARSOsInfo!=null)
                        {
                            lst.Add(objARSOsInfo);
                        }
                        
                    }
                    
                }
                
            }
            return lst;
            
        }
        public List<ARSOsInfo> ListObjectsByCustomerIDAndFromDateToDateAndStatus(int iARCustomerID, DateTime dtFromDate, DateTime dtToDate,String strStatus)
        {
            List<ARSOsInfo> lstARSOs = new List<ARSOsInfo>();
            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strStatus))
                strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [FK_ARCustomerID]={0} AND CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iARCustomerID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            else
                strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [FK_ARCustomerID]={0} AND CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'AND ([ARSOStatusCombo]='{4}')", iARCustomerID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strStatus);
            DataSet dsARSOs = dal.GetDataSet(strQuery);
            if (dsARSOs!=null)
            {
                if (dsARSOs.Tables.Count>0)
                {
                    foreach (DataRow row in dsARSOs.Tables[0].Rows)
                    {
                        ARSOsInfo objARSOsInfo = (ARSOsInfo)dal.GetObjectFromDataRow(row);
                        if (objARSOsInfo!=null)
                        {
                            lstARSOs.Add(objARSOsInfo);
                        }
                    }
                }
            }
            return lstARSOs;
        }

        public DataSet GetDataSetByARSellerIDFromFDateAndTDate(int iARSellerID, DateTime dteFDate, DateTime dteTDate)
        {
            DataSet dsARSOs = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [FK_ARSellerID]={0} AND CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iARSellerID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            dsARSOs = dal.GetDataSet(strQuery);
            if (dsARSOs != null)
                return dsARSOs;
            return dsARSOs;
        }
        public DataSet GetAllObjectsByStatusNew()
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [ARSOStatusCombo]='{0}' AND [AAStatus]='{1}'", "New", BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }

       
        public DataSet GetAllObjectsByStatusApproved()
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOs] WHERE [ARSOStatusCombo]='{0}' AND [AAStatus]='{1}'", "Approve", BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dteFDate"></param>
        /// <param name="dteTDate"></param>
        /// <returns></returns>
        public List<ARSOsInfo> GetARSOsByARSOItemsHighestPrice(int iICProductID, DateTime dteFDate, DateTime dteTDate)
        {
            List<ARSOsInfo> lstARSOs = new List<ARSOsInfo>();
            DataSet dsARSOItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOItems] WHERE [FK_ICProductID] = {0} AND FK_ARSOID IN (SELECT [ARSOID] FROM [dbo].[ARSOs] WHERE CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY ARSOItemUnitPrice DESC", iICProductID, dteFDate.ToString("yyyyMMdd"),dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            dsARSOItems = dal.GetDataSet(strQuery);
            if (dsARSOItems != null)
            {
                if (dsARSOItems.Tables[0].Rows.Count > 0)
                {
                    int iMaxUnitPrice = Convert.ToInt32(dsARSOItems.Tables[0].Rows[0]["ARSOItemUnitPrice"]);
                    foreach (DataRow row in dsARSOItems.Tables[0].Rows)
                    {
                        ARSOItemsInfo objARSOItemsInfo = (ARSOItemsInfo)new ARSOItemsController().GetObjectFromDataRow(row);
                        if (objARSOItemsInfo != null)
                        {
                            if (objARSOItemsInfo.ARSOItemUnitPrice == iMaxUnitPrice)
                            {
                                ARSOsInfo objARSOsInfo = (ARSOsInfo)new ARSOsController().GetObjectByID(objARSOItemsInfo.FK_ARSOID);
                                lstARSOs.Add(objARSOsInfo);
                            }

                        }
                    }
                }
            }
            return lstARSOs;
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dteFDate"></param>
        /// <param name="dteTDate"></param>
        /// <returns></returns>
        public List<ARSOsInfo> GetARSOsByARSOItemsPriceSortOrder(int iICProductID, DateTime dteFDate, DateTime dteTDate, String strType)
        {
            List<ARSOsInfo> lstARSOs = new List<ARSOsInfo>();
            DataSet dsARSOItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOItems] WHERE [FK_ICProductID] = {0} AND FK_ARSOID IN (SELECT [ARSOID] FROM [dbo].[ARSOs] WHERE CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY ARSOItemUnitPrice {4}", iICProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strType);
            dsARSOItems = dal.GetDataSet(strQuery);
            if (dsARSOItems != null)
            {
                if (dsARSOItems.Tables[0].Rows.Count > 0)
                {
                    int iMaxUnitPrice = Convert.ToInt32(dsARSOItems.Tables[0].Rows[0]["ARSOItemUnitPrice"]);
                    foreach (DataRow row in dsARSOItems.Tables[0].Rows)
                    {
                        ARSOItemsInfo objARSOItemsInfo = (ARSOItemsInfo)new ARSOItemsController().GetObjectFromDataRow(row);
                        if (objARSOItemsInfo != null)
                        {
                            if (objARSOItemsInfo.ARSOItemUnitPrice == iMaxUnitPrice)
                            {
                                ARSOsInfo objARSOsInfo = (ARSOsInfo)new ARSOsController().GetObjectByID(objARSOItemsInfo.FK_ARSOID);
                                lstARSOs.Add(objARSOsInfo);
                            }

                        }
                    }
                }
            }
            return lstARSOs;
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dteFDate"></param>
        /// <param name="dteTDate"></param>
        /// <param name="strType"></param>
        /// <returns></returns>
        public DataSet GetDataSetARSOItemsSortOrderByPrice(int iICProductID, DateTime dteFDate, DateTime dteTDate, String strType)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ARSOItems] WHERE [FK_ICProductID] = {0} AND FK_ARSOID IN (SELECT [ARSOID] FROM [dbo].[ARSOs] WHERE CONVERT(VARCHAR(10), [ARSODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ARSODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY ARSOItemUnitPrice {4}", iICProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strType);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="dsARSOItems"></param>
        /// <returns></returns>
        /// 

        public DataSet GetAllSOIsDebtBYCustomer(int iCustomerID)
        {
            string strQuery = string.Format("Select * from ARSOs where AAStatus='Alive' and ARSORAmtTot>0");
            return GetDataSet(strQuery);
        }

        public List<ARSOsInfo> GetListARSOsByARSOItems(DataSet dsARSOItems)
        {
            List<ARSOsInfo> lstARSOs = new List<ARSOsInfo>();
            if (dsARSOItems != null)
            {
                if (dsARSOItems.Tables[0].Rows.Count > 0)
                {
                    int iMaxUnitPrice = Convert.ToInt32(dsARSOItems.Tables[0].Rows[0]["ARSOItemUnitPrice"]);
                    foreach (DataRow row in dsARSOItems.Tables[0].Rows)
                    {
                        ARSOItemsInfo objARSOItemsInfo = (ARSOItemsInfo)new ARSOItemsController().GetObjectFromDataRow(row);
                        if (objARSOItemsInfo != null)
                        {
                            if (objARSOItemsInfo.ARSOItemUnitPrice == iMaxUnitPrice)
                            {
                                ARSOsInfo objARSOsInfo = (ARSOsInfo)new ARSOsController().GetObjectByID(objARSOItemsInfo.FK_ARSOID);
                                lstARSOs.Add(objARSOsInfo);
                            }

                        }
                    }
                }
            }
            return lstARSOs;
        }

        public int GetCountSOIsDebtBySmallerYearMonthAndCustomerIDAndRAmt(int iCustomerID, int iMonth, int iYear)
        {

            string strQuery = string.Format("Select * from ARSOs where AAStatus='Alive' and FK_ARCustomerID={0} and ARSORAmtTot>0 and datepart(month,ARSODate)+ datepart(year,ARSODate)*12 <= {1} ", iCustomerID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }
        public int GetCountSOIsDebtByYearMonthAndCustomerIDAndRAmt(int iCustomerID, int iMonth, int iYear)
        {
            string strQuery = string.Format("Select * from ARSOs where AAStatus='Alive' and FK_ARCustomerID={0} and ARSORAmtTot>0 and datepart(month,ARSODate)+ datepart(year,ARSODate)*12 = {1} ", iCustomerID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }
        public int GEtCountSOIsDebtBySmallerYearMonthAndCustomerIDAndStatus(int iCustomerID, int iMonth, int iYear)
        {
            string strQuery = string.Format("Select * from ARSOs where AAStatus='Alive' and FK_ARCustomerID={0} and ARSOStatusCombo !='Complete' and datepart(month,ARSODate)+ datepart(year,ARSODate)*12 <= {1} ", iCustomerID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }
        public int GEtCountSOIsDebtByYearMonthAndCustomerIDAndStatus(int iCustomerID, int iMonth, int iYear)
        {
            string strQuery = string.Format("Select * from ARSOs where AAStatus='Alive' and FK_CustomerID={0} and ARSOStatusCombo !='Complete' and datepart(month,ARSODate)+ datepart(year,ARSODate)*12 = {1} ", iCustomerID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }
        public DataSet GetDataSetARSOsByYearMonthAndFK_CustomerID(int year, int month, int FK_CustomerID)
        {
            return dal.GetDataSet("ARSOs_SelectByYearMonthAndFK_CustomerID", year, month, FK_CustomerID);
        }

        public double GetTotalSOAmtInPeriod(int iCustomerID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select SUM(ARSOAmt) From [ARSOs] WHERE FK_ARCustomerID = {0} AND Month(ARSODate) = {1} AND Year(ARSODate) = {2} AND AAStatus='Alive'", iCustomerID, iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }

            return 0;
        }

         public double GetTotalAmtByDateTime_AndUserName(DateTime dteFrom, DateTime dteTo, string UserName)
        {
            string strQuery = string.Format("Select Sum(ARSOAmtTot) from ARSOs where AAStatus='Alive' and (CONVERT(VARCHAR(20), [ARSODate], 112) >= CONVERT(VARCHAR(20),'{0}', 112))"
                        + "AND (CONVERT(VARCHAR(20), [ARSODate], 112) < CONVERT(VARCHAR(20),'{1}', 112))"
                        + "AND AACreatedUser='{2}'", String.Format("{0:yyyyMMdd}", dteFrom), String.Format("{0:yyyyMMdd}", dteTo.AddDays(1)), UserName);
            DataSet ds= dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                 return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        public double GetSumARSOAmtTotal_ByMonth(DateTime dte, string strPartialSearch)
        {
            string strQuery = string.Format("Select Sum(ARSOAmtTot) from ARSOs where AAStatus='Alive' and Month(ARSODate)={0} and Year(ARSODate)={1}", dte.Month, dte.Year);
            if (string.IsNullOrEmpty(strPartialSearch) == false)
            {
                strQuery += string.Format("  and ({0} ) ", strPartialSearch);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0&&ds.Tables[0].Rows.Count>0)
            {
                if (string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()) == false)
                {
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return 0;
        }
        public double GetTotalSO_ByMonth(DateTime dte, string strPartialSearch)
        {
            string strQuery = string.Format("Select count(*) from ARSOs where AAStatus='Alive' and Month(ARSODate)={0} and Year(ARSODate)={1}", dte.Month, dte.Year);
            if (string.IsNullOrEmpty(strPartialSearch) == false)
            {
                strQuery += string.Format("  and ({0} ) ", strPartialSearch);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()) == false)
                {
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return 0;
        }
        public double GetSumARSOAmtTot_ByDateTime(DateTime SearchFrom, DateTime SearchTo, string strPartialSearch)
        {
            String strSearchFrom = String.Format("{0:yyyy-MM-dd hh:mm:ss}", SearchFrom);
            TimeSpan T = new TimeSpan(1, 0, 0, 0);
            SearchTo = SearchTo + T;
            String strSearchTo = String.Format("{0:yyyy-MM-dd hh:mm:ss}", SearchTo);
            String strQuery = string.Format("SELECT Sum(ARSOAmtTot) FROM ARSOs WHERE (CONVERT(VARCHAR(20), [ARSODate], 112) >= CONVERT(VARCHAR(20),'{0}', 112))"
                            + "AND (CONVERT(VARCHAR(20), [ARSODate], 112) < CONVERT(VARCHAR(20),'{1}', 112))"
                            + "AND ([AAStatus]='Alive')", String.Format("{0:yyyyMMdd}", SearchFrom), String.Format("{0:yyyyMMdd}", SearchTo.AddDays(1)));


            if (string.IsNullOrEmpty(strPartialSearch) == false)
            {
                strQuery += string.Format("  and ({0} ) ", strPartialSearch);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0&&ds.Tables[0].Rows.Count>0)
            {
                if (string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()) == false)
                {
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return 0;
        }
        public double GetTotalSo_ByDateTime(DateTime SearchFrom, DateTime SearchTo, string strPartialSearch)
        {
            String strSearchFrom = String.Format("{0:yyyy-MM-dd hh:mm:ss}", SearchFrom);
            TimeSpan T = new TimeSpan(1, 0, 0, 0);
            SearchTo = SearchTo + T;
            String strSearchTo = String.Format("{0:yyyy-MM-dd hh:mm:ss}", SearchTo);
            string strQuery = string.Format("Select count(*) FROM ARSOs WHERE (CONVERT(VARCHAR(20), [ARSODate], 112) >= CONVERT(VARCHAR(20),'{0}', 112))"
                             + "AND (CONVERT(VARCHAR(20), [ARSODate], 112) < CONVERT(VARCHAR(20),'{1}', 112))"
                             + "AND ([AAStatus]='Alive')", String.Format("{0:yyyyMMdd}", SearchFrom), String.Format("{0:yyyyMMdd}", SearchTo.AddDays(1)));
            if (string.IsNullOrEmpty(strPartialSearch) == false)
            {
                strQuery += string.Format("  and ({0} ) ", strPartialSearch);
            }
            DataSet ds =  dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0&&ds.Tables[0].Rows.Count>0)
            {
                if (string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()) == false)
                {
                    if (!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return 0;
        }

        /// <summary> Calculate SOAmtTot less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double GetAmtTotalByCustomerAndLessThanMonth(int iCustomerID, int iMonth,int iYear)
        {
            String query = string.Format(@"select SUM(ARSOAmtTot) from ARSOs where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARSODate) + year(ARSODate)*12 <={1}", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if(ds!=null&&ds.Tables.Count>0&&ds.Tables[0].Rows.Count>0)
            {
                if(ds.Tables[0].Rows[0][0]!=DBNull.Value&&!string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {
                    	
                    }
            }
            return 0;
        }

        /// <summary> Count SO less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double CountSOByCustomerAndLessThanMonth(int iCustomerID, int iMonth, int iYear)
        {
            String query = string.Format(@"select count(*) from ARSOs where AAStatus = 'Alive' and FK_ARCustomerID = {0} 
                        and month(ARSODate) + year(ARSODate)*12 <={1}", iCustomerID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Calculate SOAmtTot By Status less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double GetAmtTotalByCustomerStatusAndLessThanMonth(int iCustomerID, int iMonth, int iYear, string strSOStatus)
        {
            String query = string.Format(@"select SUM(ARSOAmtTot) from ARSOs where AAStatus = 'Alive' and ARSOStatusCombo = '{2}' and FK_ARCustomerID = {0} 
                        and month(ARSODate) + year(ARSODate)*12 <={1}", iCustomerID, iMonth + iYear * 12,strSOStatus);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }

        /// <summary> Count SO By Status less than Month Year
        ///Created By Viet Nguyen
        /// Created Date 16.04.12
        /// </summary>
        public double CountSOByCustomerStatusAndLessThanMonth(int iCustomerID, int iMonth, int iYear, string strSOStatus)
        {
            String query = string.Format(@"select count(*) from ARSOs where AAStatus = 'Alive' and ARSOStatusCombo = '{2}' and FK_ARCustomerID = {0} 
                        and month(ARSODate) + year(ARSODate)*12 <={1}", iCustomerID, iMonth + iYear * 12,strSOStatus);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }
            return 0;
        }


        public double GetTotalAmtByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear, ref double count)
        {
            String strQuery = String.Format(@"SELECT SUM(ARSOAmtTot),COUNT(*) FROM dbo.ARSOs WHERE AAStatus='Alive' AND FK_HREmployeeID={0}
	                                                    	AND MONTH(ARSODate)={1} AND YEAR(ARSODate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            DataSet dsARQuots = dal.GetDataSet(strQuery);
            count = 0;
            if (dsARQuots != null && dsARQuots.Tables.Count > 0 && dsARQuots.Tables[0].Rows.Count > 0 && dsARQuots.Tables[0].Rows[0][0] != DBNull.Value && dsARQuots.Tables[0].Rows[0][1] != DBNull.Value)
            {
                count = Convert.ToDouble(dsARQuots.Tables[0].Rows[0][1]);
                return Convert.ToDouble(dsARQuots.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        public DataSet GetAllDataByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.ARSOs WHERE AAStatus='Alive' AND FK_HREmployeeID={0} AND ARSOAmtTot >0 
	                                                    	AND MONTH(ARSODate)={1} AND YEAR(ARSODate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }


        public DataSet GetAllSOByCompaignInRange(int iCampaignID,DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT * FROM ARSOs WHERE AAStatus='Alive' 
                                                    AND ARSODate BETWEEN '{0}' AND '{1}' 
                                                    AND ARSOID IN (SELECT FK_ARSOID FROM ARSOItems WHERE AAStatus = 'Alive' AND FK_ARCampaignID = {3})"
                                                        , String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo), iCampaignID);
            return dal.GetDataSet(strQuery);
        }

        #region Get All Amt By FromDate ToDate AND Customer --Vinh --16/08/2012

        public DataSet GetAllAmtByFromDateToDateANDCustomer(int iCustomerID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ARSODate) AS Year, MONTH(ARSODate) AS Month, ARCustomerGroupID, SUM(dbo.ARSOItems.ARSOItemAmtTot) AS Amt
                                        FROM dbo.ARSOs INNER JOIN dbo.ARSOItems ON ARSOID = FK_ARSOID INNER JOIN dbo.ARCustomers ON dbo.ARSOs.FK_ARCustomerID=dbo.ARCustomers.ARCustomerID INNER JOIN dbo.ARCustomerGroups ON dbo.ARCustomers.FK_ARCustomerGroupID=dbo.ARCustomerGroups.ARCustomerGroupID
                                        WHERE dbo.ARSOs.AAStatus='Alive' AND dbo.ARSOItems.AAStatus='Alive' AND dbo.ARCustomers.AAStatus='Alive' AND dbo.ARCustomerGroups.AAStatus='Alive'
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iCustomerID != 0)
            {
                str += String.Format(@" AND dbo.ARSOs.FK_ARCustomerID={0}", iCustomerID);
            }
            str += String.Format(@"GROUP BY YEAR(ARSODate), MONTH(ARSODate), ARCustomerGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Amt By FromDate ToDate AND Product --Vinh --23/08/2012

        public DataSet GetAllAmtByFromDateToDateANDProduct(int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ARSODate) AS Year, MONTH(ARSODate) AS Month, ICProductGroupID, SUM(dbo.ARSOItems.ARSOItemAmtTot) AS Amt
                                        FROM dbo.ARSOs INNER JOIN dbo.ARSOItems ON ARSOID = FK_ARSOID INNER JOIN dbo.ICProducts ON dbo.ARSOItems.FK_ICProductID=dbo.ICProducts.ICProductID INNER JOIN dbo.ICProductGroups ON dbo.ICProducts.FK_ICProductGroupID=dbo.ICProductGroups.ICProductGroupID
                                        WHERE dbo.ARSOs.AAStatus='Alive' AND dbo.ARSOItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID!= 0)
            {
                str += String.Format(@" AND dbo.ARSOItems.FK_ICProductID={0}", iProductID);
            }
            str += String.Format(@"GROUP BY YEAR(ARSODate), MONTH(ARSODate), ICProductGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All SO By FromDate ToDate AND Customer --Vinh --20/08/2012

        public DataSet GetAllARSOByFromDateToDateANDCustomer(int iCustomerGroupID, int iCustomerID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.ARSOs
                                        WHERE dbo.ARSOs.AAStatus='Alive'
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iCustomerID != 0)
            {
                str += String.Format(@" AND dbo.ARSOs.FK_ARCustomerID={0}", iCustomerID);
            }
            if (iCustomerGroupID != 0)
            {
                str += String.Format(@" AND dbo.ARSOs.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ARCustomerGroupID = {0})", iCustomerGroupID);
            }
            else if (iCustomerGroupID == 0)
            {
                str += String.Format(@" AND dbo.ARSOs.FK_ARCustomerID IN (SELECT ARCustomerID FROM ARCustomers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ARCustomerGroupID <> 0)");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All SO By FromDate ToDate AND Product --Vinh --23/08/2012

        public DataSet GetAllARSOByFromDateToDateANDProduct(int iProductGroupID, int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.ARSOs
                                        WHERE dbo.ARSOs.AAStatus='Alive'
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ARSODate) * 12 +MONTH(ARSODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.ARSOs.ARSOID IN (SELECT FK_ARSOID FROM ARSOItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            }
            if (iProductGroupID != 0)
            {
                str += String.Format(@" AND dbo.ARSOs.ARSOID IN (SELECT FK_ARSOID FROM ARSOItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID = {0}))", iProductGroupID);
            }
            else if (iProductGroupID == 0)
            {
                str += String.Format(@" AND dbo.ARSOs.ARSOID IN (SELECT FK_ARSOID FROM ARSOItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID <> 0))");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All SO By Product

        public DataSet GetAllARSOByProduct(int iProductID)
        {
            String str = String.Format(@"SELECT * FROM ARSOs WHERE AAStatus='Alive' AND ARSOID IN (SELECT FK_ARSOID FROM ARSOItems WHERE AAStatus='Alive' AND FK_ICProductID={0})",iProductID);
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetAllObjectInProductPln(int iProductPln)
        {
            string strQuery = string.Format(@"Select * from ARSOs where ARSOID in (Select FK_ARSOID from PPProductPlnItems where AAStatus='Alive' AND FK_PPProductPlnID={0})",iProductPln);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllObjectInARShpPln(int iARShpPlnID)
        {
            string strQuery = string.Format(@"Select * from ARSOs where ARSOID in (Select FK_ARSOID from ARShpPlanItems where AAStatus='Alive' AND FK_ARShpPlanID={0})", iARShpPlnID);
            return dal.GetDataSet(strQuery);
        }
        public string GetSOAmtApprovedToDate(int iCustomerID, DateTime dtTo,int iExSOID = 0)
        {
            string str = String.Format(@"
FROM [ARSOs] a
    INNER JOIN ARSOItems b ON b.FK_ARSOID = a.ARSOID 
        AND a.ARSOID <> {2}
        AND b.AAStatus = 'Alive'
        AND a.AAStatus='Alive'
        AND (a.FK_ARCustomerID = {0} OR {0} = 0)
        --AND a.ApprovalStatusCombo = 'Approved'
        AND CONVERT(VARCHAR(20), a.ARSODate, 112) <= '{1}'
LEFT JOIN ( SELECT a1.FK_ARSOItemID, SUM(c1.ARInvoiceItemAmtTot) as ARInvoiceItemAmtTot
    FROM ICShipmentItemSOItems a1
        INNER JOIN ARInvoiceItemShipmentItems b1 ON a1.FK_ICShipmentItemID = b1.FK_ICShipmentItemID 
            AND a1.AAStatus = 'Alive' 
            AND b1.AAStatus = 'Alive'
        INNER JOIN ARInvoiceItems c1 ON b1.FK_ARInvoiceItemID = c1.ARInvoiceItemID
            AND c1.AAStatus = 'Alive' 
        INNER JOIN ARInvoices d1 ON c1.FK_ARInvoiceID = d1.ARInvoiceID
            AND d1.AAStatus = 'Alive' 
            AND d1.AAPostStatus = 'Post' 
            --AND d1.FK_ARCustomerID = {0}
    GROUP BY a1.FK_ARSOItemID
        ) c ON b.ARSOItemID = c.FK_ARSOItemID

LEFT JOIN ( SELECT a1.FK_ARSOItemID, SUM(c1.ARInvoiceItemAmtTot) as ARInvoiceItemAmtTot
    FROM ARInvoiceItemSaleOrderItems a1
        INNER JOIN ARInvoiceItems c1 ON a1.FK_ARInvoiceItemID = c1.ARInvoiceItemID
            AND c1.AAStatus = 'Alive' 
        INNER JOIN ARInvoices d1 ON c1.FK_ARInvoiceID = d1.ARInvoiceID
            AND d1.AAStatus = 'Alive' 
            AND d1.AAPostStatus = 'Post' 
            --AND d1.FK_ARCustomerID = {0}
    GROUP BY a1.FK_ARSOItemID
        ) d ON b.ARSOItemID = d.FK_ARSOItemID
LEFT JOIN ( SELECT a1.FK_ARSOItemID, SUM(e1.ARInvoiceItemAmtTot) as ARInvoiceItemAmtTot
    FROM ICROItems a1
        INNER JOIN ICShipmentItemROItems b1 ON a1.ICROItemID = b1.FK_ICROItemID
            AND a1.AAStatus = 'Alive' 
            AND b1.AAStatus = 'Alive'
        INNER JOIN ARInvoiceItemShipmentItems d1 ON b1.FK_ICShipmentItemID = d1.FK_ICShipmentItemID 
            AND d1.AAStatus = 'Alive'
        INNER JOIN ARInvoiceItems e1 ON d1.FK_ARInvoiceItemID = e1.ARInvoiceItemID
            AND e1.AAStatus = 'Alive' 
        INNER JOIN ARInvoices f1 ON e1.FK_ARInvoiceID = f1.ARInvoiceID
            AND f1.AAStatus = 'Alive' 
            AND f1.AAPostStatus = 'Post' 
            --AND f1.FK_ARCustomerID = 0
    GROUP BY a1.FK_ARSOItemID
        ) e ON b.ARSOItemID = e.FK_ARSOItemID
LEFT JOIN ( SELECT a1.FK_ARSOItemID, SUM(a1.ICROItemCQty) as ICROItemCQty
    FROM ICROItems a1
    GROUP BY a1.FK_ARSOItemID
        ) f ON b.ARSOItemID = f.FK_ARSOItemID

", iCustomerID, dtTo.ToString("yyyyMMdd"), iExSOID);
            return str;
        }
        public double GetTotalSOAmtApprovedToDate(int iCustomerID, DateTime dtTo, int iExSOID = 0)
        {
            object[] _objParrs = {iCustomerID ,
                                    dtTo ,
                                    iExSOID
                                };
            DataSet ds = SqlDatabaseHelper.RunStoredProcedure("spL_GetTotalSOAmtApprovedToDate", _objParrs);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }

            return 0;
        }
        public DataSet GetAllObjectARSOIncomlete(int iARShpPlnID)
        {
            string strQuery = string.Format(@"  SELECT  ARSOs.*
                                                FROM ARSOs
                                                WHERE arsos.AAStatus = 'Alive' 
                                                AND EXISTS ( SELECT  'x'
                                                                    FROM    ARShpPlanItems
                                                                    WHERE   ARShpPlanItems.AAStatus = 'Alive' 
					                                                AND (dbo.ARShpPlanItems.AAStatus <> 'Complete'
							                                                OR dbo.ARShpPlanItems.ARShpPlanItemNTSQty <> 0)
					                                                AND arsos.ARSOID = arshpplanitems.FK_ARSOID
						                                                 )
                                                AND FK_ARShpPlanID={0}", iARShpPlnID);
            return dal.GetDataSet(strQuery);
        }

        //tuyen-03/06/2016-lấy SODate để bắt trường hợp ngày phiếu xuất kho < ngày SO
        public ARSOsInfo GetSODate(int iPkgOrderItem)
        {
            string sQry = string.Format(@" IF OBJECT_ID('tempdb..#ViewSODate') IS NOT NULL
	                    DROP TABLE #ViewSODate
                    SELECT  b.FK_ARSOID, ARSOItemID,b.FK_ICProductID, ARSODate
                    INTO    #ViewSODate
                    FROM    ARSOs a 
                        JOIN ARSOItems b ON a.ARSOID = b.FK_ARSOID AND a.AAStatus = 'Alive' AND b.AAStatus = 'Alive'

                    IF OBJECT_ID('tempdb..#ViewShpPlanDate') IS NOT NULL
	                    DROP TABLE #ViewShpPlanDate
                    SELECT  so.FK_ARSOID, ARSOItemID, ARShpPlanID, ARShpPlanItemID, so.ARSODate
                    INTO    #ViewShpPlanDate
                    FROM    #ViewSODate so 
                        JOIN ARShpPlanItems shplan ON FK_ARSOItemID = ARSOItemID AND shplan.FK_ICProductID = so.FK_ICProductID AND shplan.AAStatus = 'Alive'
                        JOIN ARShpPlans plans ON ARShpPlanID = FK_ARShpPlanID AND plans.AAStatus = 'Alive'

                    IF OBJECT_ID('tempdb..#ViewPkgOrderDate') IS NOT NULL
	                    DROP TABLE #ViewPkgOrderDate
                    SELECT  shplan.FK_ARSOID, ARSOItemID, PPPkgOrderID, PPPkgOrderItemID, shplan.ARSODate
                    INTO    #ViewPkgOrderDate
                    FROM    #ViewShpPlanDate shplan
                        JOIN PPPkgOrderItems pporder ON shplan.ARShpPlanItemID = pporder.FK_ARShpPlanItemID AND pporder.AAStatus = 'Alive'
                        JOIN PPPkgOrders orders ON orders.PPPkgOrderID = FK_PPPkgOrderID AND orders.AAStatus = 'Alive'
						WHERE pporder.PPPkgOrderItemID = {0}

SELECT * FROM dbo.ARSOs, #ViewPkgOrderDate v WHERE v.FK_ARSOID = ARSOs.ARSOID", iPkgOrderItem);
            DataSet ds = GetDataSet(sQry);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ARSOsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            else
                return null;
        }
        
        //tuyen-03/06/2016-lọc SO chưa xuất hoặc xuất chưa hết
        public DataSet SOChuaXuat(DateTime dteFrom, DateTime dteTo)
        {
            string sQry = string.Format(@"SELECT * FROM dbo.ARSOs
                                WHERE AAStatus = 'Alive'
                                AND ARSOID IN (
				                                SELECT FK_ARSOID 
                                                                FROM ARSOItems 
                                                                WHERE AAStatus = 'ALive' 
								                                AND ARSOItemRqty > 0 
								                                AND ARSOItemShpDate BETWEEN '{0}' AND '{1}'
                                                                AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus = 'Alive' AND ICProductIsStkItm = 1
				))", String.Format("{0:yyyy/M/d HH:mm:ss}", dteFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dteTo));
                  return dal.GetDataSet(sQry);
        }
    }
	
	#endregion
}