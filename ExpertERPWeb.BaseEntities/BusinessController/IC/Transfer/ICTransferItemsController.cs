using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Globalization;


namespace ExpertERP.BusinessEntities
{
    #region ICTransferItems
    //-----------------------------------------------------------
    //Generated By: VTD Studio
    //Class:ICTransferItemsController
    //Created Date:Thursday, June 19, 2008
    //-----------------------------------------------------------

    public class ICTransferItemsController : BaseBusinessController
    {
        public static CultureInfo culture = new CultureInfo("en-US");

        public ICTransferItemsController()
        {
            dal = new DALBaseProvider("ICTransferItems", typeof(ICTransferItemsInfo));
        }

        public DataSet GetTransferItemsByProductIDAndProductSerialNo(int iProductID, String strProductSerialNo)
        {
            return dal.GetDataSet("ICTransferItems_SelectByProductIDAndProductSerialNo", iProductID, strProductSerialNo);
        }

        public ICTransferItemsInfo GetTransferItemByProductIDAndProductSerialNo(int iProductID, String strProductSerialNo)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductIDAndProductSerialNo", iProductID, strProductSerialNo);
        }

        public DataSet GetNotCompleteTransferItems()
        {
            return dal.GetDataSet("ICTransferItems_SelectNotCompleteTransferItems");
        }

        public DataSet GetTransferItemsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICTransferItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICTransferItemsInfo GetTransferItemByProductSerialNo(String strProductSerialNo)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetTransferItemsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICTransferItems_SelectByFK_ICProductID", iProductID);
        }

        public DataSet GetTransferItemsByTransferID(int iTransferID)
        {
            return dal.GetDataSet("ICTransferItems_SelectByFK_ICTransferID", iTransferID);
        }

        public ICTransferItemsInfo GetTransferItemByProductID(int iProductID)
        {
            return (ICTransferItemsInfo)dal.GetDataObject("ICTransferItems_SelectByProductID", iProductID);
        }

        public DataSet GetTransferItemsByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductSerialNo(strProductSerialNo);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objTransferItemsInfo != null)
                        if (objTransferItemsInfo.FK_ICFromStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICTransferItemsInfo GetTransferItemByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductSerialNoAndStockID(strProductSerialNo, iStockID);
            if (ds.Tables.Count > 0)
                return (ICTransferItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        public DataSet GetTransferItemsByProductIDAndFromStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objTransferItemsInfo != null)
                        if (objTransferItemsInfo.FK_ICFromStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public DataSet GetTransferItemsByProductIDAndToStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICTransferItemsInfo objTransferItemsInfo = (ICTransferItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objTransferItemsInfo != null)
                        if (objTransferItemsInfo.FK_ICToStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICTransferItemsInfo GetTransferItemByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetTransferItemsByProductIDAndFromStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICTransferItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        #region--hieu nguyen --
        public DataSet GetTransferReceiptItemsByProductIDAndStockIDAndDate(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            String strGetReceiptByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICTransferItems] WHERE {0}", GenerateQueryConditionReceipt(iProductID, iStockID, dtFromDate, dtToDate));
            return (DataSet)dal.GetDataSet(strGetReceiptByProductStockAndDate);
        }

        public DataSet GetTransferShipmentItemsByProductIDAndStockIDAndDate(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            String strGetReceiptByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICTransferItems] WHERE {0}", GenerateQueryConditionShipment(iProductID, iStockID, dtFromDate, dtToDate));
            return (DataSet)dal.GetDataSet(strGetReceiptByProductStockAndDate);
        }
        private String GenerateQueryConditionReceipt(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICTransferID] IN (SELECT [ICTransferID] FROM [dbo].[ICTransfers] WHERE CONVERT(VARCHAR(10), [ICTransferDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICTransferDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [ICTransferTypeCombo]='{5}' AND [AAStatus] ='{2}') AND [FK_ICProductID]={3} AND (([FK_ICFromStockID]= {4}) OR({4}=0)) AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iStockID, "TransferIn");
        }
        private String GenerateQueryConditionShipment(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICTransferID] IN (SELECT [ICTransferID] FROM [dbo].[ICTransfers] WHERE CONVERT(VARCHAR(10), [ICTransferDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICTransferDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [ICTransferTypeCombo]='{5}' AND [AAStatus] ='{2}') AND [FK_ICProductID]={3} AND (([FK_ICToStockID]= {4}) OR({4}=0)) AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iStockID, "TransferOut");
        }
        #endregion

        public DataSet GetTransferItemOutByProductIDAndStockIDAndPeriodAndYear(int iProductID, int iStockID, int iPeriod, int iYear)
        {
            //String strQuery=String.Format("Select * From [ICShipmentItems] WHERE ([FK_ICStockID]={0}) AND ([FK_ICProductID]={1}) AND 
            return dal.GetDataSet("ICTransferItems_SelectTransferItemOutByStockID_ProductID_Period_Year", iStockID, iProductID, iPeriod, iYear);
        }

        public DataSet GetTransferItemInByProductIDAndStockIDAndPeriodAndYear(int iProductID, int iStockID, int iPeriod, int iYear)
        {
            //String strQuery=String.Format("Select * From [ICShipmentItems] WHERE ([FK_ICStockID]={0}) AND ([FK_ICProductID]={1}) AND 
            return dal.GetDataSet("ICTransferItems_SelectTransferItemInByStockID_ProductID_Period_Year", iStockID, iProductID, iPeriod, iYear);
        }

        public DataSet GetAllTransferItemsIn_InPeriod(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND convert(varchar(10),ICTransferDate, 112) BETWEEN '{1}' And '{2}'
                                                AND ICTransferTypeCombo = 'TransferIn'
                                                )",
                                                iProductID,
                                                dtFrom,
                                                dtTo);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICToStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICToStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICToStockID = {0}", iStockID);
            }

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsIn(int iBranchID, int iProductID, int iStockID)
        {
            string strQuery = String.Format(@"SELECT SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND ICTransferTypeCombo = 'TransferIn'
                                                )",
                                                iProductID);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICToStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICToStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICToStockID = {0}", iStockID);
            }

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsIn_Begin(int iProductID, int iStockID, DateTime dtCutOff)
        {
            string strQuery = String.Format(@"SELECT SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICFromToStockID = {1}
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND ICTransfers.ICTransferDate < '{2}'
                                                AND ICTransferTypeCombo = 'TransferIn'
                                                )",
                                                iProductID, iStockID,
                                                String.Format("{0:yyyy/M/d HH:mm:ss}", dtCutOff));

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsOut_Begin(int iProductID, int iStockID, DateTime dtCutOff)
        {
            string strQuery = String.Format(@"SELECT SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICFromFromStockID = {1}
                                             AND FK_ICTransferID In 
					                            (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND ICTransfers.ICTransferDate < '{2}'
                                                AND ICTransferTypeCombo = 'TransferIn'
                                                )",
                                                iProductID, iStockID,
                                                String.Format("{0:yyyy/M/d HH:mm:ss}", dtCutOff));

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsIn_InPeriod(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT FK_ICProductID,FK_ICToStockID, SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND convert(varchar(10),ICTransferDate, 112) BETWEEN '{0}' And '{1}'
                                                AND ICTransferTypeCombo = 'TransferIn')
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICToStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                dtFrom,
                                                dtTo);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
            }
            else// cho toan bo chi nhanh
            {
            }

            strQuery += string.Format("Group by FK_ICProductID,FK_ICToStockID order by FK_ICProductID,FK_ICToStockID");
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsOut(int iBranchID, int iProductID, int iStockID)
        {
            string strQuery = String.Format(@"Select Sum(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND ICTransferTypeCombo = 'TransferOut' 
                                                )",
                                                iProductID);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICFromStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICFromStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICFromStockID = {0}", iStockID);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsOut_InPeriod(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"Select Sum(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICProductID = {0} 
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND convert(varchar(10),ICTransferDate, 112) BETWEEN '{1}' And '{2}' 
                                                AND ICTransferTypeCombo = 'TransferOut' 
                                                )",
                                                iProductID,
                                                dtFrom.ToString("yyyyMMdd"),
                                                dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICFromStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICFromStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICFromStockID = {0}", iStockID);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllTransferItemsOut_InPeriod(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"Select  FK_ICProductID,FK_ICFromStockID, Sum(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) as CostTot 
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND convert(varchar(10),ICTransferDate, 112) BETWEEN '{0}' And '{0}' 
                                                AND ICTransferTypeCombo = 'TransferOut')
                                            AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                            AND FK_ICFromStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                dtFrom.ToString("yyyyMMdd"),
                                                dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
            }
            else// cho toan bo chi nhanh
            {
            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICFromStockID order by FK_ICFromStockID,FK_ICProductID");
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public Object GetTransferItemByProductIDAndTransferID(int iProductID, int iTransferID)
        {
            String strQuery = String.Format("SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICTransferID = {1}", iProductID, iTransferID);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        public DataSet GetTransferItemOutByStockIDProductIDAndPeriodAndYear(String strTransferType, int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICFromStockID = {1}", iICProductID, iICStockID);
            String strQueryTransferInPeriod = String.Format("SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = {0} AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}", strTransferType, iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICTransferID IN ({0})", strQueryTransferInPeriod);

            return dal.GetDataSet(strQuery);

        }

        public DataSet GetTransferItemInByStockIDProductIDAndPeriodAndYear(String strTransferType, int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICToStockID = {1}", iICProductID, iICStockID);
            String strQueryTransferInPeriod = String.Format("SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = {0} AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}", strTransferType, iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICTransferID IN ({0})", strQueryTransferInPeriod);

            return dal.GetDataSet(strQuery);

        }

        public Double GetSumQtyOutByStockIDProductIDAndPeriodAndYear(String strTransferType, int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICTransferItemQty) FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICFromStockID = {1}", iICProductID, iICStockID);
            String strQueryTransferInPeriod = String.Format("SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = '{0}' AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}", strTransferType, iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICTransferID IN ({0})", strQueryTransferInPeriod);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public Double GetSumQtyOutByProductIDAndPeriodAndYear(String strTransferType, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICTransferItemQty) FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0}", iICProductID);
            String strQueryTransferInPeriod = String.Format("SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = '{0}' AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}", strTransferType, iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICTransferID IN ({0})", strQueryTransferInPeriod);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetSumQtyAndCostTotInByStockIDProductIDAndPeriodAndYear(String strTransferType, int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICTransferItemQty) as Qty, SUM(ICTransferItemCostTot) AS CostTot FROM ICTransferItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICToStockID = {1}", iICProductID, iICStockID);
            String strQueryTransferInPeriod = String.Format("SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = '{0}' AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}", strTransferType, iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICTransferID IN ({0})", strQueryTransferInPeriod);

            return dal.GetDataSet(strQuery);
        }


        public DataSet GetAllTransferItemsOrderByDate(String strTransferType, int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICTransferItems.* FROM ICTransferItems, ICTransfers 
                                                        WHERE ICTransferItems.AAStatus = 'Alive' 
                                                        AND ICTransfers.AAStatus = 'Alive' 
                                                        AND FK_ICTransferID = ICTransferID
                                                        AND ICTransferTypeCombo = '{0}'
                                                        AND Month(ICTransferDate) = {1}
                                                        AND Year(ICTransferDate) = {2}  
                                                        AND ICTransferItems.FK_ICProductID = {3} 
                                                        ORDER BY ICTransferDate", strTransferType, iPeriod, iYear, iProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllTransferItemsOrderByDateDESC(String strTransferType, int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICTransferItems.* FROM ICTransferItems, ICTransfers 
                                                        WHERE ICTransferItems.AAStatus = 'Alive' 
                                                        AND ICTransfers.AAStatus = 'Alive' 
                                                        AND FK_ICTransferID = ICTransferID
                                                        AND ICTransferTypeCombo = '{0}'
                                                        AND Month(ICTransferDate) = {1}
                                                        AND Year(ICTransferDate) = {2}  
                                                        AND ICTransferItems.FK_ICProductID = {3} 
                                                        ORDER BY ICTransferDate DESC", strTransferType, iPeriod, iYear, iProductID);
            return dal.GetDataSet(strQuery);
        }

        #region Valuation
        public void UpdateValuationToTransferItems(int iProductId, String strTransferType, int iPeriod, int iYear, double dUnitCost)
        {

            String strQuery = String.Format(culture, @"UPDATE ICTransferItems SET ICTransferItemUnitCost = {0}, ICTransferItemCostTot = {0} * ICTransferItemQty
                                                                    WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                                                    AND FK_ICTransferID IN 
                                                                        (SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = '{2}'
                                                                                            AND Month(ICTransferDate) = {3} AND Year(ICTransferDate) = {4})",
                                                                  dUnitCost, iProductId, strTransferType, iPeriod, iYear);

            dal.GetDataSet(strQuery);
        }


        public void UpdateValuationToTransferItems(int iStockID, int iProductId, String strTransferType, int iPeriod, int iYear, double dUnitCost)
        {

            String strQuery = String.Format(culture, @"UPDATE ICTransferItems SET ICTransferItemUnitCost = {0}, ICTransferItemCostTot = {0} * ICTransferItemQty
                                                                    WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                                                    AND FK_ICTransferID IN 
                                                                        (SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive' AND ICTransferTypeCombo = '{2}'
                                                                                            AND Month(ICTransferDate) = {3} AND Year(ICTransferDate) = {4})",
                                                                  dUnitCost, iProductId, strTransferType, iPeriod, iYear);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICToStockID = {0}", iStockID);

            dal.GetDataSet(strQuery);
        }

        public void UpdateValuationToTransferItems(int iStockID, int iProductId, int iPeriod, int iYear, double dUnitCost)
        {

            String strQuery = String.Format(culture, @"UPDATE ICTransferItems SET ICTransferItemUnitCost = {0}, ICTransferItemCostTot = ROUND({0} * ICTransferItemQty, 0)
                                                                    WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                                                    AND FK_ICTransferID IN 
                                                                        (SELECT ICTransferID FROM ICTransfers WHERE AAStatus = 'Alive'
                                                                                            AND Month(ICTransferDate) = {2} AND Year(ICTransferDate) = {3})",
                                                                  dUnitCost, iProductId, iPeriod, iYear);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICFromStockID = {0}", iStockID);

            dal.GetDataSet(strQuery);
        }

        public double GetSUMCostTotTransferItemOuts(int iStockID, int iProductId, int iPeriod, int iYear)
        {

            String strQuery = String.Format(culture, @" SELECT SUM(ICTransferItemCostTot)
                                                        FROM ICTransferItems
                                                        WHERE AAStatus = 'Alive' AND FK_ICProductID = {0}
                                                        AND FK_ICTransferID IN (
                                                                                    SELECT ICTransferID 
                                                                                    FROM ICTransfers 
                                                                                    WHERE AAStatus = 'Alive'
                                                                                    AND Month(ICTransferDate) = {1} AND Year(ICTransferDate) = {2}
                                                                                )", iProductId, iPeriod, iYear);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICFromStockID = {0}", iStockID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        #endregion

        #region GetAllDataViewInventoryStatistic --Vinh --11/12/2012 --Lấy tất cả danh sách ICTransferItem dựa vào Kho, Sản phẩm, Nhóm sản phẩm, Brand và Từ ngày đến ngày.

        public DataSet GetAllDataViewInventoryStatistic(int iStockID, int iProductID, int iProductGroupID, int iProductTypeID, int iBrandID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICTransferItems 
                                            WHERE AAStatus='Alive'
                                            AND (FK_ICFromStockID={0} OR FK_ICToStockID={0} OR 0={0})
                                            AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True' AND (ICProductID = {1} OR 0={1}) AND (FK_ICBrandID={2} OR 0={2}) AND (FK_ICProductGroupID = {3} OR 0={3}) AND (FK_ICProductTypeID = {6} OR 0={6}))
                                            AND FK_ICTransferID IN (SELECT ICTransferID FROM dbo.ICTransfers WHERE AAStatus='Alive' AND CONVERT(VARCHAR(20), ICTransferDate, 112) >= CONVERT(VARCHAR(20),'{4}', 112) AND CONVERT(VARCHAR(20), ICTransferDate, 112) <= CONVERT(VARCHAR(20),'{5}', 112) )"
                                            , iStockID, iProductID, iBrandID, iProductGroupID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"), iProductTypeID);

            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetAllDataByWOAndProduct(int iWO, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID={1} ", ProductID, iWO);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByWOAndProductAndStock(int iWO, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID={1} AND (FK_ICFromStockID={2} OR FK_ICToStockID={2})", ProductID, iWO, StockID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByWOAndProductAndStock(int iWO, int ProductID, int StockID, String strType)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID={1} ", ProductID, iWO);
            if (strType == "In")
            {
                strQuery += String.Format("AND  FK_ICToStockID={0}", StockID);
            }

            if (strType == "Out")
            {
                strQuery += String.Format("AND  FK_ICFromStockID={0}", StockID);
            }

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1}) ", ProductID, ProductPlanID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID, int iSOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={2}) ", ProductID, ProductPlanID, iSOID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlnAndProductAndStock(int iProductPln, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1}) AND (FK_ICFromStockID={2} OR FK_ICToStockID={2})", ProductID, iProductPln, StockID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlnAndProductAndStockAndSO(int iProductPln, int ProductID, int StockID, int SOID, String strType)
        {
            String strQuery = String.Format(@"SELECT * FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={2}) ", ProductID, iProductPln, SOID);
            if (strType == "In")
            {
                strQuery += String.Format("AND  FK_ICToStockID={0}", StockID);
            }

            if (strType == "Out")
            {
                strQuery += String.Format("AND  FK_ICFromStockID={0}", StockID);
            }

            return GetDataSet(strQuery);
        }

        public double GetSUMQtyByWOAndProductAndStock(int iWO, int ProductID, int StockID, String strType)
        {
            String strQuery = String.Format(@"SELECT SUM(ICTransferItemQty) FROM ICTransferItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM ICTransfers WHERE AAStatus='Alive') AND FK_PPWOID={1} ", ProductID, iWO);
            if (strType == "In")
            {
                strQuery += String.Format("AND  FK_ICToStockID={0}", StockID);
            }

            if (strType == "Out")
            {
                strQuery += String.Format("AND  FK_ICFromStockID={0}", StockID);
            }
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {
                    return 0;
                }
            }
            return 0;
        }

        public DataSet GetAllTransferItemsOut_InPeriod(int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            string strQueryDate = DALUtil.GenerateBeetween("ICTransferDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT *
					                         FROM ICTransferItems 
					                         WHERE AAStatus = 'Alive'
                                             AND (FK_ICProductID = {0} or {0}=0) AND (FK_ICFromStockID={1} or {1}=0)
                                             AND FK_ICTransferID In 
					                             (SELECT ICTransferID 
                                                From ICTransfers 
                                                Where AAStatus='Alive' 
                                                AND {2}
                                                )",
                                                iProductID, iStockID, strQueryDate
                                                );
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        #region

        public double GetSumTransferItemQtyForWO(int iProductID, int iPPWOID, int iStockID)
        {
            String strQuery = String.Format(@"  SELECT SUM(ICTransferItemQty) FROM dbo.ICTransferItems
                                                WHERE AAStatus='Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ICToStockID = {1}
                                                AND FK_PPWOID = {2}
                                                AND FK_ICTransferID IN (SELECT ICTransferID FROM dbo.ICTransfers WHERE AAStatus='Alive')", iProductID, iStockID, iPPWOID);

            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        #endregion

        #region Giá Thành Mới --Vinh
        public void UpdateCostTotTransferItems(int iICProductID, int iPeriod, int iYear, double dbUnitCost)
        {
            String strQuery = String.Format(culture, @" UPDATE  ICTransferItems
                                                        SET     ICTransferItemUnitCost = {0} ,
                                                                ICTransferItemCostTot = ROUND({0} * ICTransferItemQty, 0)
                                                        WHERE   AAStatus = 'Alive'
                                                                AND FK_PPCostCenterID NOT IN (
                                                                                                SELECT FK_PPCostCenterID FROM dbo.PPProductionCostCenterActives
                                                                                                WHERE PPPeriod = {2}
                                                                                                AND PPYear = {3}
                                                                                              )
                                                                AND FK_ICProductID = {1}
                                                                AND FK_ICTransferID IN ( SELECT ICTransferID
                                                                                         FROM   ICTransfers
                                                                                         WHERE  AAStatus = 'Alive'
                                                                                                AND MONTH(ICTransferDate) = {2}
                                                                                                AND YEAR(ICTransferDate) = {3} )",
                                                                  dbUnitCost, iICProductID, iPeriod, iYear);

            dal.GetDataSet(strQuery);
        }
        public void UpdateCostTotTransferItemsLan1(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost)
        {
            String strQuery = String.Format(culture, @" 
            UPDATE  ICTransferItems
            SET     ICTransferItemUnitCost = {0} ,
                    ICTransferItemCostTot = ROUND({0} * ICTransferItemStkQty, 0),
                    ICTransferItemFCostTot = {3} * ICTransferItemStkQty
            WHERE   AAStatus = 'Alive'
                    AND FK_ICProductID = {1}
                    AND FK_ICTransferID IN ( SELECT ICTransferID
                                                FROM   ICTransfers
                                                WHERE  AAStatus = 'Alive'
                                                    AND YEAR(ICTransferDate) * 12 + MONTH(ICTransferDate) = {2})

            UPDATE ICTransfers
                SET ICTransferCostTot = ICTransferItemCostTot
                FROM ICTransfers a
                    INNER JOIN (SELECT FK_ICTransferID, SUM(ICTransferItemCostTot) ICTransferItemCostTot
			                    FROM ICTransferItems 
			                    WHERE AAStatus = 'Alive'
			                    GROUP BY FK_ICTransferID) b ON b.FK_ICTransferID = a.ICTransferID
                        AND a.AAStatus = 'Alive'
                        AND YEAR(ICTransferDate) * 12 + MONTH(ICTransferDate) = {2}
            ",
            dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
            , iICProductID
            , iPeriod + iYear * 12
            , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }
        public DataSet GetSumQtyAndCostTotByProductIDAndPeriodAndYear(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"  SELECT SUM(ICTransferItemQty) as Qty, 
                                                SUM(ICTransferItemCostTot) as CostTot 
                                                FROM ICTransferItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICTransferID IN (
                                                    SELECT ICTransferID 
                                                    FROM ICTransfers 
                                                    WHERE AAStatus = 'Alive' 
                                                    AND MONTH(ICTransferDate) = {1} 
                                                    AND YEAR(ICTransferDate) = {2})", iICProductID, iPeriod, iYear);

            return dal.GetDataSet(strQuery);
        }
        #endregion

        // NhamNDH add -28/11/2016- Move Kết quả sản xuất từ CHF
        public DataSet GetAllTransferItemByProductionOrdANDProduct(int iPPProductionOrdID, int iICProductID)
        {
            string strQuery = String.Format(@"SELECT  *
                                            FROM    dbo.ICTransferItems
                                                    INNER JOIN dbo.ICTransferItemROItems ON ICTransferItemROItems.FK_ICTransferItemID = ICTransferItems.ICTransferItemID
                                                                                            AND ICTransferItemROItems.AAStatus = ICTransferItems.AAStatus
                                                                                            AND ICTransferItemROItems.AAStatus = 'Alive'
                                                    INNER JOIN dbo.ICROItems ON ICROItems.ICROItemID = ICTransferItemROItems.FK_ICROItemID
                                                                                AND ICROItems.AAStatus = ICTransferItemROItems.AAStatus
                                                                                AND ICROItems.AAStatus = 'Alive'
                                                    INNER JOIN dbo.ICROs ON ICROs.ICROID = ICROItems.FK_ICROID
                                                                            AND ICROs.AAStatus = ICROItems.AAStatus
                                                                            AND ICROs.AAStatus = 'Alive'
                                            WHERE   ICROs.FK_PPProductionOrdrID = {0}
                                                    AND ICROItems.FK_ICProductIDWO = {1}
                                                    AND ICTransferItems.FK_ICTransferID IN (
                                                    SELECT  ICTransferID
                                                    FROM    dbo.ICTransfers
                                                    WHERE   ICTransfers.AAStatus = 'Alive'
                                                            AND ICTransfers.ICTransferTypeCombo = 'ProductionTransfer' )", iPPProductionOrdID, iICProductID);
            return dal.GetDataSet(strQuery);
        }
        // NhamNDH add -28/11/2016- Move Kết quả sản xuất từ CHF
        public DataSet GetAllTransferItemCanCreateMaterial(int iICTransferID)
        {
            string strQuery = String.Format(@"SELECT  *
                                        FROM    dbo.ICTransferItems
                                        WHERE   AAStatus = 'Alive'
                                                AND ICTransferItemRQty > 0
                                                AND FK_ICTransferID = {0}", iICTransferID);
            return dal.GetDataSet(strQuery);
        }
        //
    }
    #endregion
}