using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Globalization;


namespace ExpertERP.BusinessEntities
{
    #region ICShipmentItems
    //-----------------------------------------------------------
    //Generated By: GMC Studio
    //Class:ICShipmentItemsController
    //Created Date:Monday, April 14, 2008
    //-----------------------------------------------------------

    public class ICShipmentItemsController : BaseBusinessController
    {
        public static CultureInfo culture = new CultureInfo("en-US");
        private readonly string spGetTotalShippedQuantityOfSaleOrderItem =
                                "ICShipmentItems_SelectTotalShippedQuantityByARSaleOrderItemID";

        public ICShipmentItemsController()
        {
            dal = new DALBaseProvider("ICShipmentItems", typeof(ICShipmentItemsInfo));
        }
        public DataSet GetShipmentItemsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICShipmentItems_SelectByFK_ICProductID", iProductID);
        }
        public DataSet GetShipmentItemsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetShipmentItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICShipmentItemsInfo objShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objShipmentItemsInfo != null)
                        if (objShipmentItemsInfo.FK_ICStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }
        public double GetTotalShippedQuantityOfSaleOrderItem(int iARSaleOrderItemID)
        {
            double dbTotalShippedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalShippedQuantityOfSaleOrderItem, iARSaleOrderItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalShippedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                return dbTotalShippedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        #region--hieu nguyen created--
        public double GetShipmentQtyByProductAndProductTypeAndStockAndBranchAndDate(int iProductID, int iProductTypeID, int iStockID, int iBranchID, DateTime dtFromDate, DateTime dtToDate)
        {
            double dbQty = 0;
            String strGetShipmentByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICShipmentItems] WHERE {0}", GenerateQueryConditionShipment(iProductID, iProductTypeID, iBranchID, iStockID, dtFromDate, dtToDate));
            DataSet ds = dal.GetDataSet(strGetShipmentByProductStockAndDate);
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ICShipmentItemsInfo objICShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                        if (objICShipmentItemsInfo != null)
                        {
                            dbQty += objICShipmentItemsInfo.ICShipmentItemQty;
                        }
                    }
                }
            }
            return dbQty;
        }

        //private String GenerateQueryConditionShipment(DateTime dtFromDate, DateTime dtToDate, int iProductID, int iBranchID)
        //{
        //        return String.Format("[FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [dbo].[ICShipments] WHERE CONVERT(VARCHAR(10), [ICShipmentDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICShipmentDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [AAStatus] ='{2}'AND (([FK_BRBranchID]= {4}) OR({4}=0))) AND [FK_ICProductID] ={3} AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iBranchID);
        //}
        private String GenerateQueryConditionShipment(int iProductID, int iProductTypeID, int iBranchID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [dbo].[ICShipments] WHERE CONVERT(VARCHAR(10), [ICShipmentDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICShipmentDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [AAStatus] ='{2}'AND (([FK_BRBranchID]= {4}) OR({4}=0))) AND [FK_ICProductID] ={3} AND (([FK_ICStockID]= {5}) OR({5}=0)) AND (([FK_ICProductTypeID]= {6}) OR({6}=0)) AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iBranchID, iStockID, iProductTypeID);
        }
        //
        public DataSet GetListObjectsByProductAndStockAndDate(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            String strGetShipmentByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICShipmentItems] WHERE {0}", GenerateQueryConditionShipment(iProductID, iStockID, dtFromDate, dtToDate));
            return (DataSet)dal.GetDataSet(strGetShipmentByProductStockAndDate);

        }

        private String GenerateQueryConditionShipment(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [dbo].[ICShipments] WHERE CONVERT(VARCHAR(10), [ICShipmentDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICShipmentDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [AAStatus] ='{2}') AND [FK_ICProductID] ={3} AND (([FK_ICStockID]= {4}) OR({4}=0)) AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iStockID);
        }
        #endregion
        /// <summary>
        /// Created By Hoang.nguyen
        /// Created date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dtFDate"></param>
        /// <param name="dtTDate"></param>
        /// <returns></returns>
        public DataSet GetDataSetICShipmentItemsByICProductIDAndFDateTDate(int iICProductID, DateTime dtFDate, DateTime dtTDate)
        {
            DataSet dsICShipmentItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ICShipmentItems] WHERE [FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [dbo].[ICShipments] WHERE CONVERT(VARCHAR(10), [ICShipmentDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ICShipmentDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [FK_ICProductID]={0} AND [AAStatus] ='{3}'", iICProductID, dtFDate.ToString("yyyyMMdd"), dtTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetICShipmentItemsInCompleteByICShipmentID(int iICShipmentID)
        {
            String strQuery = String.Format("SELECT * FROM [ICShipmentItems] WHERE [FK_ICShipmentID] = {0} AND [ICShipmentItemRQty] > 0 AND [AAStatus] = 'Alive'", iICShipmentID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetShipmentItemByStockIDProductIDInPeriod(int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            //return dal.GetDataSet("ICShipmentItems_SelectByStockID_ProductID_Period_Year", iICStockID, iICProductID, iPeriod, iYear);
            String strQuery = String.Format("SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1}", iICProductID, iICStockID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' AND Month(ICSipmentDate) = {0} AND Year(ICShipmentDate) = {1}", iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICShipmentID IN ({0})", strQueryShipmentInPeriod);

            return dal.GetDataSet(strQuery);

        }

        public Double GetSumQtyByStockIDProductIDInPeriod(int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1}", iICProductID, iICStockID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' AND Month(ICShipmentDate) = {0} AND Year(ICShipmentDate) = {1}", iPeriod, iYear);
            String strQueryProductionOrdrAlive = String.Format("SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive' AND Month(PPProductionOrdrDate) = {0} AND Year(PPProductionOrdrDate) = {1}", iPeriod, iYear);

            strQuery += String.Format(" AND (FK_ICShipmentID IN ({0}) OR FK_PPProductionOrdrID IN ({1}))", strQueryShipmentInPeriod, strQueryProductionOrdrAlive);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;

        }


        /// <summary>
        /// Viet Nguyen 2012/11/29
        /// Get SumQty In ShipmentItem By Product Period Year And FK_ARCustomerID>0
        /// </summary>
        public Double GetSumQtyByStockIDProductIDSOID(int iICStockID, int iICProductID, int iARSOID)
        {
            String strQuery = String.Format("SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1} AND FK_ARSOID={2}", iICProductID, iICStockID, iARSOID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive'");

            strQuery += String.Format(" AND FK_ICShipmentID IN ({0}) ", strQueryShipmentInPeriod);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;

        }

        /// <summary>
        /// Viet Nguyen 2012/11/29
        /// Get All ShipmentItem By Product Period Year AND SO
        /// </summary>
        public DataSet GetAllDataByStockIDProductIDSOID(int iICStockID, int iICProductID, int iARSOID)
        {
            String strQuery = String.Format("SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1}", iICProductID, iICStockID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' AND FK_ARSOID={0}", iARSOID);

            strQuery += String.Format(" AND FK_ICShipmentID IN ({0}) ", strQueryShipmentInPeriod);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2012/11/29
        /// Count Shipment By Product Period Year And FK_ARCustomerID>0
        /// </summary>
        public int CountShipByStockIDProductIDSOID(int iICStockID, int iICProductID, int iARSOID)
        {
            String strQuery = String.Format("SELECT count(*) FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1} AND FK_ARSOID={2}", iICProductID, iICStockID, iARSOID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive'");

            strQuery += String.Format(" AND FK_ICShipmentID IN ({0})", strQueryShipmentInPeriod);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]);

            return 0;

        }

        public Double GetSumQtyByProductIDInPeriod(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0}", iICProductID);
            String strQueryShipmentInPeriod = String.Format("SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' AND Month(ICShipmentDate) = {0} AND Year(ICShipmentDate) = {1}", iPeriod, iYear);

            strQuery += String.Format(" AND FK_ICShipmentID IN ({0})", strQueryShipmentInPeriod);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;

        }

        public double GetTotalCostWithWO_InPeriod(int iPeriod, int iYear, int WOID, int phaseID, int productID)
        {
            double result = 0.0;
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query2 = "";
            string query = "SELECT SUM(ICShipmentItemAmtTot) FROM ICShipmentItems WHERE AAStatus = 'Alive'";
            if (fromDate.Year != 1)
                query2 += String.Format("AND ICShipmentDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query2 += string.Format("AND ICShipmentDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND  FK_ICProductIDWO = {0} and FK_PPPhaseCfgID = {1} and FK_ICShipmentID in (select ICShipmentID from ICShipments where AAStatus = 'Alive' and FK_PPWOID = {2} {3}) ", productID, phaseID, WOID, query2);
            DataSet ds = dal.GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotalCostWithWOEmptyPWO_InPeriod(int iPeriod, int iYear, int WOID, int phaseID)
        {
            double result = 0.0;
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query2 = "";
            string query = "SELECT sum(ICShipmentItemAmtTot) FROM ICShipmentItems WHERE AAStatus = 'Alive'";
            if (fromDate.Year != 1)
                query2 += String.Format("AND ICShipmentDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query2 += string.Format("AND ICShipmentDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND  FK_ICProductIDWO = {0} and FK_PPPhaseCfgID = {1} and FK_ICShipmentID in (select ICShipmentID from ICShipments where AAStatus = 'Alive' and FK_PPWOID = {2} {3}) ", 0, phaseID, WOID, query2);
            DataSet ds = dal.GetDataSet(query);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotalCostWithWOEmptyPhase_InPeriod(int iPeriod, int iYear, int WOID, int productID)
        {
            double result = 0.0;
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query2 = "";
            string query = "SELECT ICShipmentItemAmtTot FROM ICShipmentItems WHERE AAStatus = 'Alive'";
            if (fromDate.Year != 1)
                query2 += String.Format("AND ICShipmentDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query2 += string.Format("AND ICShipmentDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND  FK_ICProductIDWO = {0} and FK_PPPhaseCfgID = {1} and FK_ICShipmentID in (select ICShipmentID from ICShipments where AAStatus = 'Alive' and FK_PPWOID = {2} {3}) ", productID, 0, WOID, query2);
            DataSet ds = dal.GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public DataSet GetShipmentItemByProductIDAndPeriodAndYear(int iICProductID, int iPeriod, int iYear)
        {
            return dal.GetDataSet("ICShipmentItems_SelectByProductID_Period_Year", iICProductID, iPeriod, iYear);

        }

        public DataSet GetShipmentItemsNewInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{1}' And '{2})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='New'))",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItems(int iBranchID, int iProductID, int iStockID)
        {
            String strQuery = String.Format(@"Select Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive' 
	                                                )",
                                                   iProductID);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{1}' And '{2})' 
	                                                )",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsNewInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID,Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{0}' And '{1})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='New')
                                                    )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID,Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{0}' And '{1})' 
                                                    )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID, FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsAdjustInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{1}' And '{2})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='Adjust'))",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsAdjustInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID, Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{0}' And '{1})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='Adjust')
                                                    )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsGiftInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{1}' And '{2})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='Gift'))",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsGiftInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID,Sum(ICShipmentItemQty) as Qty, SUM(ICShipmentItemCostTot) As CostTot
                                                From ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                AND FK_ICShipmentID IN
	                                                (Select ICShipmentID from ICShipments 
	                                                where AAStatus = 'Alive'  
	                                                AND convert(varchar(10), ICShipmentDate, 112) Between '{0}' And '{0})' 
	                                                AND FK_ICShipmentTypeID 
		                                                IN (SELECT ICShipmentTypeID FROM dbo.ICShipmentTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICShipmentTypeNo='Gift')
                                                    )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllShipmentItemsOrderByDate(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICShipmentItems.* FROM ICShipmentItems, ICShipments 
                                                        WHERE ICShipmentItems.AAStatus = 'Alive' 
                                                        AND ICShipments.AAStatus = 'Alive'
                                                        AND FK_ICShipmentID = ICShipmentID
                                                        AND Month(ICShipmentDate) = {0}
                                                        AND Year(ICShipmentDate) = {1}  
                                                        AND ICShipmentItems.FK_ICProductID = {2}
                                                        ORDER BY ICShipments.ICShipmentDate", iPeriod, iYear, iProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllShipmentItemsOrderByDateDESC(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICShipmentItems.* FROM ICShipmentItems, ICShipments 
                                                        WHERE ICShipmentItems.AAStatus = 'Alive' 
                                                        AND ICShipments.AAStatus = 'Alive' 
                                                        AND FK_ICShipmentID = ICShipmentID
                                                        AND Month(ICShipmentDate) = {0}
                                                        AND Year(ICShipmentDate) = {1}  
                                                        AND ICShipmentItems.FK_ICProductID = {2} 
                                                        ORDER BY ICShipmentDate DESC", iPeriod, iYear, iProductID);
            return dal.GetDataSet(strQuery);
        }

        public double GetCostTotalFromShipmentItem(int Period, int Year)
        {
            double result = 0;
            String query = String.Format("Select Sum(ICShipmentItemCostTot) From ICShipmentItems Where FK_ICShipmentID in (Select ICShipmentID From ICShipments Where AAStatus = 'Alive' And FK_ARCustomerID > 0 And month(ICShipmentDate) = {0} And year(ICShipmentDate) = {1})", Period, Year);

            DataSet ds = dal.GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }

            return result;
        }

        public DataSet GetAllAliveShipmentItemsInPeriod(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE FK_ICProductID = {0} AND FK_ICShipmentID IN
                                                        (SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' AND MONTH(ICShipmentDate) = {1} AND YEAR(ICShipmentDate) = {2})", iProductID, iPeriod, iYear);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllShipmentItemsForFinishGooodsAndWOAndPhase(int iICProductID, int iPPWOID, int iPPPhaseCfgID)
        {
            String strQuery = String.Format("Select * From [ICShipmentItems] Where ([FK_ICProductIDWO]={0}) AND ([FK_PPPhaseCfgID]={1}) AND ([AAStatus]= 'Alive') AND ([FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [ICShipments] WHERE [FK_PPWOID]={2} AND [AAStatus]='Alive'))", iICProductID, iPPPhaseCfgID, iPPWOID);
            return GetDataSet(strQuery);
        }

        public DataSet GetDirectRMShipmentItemsForFGsAndWOAndPhaseInPeriod(int iICProductID, int iPPWOID, int iPPPhaseCfgID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select * From [ICShipmentItems] Where ([FK_ICProductIDWO]={0}) AND ([FK_PPPhaseCfgID]={1}) AND ([AAStatus]= 'Alive') AND [FK_ICProductID] IN (Select [ICProductID] From [ICProducts] Where [ICProductTypeCombo]='Material') AND ([FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [ICShipments] WHERE [FK_PPWOID]={2} AND Month([ICShipmentDate])={3} AND Year([ICShipmentDate])={4} AND [ICShipmentTypeCombo]='ShpRM' AND [AAStatus]='Alive'))", iICProductID, iPPPhaseCfgID, iPPWOID, iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        public double GetDirectRMShipmentItemCostForFGsAndWOAndPhaseInPeriod(int iICProductID, int iPPWOID, int iPPPhaseCfgID, int iPeriod, int iYear)
        {
            double dbTotalCost = 0;
            DataSet ds = GetDirectRMShipmentItemsForFGsAndWOAndPhaseInPeriod(iICProductID, iPPWOID, iPPPhaseCfgID, iPeriod, iYear);
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ICShipmentItemsInfo objICShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                dbTotalCost += objICShipmentItemsInfo.ICShipmentItemCostTot;
            }

            return dbTotalCost;
        }

        public DataSet GetInDirectRMShipmentItemsForFGsInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select * From [ICShipmentItems] Where ([FK_ICProductIDWO]=0) AND ([AAStatus]= 'Alive') AND [FK_ICProductID] IN (Select [ICProductID] From [ICProducts] Where [ICProductTypeCombo]='Material') AND ([FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [ICShipments] WHERE Month([ICShipmentDate])={0} AND Year([ICShipmentDate])={1} AND [ICShipmentTypeCombo]='ShpRM' AND [AAStatus]='Alive'))", iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        public DataSet GetRMShipmentItems(int iPPPhaseCfgID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select * From [ICShipmentItems] Where ([FK_PPPhaseCfgID]={0}) AND ([AAStatus]= 'Alive') AND [FK_ICProductID] IN (Select [ICProductID] From [ICProducts] Where [ICProductTypeCombo]='Material' OR [ICProductTypeCombo]='FG') AND ([FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [ICShipments] WHERE Month([ICShipmentDate])={1} AND Year([ICShipmentDate])={2} AND [ICShipmentTypeCombo]='ShpRM' AND [AAStatus]='Alive'))", iPPPhaseCfgID, iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        public double GetDirectEquipmentShipmentItemCostForFGsAndWOAndPhaseInPeriod(int iICProductID, int iPPWOID, int iPPPhaseCfgID, int iPeriod, int iYear)
        {
            double dbTotalCost = 0;
            DataSet ds = GetDirectEquipmentShipmentItemsForFGsAndWOAndPhaseInPeriod(iICProductID, iPPWOID, iPPPhaseCfgID, iPeriod, iYear);
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ICShipmentItemsInfo objICShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                dbTotalCost += objICShipmentItemsInfo.ICShipmentItemCostTot;
            }

            return dbTotalCost;
        }

        public DataSet GetDirectEquipmentShipmentItemsForFGsAndWOAndPhaseInPeriod(int iICProductID, int iPPWOID, int iPPPhaseCfgID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select * From [ICShipmentItems] Where ([FK_ICProductIDWO]={0}) AND ([FK_PPPhaseCfgID]={1}) AND ([AAStatus]= 'Alive') AND [FK_ICProductID] IN (Select [ICProductID] From [ICProducts] Where [ICProductTypeCombo]='Equipment') AND ([FK_ICShipmentID] IN (SELECT [ICShipmentID] FROM [ICShipments] WHERE [FK_PPWOID]={2} AND Month([ICShipmentDate])={3} AND Year([ICShipmentDate])={4} AND [ICShipmentTypeCombo]='ShpRM' AND [AAStatus]='Alive'))", iICProductID, iPPPhaseCfgID, iPPWOID, iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        public double GetInDirectRMShipmentItemCostForFGsInPeriod(int iPeriod, int iYear)
        {
            double dbTotalCost = 0;
            DataSet ds = GetInDirectRMShipmentItemsForFGsInPeriod(iPeriod, iYear);
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ICShipmentItemsInfo objICShipmentItemsInfo = (ICShipmentItemsInfo)GetObjectFromDataRow(row);
                dbTotalCost += objICShipmentItemsInfo.ICShipmentItemCostTot;
            }

            return dbTotalCost;
        }

        public void UpdateValuationToShipmentItems(int iProductId, int iPeriod, int iYear, double dUnitCost)
        {
            String strQuery = String.Format(culture, @"UPDATE ICShipmentItems SET ICShipmentItemUnitCost = {0}, ICShipmentItemCostTot = {0} * ICShipmentItemQty
                                                                    WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                                                    AND FK_ICShipmentID IN 
                                                                        (SELECT ICShipmentID FROM ICSHipments WHERE AASTatus = 'Alive'
                                                                                            AND Month(ICShipmentDate) = {2} AND Year(ICShipmentDate) = {3})",
                                                                  dUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture), iProductId, iPeriod, iYear);

            dal.GetDataSet(strQuery);
        }

        public double GetTotalAmtByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemCostTot) FROM dbo.ICShipmentItems 
                                                INNER JOIN dbo.ICShipments ON dbo.ICShipmentItems.FK_ICShipmentID = dbo.ICShipments.ICShipmentID
                                                       WHERE dbo.ICShipmentItems.AAStatus='Alive' AND dbo.ICShipments.AAStatus='Alive' 
                                                        AND FK_HREmployeeID={0} AND MONTH(ICShipmentDate)={1} AND YEAR(ICShipmentDate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            DataSet dsARQuots = dal.GetDataSet(strQuery);
            if (dsARQuots != null && dsARQuots.Tables.Count > 0 && dsARQuots.Tables[0].Rows.Count > 0 && dsARQuots.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(dsARQuots.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        public DataSet GetAllDataByARSellerIDInPeriodYear(int iHREmployeeID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.ICShipmentItems 
                                                INNER JOIN dbo.ICShipments ON dbo.ICShipmentItems.FK_ICShipmentID = dbo.ICShipments.ICShipmentID
                                                       WHERE dbo.ICShipmentItems.AAStatus='Alive' AND dbo.ICShipments.AAStatus='Alive' 
                                                        AND FK_HREmployeeID={0} AND MONTH(ICShipmentDate)={1} AND YEAR(ICShipmentDate)={2}"
                                                        , iHREmployeeID, iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }

        public double GetTotalCostByCampaignInRange(int iCampaignID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = string.Format(@"Select SUM(ICShipmentItemCostTot) from ICShipmentItems where AAStatus='Alive' AND FK_ARCampaignID = {0} 
                                                        AND FK_ICShipmentID IN 
                                                        (SELECT ICSHipmentID FROM ICShipments 
                                                        WHERE
                                                        CONVERT(VARCHAR(10), [ICShipmentDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) 
                                                        AND CONVERT(VARCHAR(10), [ICShipmentDate], 112) >= CONVERT(VARCHAR(10), '{2}', 112)) ", iCampaignID, dtTo.ToString("yyyyMMdd"), dtFrom.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public DataSet GetAllShipmentItemsByCompaignInRange(int iCampaignID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT * 
                                                FROM ICShipmentItems 
                                                WHERE AAStatus = 'Alive' 
                                                    AND FK_ARCampaignID = {0} 
                                                    AND FK_ICShipmentID IN (SELECT ICShipmentID FROM ICShipments WHERE AAStatus='Alive' 
                                                    AND ICShipmentDate BETWEEN '{1}' AND '{2}')", iCampaignID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            return dal.GetDataSet(strQuery);
        }

        public double GetSumCostByMonthAndCompaignInRange(int iCampaignID, int iMonth, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemCostTot)
                                                FROM ICShipmentItems INNER JOIN ICShipments ON FK_ICShipmentID = ICShipmentID 
                                                WHERE 
                                                ICShipmentItems.AAStatus = 'Alive' 
                                                AND ICShipments.AAStatus = 'Alive' 
                                                AND FK_ARCampaignID = {0} 
                                                AND Month(ICShipmentDate) = {1}
                                                AND Year(ICShipmentDate) = {2}", iCampaignID, iMonth, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public void UpdateValuationToShipmentItems(int iStockID, int iProductId, int iPeriod, int iYear, double dUnitCost)
        {
            String strQuery = String.Format(culture, @"UPDATE ICShipmentItems SET ICShipmentItemUnitCost = {0}, ICShipmentItemCostTot = ROUND({0} * ICShipmentItemQty, 0)
                                                                    WHERE AAStatus = 'Alive' AND FK_ICProductID = {1} 
                                                                    AND 
                                                                    (FK_ICShipmentID IN 
                                                                        (SELECT ICShipmentID FROM ICSHipments WHERE AASTatus = 'Alive'
                                                                                            AND Month(ICShipmentDate) = {2} AND Year(ICShipmentDate) = {3})
                                                                    OR FK_PPProductionOrdrID IN 
                                                                        (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AASTatus = 'Alive' -- AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                                                                            AND Month(PPProductionOrdrDate) = {2} AND Year(PPProductionOrdrDate) = {3})
                                                                    )
                                                                   ",
                                                                  dUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture), iProductId, iPeriod, iYear);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICStockID = {0}", iStockID);

            dal.GetDataSet(strQuery);
        }

        public double GetSUMCostTotShipmentItems(int iStockID, int iProductId, int iPeriod, int iYear)
        {
            String strQuery = String.Format(culture, @" SELECT SUM(ICShipmentItemCostTot)
                                                        FROM ICShipmentItems
                                                        WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} 
                                                        AND 
                                                        (
                                                            FK_ICShipmentID IN 
                                                                (SELECT ICShipmentID FROM ICSHipments WHERE AASTatus = 'Alive'
                                                                                    AND Month(ICShipmentDate) = {1} AND Year(ICShipmentDate) = {2})
                                                            OR FK_PPProductionOrdrID IN 
                                                                (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AASTatus = 'Alive'
                                                                                    AND Month(PPProductionOrdrDate) = {1} AND Year(PPProductionOrdrDate) = {2})
                                                        )
                                                                   ", iProductId, iPeriod, iYear);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICStockID = {0}", iStockID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public void UpdateValuationToShipmentItems(int iPhaseCfgID, int iStockID, int iProductID, DateTime dtFrom, DateTime dtTo, double dUnitCost)
        {
            String strTimeCond = DALUtil.GenerateBeetween("PPProductionOrdrDate", dtFrom, dtTo);

            String strQuery = String.Format(culture, @"UPDATE ICShipmentItems SET ICShipmentItemUnitCost = {0}, ICShipmentItemCostTot = {0} * ICShipmentItemQty
                                                                    WHERE AAStatus = 'Alive' 
                                                                    AND FK_ICProductID = {1}
                                                                    AND FK_PPProductionOrdrID IN 
                                                                        (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AASsatus = 'Alive'
                                                                                    AND FK_PPPhaseCfgID = {2}
                                                                                            AND {3})",
                                                                  dUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture), iProductID, iPhaseCfgID, strTimeCond);

            if (iStockID > 0)
                strQuery += String.Format(@" AND FK_ICStockID = {0}", iStockID);

            dal.GetDataSet(strQuery);
        }

        public double GetUnitCostByInvoiceItem(int InvoiceItemID)
        {
            string strQuery = String.Format(@"SELECT     dbo.ICShipmentItems.ICShipmentItemUnitCost 
                                                        FROM         dbo.ICShipmentItems INNER JOIN  dbo.ARInvoiceItemShipmentItems 
                                                        ON dbo.ICShipmentItems.ICShipmentItemID = dbo.ARInvoiceItemShipmentItems.FK_ICShipmentItemID 
                                                        INNER JOIN dbo.ARInvoiceItems 
                                                        ON dbo.ARInvoiceItems.ARInvoiceItemID = dbo.ARInvoiceItemShipmentItems.FK_ARInvoiceItemID
                                                        WHERE ARInvoiceItemShipmentItems.FK_ARInvoiceItemID={0}", InvoiceItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetShipmentItemsByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select * from ICShipmentItems where AAStatus='Alive' 
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo ='{0}')
                                                AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo='{1}')
                                                AND FK_ICShipmentID in (Select ICShipmentID from ICShipments where AAStatus='Alive' and {2})
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllShipmentItemForProductInPeriod(int iProductID, int iStockID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems
                                                    WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_ICStockID = {1}
                                                    AND FK_ICShipmentID IN (SELECT ICShipmentID FROM ICShipments 
                                                                            WHERE AAStatus ='ALive'
                                                                            AND Month(ICShipmentDate) = {2}
                                                                            AND YEAR(ICShipmentDate) = {3})", iProductID, iStockID, iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public double GetSumShipmentItemQtyForProductInPeriod(int iProductID, int iStockID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems
                                                    WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_ICStockID = {1}
                                                    AND FK_ICShipmentID IN (SELECT ICShipmentID FROM ICShipments 
                                                                            WHERE AAStatus ='ALive'
                                                                            AND Month(ICShipmentDate) = {2}
                                                                            AND YEAR(ICShipmentDate) = {3})", iProductID, iStockID, iPeriod, iYear);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public double GetTotalQtyByStandardModelStockAndProductType(int ICProductStandardID, int ICProductModelID, int ICStockID, int ICProductTypeID, int PPProductPlnID)
        {
            string strQuery = string.Format(@"select sum(ICShipmentItemQty) from ICShipmentItems
                                                inner join ICProducts on ICProducts.ICProductID=ICShipmentItems.FK_ICProductID
                                                inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                inner join PPWOs on PPWOs.PPWOID = ICShipments.FK_PPWOID
                                                where ICShipmentItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive' 
                                                AND ICShipments.AAStatus='Alive' AND PPWOs.AAStatus='Alive' 
                                                AND (FK_ICProductStandardID={0} or {0}=0) AND (FK_ICProductModelID={1} or {1}=0)
                                                AND (ICShipmentItems.FK_ICStockID={2} or {2}=0)
                                                AND (ICProducts.FK_ICProductTypeID={3} or {3}=0)
                                                AND PPWOs.FK_PPProductPlnID={4}", ICProductStandardID, ICProductModelID, ICStockID, ICProductTypeID, PPProductPlnID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllProductStockByPhase(int iPhaseCfgID, DateTime dtFrom, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GenerateBeetween("PPProductionOrdrDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT DISTINCT  FK_ICProductID, FK_ICStockID FROM ICShipmentItems
                                                    WHERE AAStatus = 'Alive' 
                                                    AND FK_PPProductionOrdrID IN 
                                                            (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive'
                                                                        AND FK_PPPhaseCfgID = {0}  
                                                                        AND {1})
                                                    ", iPhaseCfgID, strTimeCond);

            return GetDataSet(strQuery);
        }
        public DataSet GetAllObjectByProductionInRange(DateTime dtFromDate, DateTime dtToDate, string strProductTypeNo)
        {

            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dtFromDate, dtToDate);
            string strQuery = String.Format(@"Select ICShipmentItems.* from ICShipmentItems inner join PPProductionOrdrs
                                                            on ICShipmentItems.FK_PPProductionOrdrID=PPProductionOrdrs.PPProductionOrdrID
                                                        where ICShipmentItems.AAStatus='Alive' AND PPProductionOrdrs.AAStatus='Alive'
                                                        AND {0}
                                            AND FK_ICProductID in (select ICProductID from ICProducts where AAStatus='Alive'
                                                AND FK_ICProductGroupID in (select ICProductGroupID from ICProductGroups where ICProductGroupNo='{1}')) 
                                                order by PPProductionOrdrDate", strDate, strProductTypeNo);
            return dal.GetDataSet(strQuery);
        }
        public ICShipmentItemsInfo GetFirstShipmentItemByProductNoAndLotNo(string strLotNo)
        {
            string strQuery = string.Format(@"Select * from ICShipmentItems where AAStatus='Alive' AND ICShipmentItemLotNo='{0}'
                                                            AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')"
                                                       , strLotNo);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICShipmentItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        #region GetAllDataViewInventoryStatistic --Vinh --11/12/2012 --Lấy tất cả danh sách ShipmentItem dựa vào Kho, Sản phẩm, Nhóm sản phẩm, Brand và Từ ngày đến ngày.

        public DataSet GetAllDataViewInventoryStatistic(int iStockID, int iProductID, int iProductGroupID, int iProductTypeID, int iBrandID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICShipmentItems 
                                            WHERE AAStatus='Alive'
                                            AND (FK_ICStockID={0} OR 0={0})
                                            AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True' AND (ICProductID = {1} OR 0={1}) AND (FK_ICBrandID={2} OR 0={2}) AND (FK_ICProductGroupID = {3} OR 0={3}) AND (FK_ICProductTypeID = {6} OR 0={6}))
                                            AND (
                                                    FK_ICShipmentID IN (SELECT ICShipmentID FROM dbo.ICShipments WHERE AAStatus='Alive' AND CONVERT(VARCHAR(20), ICShipmentDate, 112) >= CONVERT(VARCHAR(20),'{4}', 112) AND CONVERT(VARCHAR(20), ICShipmentDate, 112) <= CONVERT(VARCHAR(20),'{5}', 112) ) 
                                                    OR 
                                                    FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs WHERE AAStatus='Alive' AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) >= CONVERT(VARCHAR(20),'{4}', 112) AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) <= CONVERT(VARCHAR(20),'{5}', 112))
                                                )", iStockID, iProductID, iBrandID, iProductGroupID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"), iProductTypeID);

            return dal.GetDataSet(str);
        }

        #endregion

        /// <summary>
        /// Viet Nguyen 2013.01.26
        /// Get SUM Qty By Product And SO
        /// </summary>
        public double GetSumQtyByProductAndSO(int iProductID, int iARSOID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus='Alive' AND FK_ICProductID = {0} AND FK_ARSOID = {1}
                                                            AND FK_ICShipmentID IN (SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive' 
                                                                            )"
                                                , iProductID, iARSOID);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2013.01.26
        /// Get SUM Qty By Product And EstSOID
        /// </summary>
        public double GetSumQtyByProductAndEstSOItemID(int iProductID, int iAREstSOItemID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus='Alive' AND FK_ICProductID = {0} 
                                                            AND FK_ICShipmentID IN (SELECT ICShipmentID FROM ICShipments WHERE AAStatus = 'Alive')
                                                            AND FK_ARSOID in (select FK_ARSOID from ARSOItems where AAStatus='Alive' AND FK_AREstSOItemID={1})"
                                                , iProductID, iAREstSOItemID);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public DataSet GetAllDataByWOAndProduct(int iWO, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} ", ProductID, iWO);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByWOAndProductAndStock(int iWO, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} AND FK_ICStockID={2}", ProductID, iWO, StockID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') 
                                            AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1}) ", ProductID, ProductPlanID);

            return GetDataSet(strQuery);
        }
        public double GetShpQtyByProductAndProductPlnID(int iProductID, int iProductPlnID)
        {
            string strQuery = string.Format(@"SELECT SUM(ICShipmentItemQty) FROM dbo.ICShipmentItems 
                                                    WHERE AAStatus='Alive' AND FK_ICProductID={0}
                                                    AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive')
                                                    AND FK_PPWOID IN (SELECT PPWOID FROM dbo.PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID={1})"
                                                    , iProductID, iProductPlnID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID, int iSOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={2}) ", ProductID, ProductPlanID, iSOID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlnAndProductAndStock(int iProductPln, int ProductID, int StockID, int iSOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={3}) AND FK_ICStockID={2}", ProductID, iProductPln, StockID, iSOID);

            return GetDataSet(strQuery);
        }

        public double GetSUMQtyByWOAndProductAndStock(int iWO, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICShipmentItemQty) FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} AND FK_ICStockID={2}", ProductID, iWO, StockID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {
                    return 0;
                }
            }
            return 0;
        }

        public DataSet GetAllDataByProductPlnAndProductAndStockAndSO(int iProductPln, int ProductID, int StockID, int SOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICShipmentItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={3}) AND FK_ICStockID={2}", ProductID, iProductPln, StockID, SOID);

            return GetDataSet(strQuery);
        }

        public DataSet GetShipmentItemsByProductNoAndStockNo(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select * from ICShipmentItems where AAStatus='Alive' 
                                                AND (FK_ICProductID={0} or {0}=0)
                                                AND (FK_ICStockID={1} or {1}=0)
                                                AND FK_ICShipmentID in (Select ICShipmentID from ICShipments where AAStatus='Alive' and {2})
                                                        ", iProductID, iStockID, strDate);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.07.01
        /// Lấy NVL đã xuất cho lsx tổng có trạng thái Reserved=True, k lấy NVL của kế hoạch: iPPExceptProductPlnID
        /// strFieldProduct: Sẽ tính theo field của sản phẩm nào trong KHSX chi tiết
        /// </summary>
        public double GetMaterialByProductPlnAndReservedMaterialExceptProductPln(int iProductID, int iPPProductPlnID, int iPPExceptProductPlnID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductionOrdrs.PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"select SUM(ICShipmentItemQty)  from 
                                              ICShipmentItems
                                                where    AAStatus='Alive' AND FK_ICProductID={0} 
                                                        AND ICShipmentItems.FK_PPWOID in 
                                                                    (Select PPWOID from PPWOs where AAStatus='Alive' AND (FK_PPProductPlnID={1} or {1}=0) AND FK_PPProductPlnID<>{2}
                                                                           AND FK_PPProductPlnID in 
                                                                           (
                                                                                Select PPProductPlnID from PPProductPlns where AAStatus='Alive' AND PPProductPlnStatusCombo!='Complete' -- AND PPProductPlnIsReservedMaterial=1
                                                                           )
                                                                    )
                                                            AND  FK_PPProductionOrdrID in (select PPProductionOrdrID from PPProductionOrdrs where AAStatus='Alive' AND {3})
                                                             AND FK_PPPhaseCfgID in (select FK_PPPhaseCfgID from PPRoutingOperationMaterialStocks where AAStatus='Alive' AND FK_ICFromStockID=ICShipmentItems.FK_ICStockID)"
                                        , iProductID, iPPProductPlnID, iPPExceptProductPlnID, strQueryDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2013.07.01
        /// Lấy NVL đã xuất cho lsx tổng có trạng thái Reserved=True, k lấy NVL của kế hoạch: iPPExceptProductPlnID
        /// strFieldProduct: Sẽ tính theo field của sản phẩm nào trong KHSX chi tiết
        /// </summary>
        public DataSet GetAllDataByProductPlnAndReservedMaterialExceptProductPln(int iProductID, int iPPProductPlnID, int iPPExceptProductPlnID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductionOrdrs.PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"select *  from 
                                              ICShipmentItems
                                                where    AAStatus='Alive' AND FK_ICProductID={0} 
                                                        AND ICShipmentItems.FK_PPWOID in 
                                                                    (Select PPWOID from PPWOs where AAStatus='Alive' AND (FK_PPProductPlnID={1} or {1}=0) AND FK_PPProductPlnID<>{2}
                                                                           AND FK_PPProductPlnID in 
                                                                           (
                                                                                Select PPProductPlnID from PPProductPlns where AAStatus='Alive' AND PPProductPlnIsReservedMaterial=1 AND PPProductPlnStatusCombo!='Complete'
                                                                            )
                                                                    )
                                                            AND  FK_PPProductionOrdrID in (select PPProductionOrdrID from PPProductionOrdrs where AAStatus='Alive' AND {3}
										                                                     AND FK_PPPhaseCfgID 
											                                                   in (select FK_PPPhaseCfgID from PPRoutingOperationMaterialStocks where AAStatus='Alive' AND FK_ICFromStockID=ICShipmentItems.FK_ICStockID)
									                                                      )"
                                                    , iProductID, iPPProductPlnID, iPPExceptProductPlnID, strQueryDate);
            return dal.GetDataSet(strQuery);
        }

        #region Lấy tất cả các ShipmentItem thuộc PPProductionOrdr có tháng năm truyền vào --Vinh --02/07/2013

        public DataSet GetShipmentItemProductionOrdrByYearANDPeriod(int iYear, int iPeriod)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICShipmentItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_PPProductionOrdrID IN (
								                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                            WHERE AAStatus = 'Alive'
                                                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
								                                            AND YEAR(PPProductionOrdrDate) = {0}
								                                            AND MONTH(PPProductionOrdrDate) = {1}
							                                            )", iYear, iPeriod);
            return dal.GetDataSet(str);
        }

        public DataSet GetShipmentItemsByProductionOrdrID(int iICProductionOrdrID)
        {
            String strQuery = String.Format(@"   SELECT * FROM dbo.ICShipmentItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_PPProductionOrdrID ={0}", iICProductionOrdrID);
            return dal.GetDataSet(strQuery);
        }

        #endregion


        public ICShipmentItemsInfo GetShipmentItemByShipmentIDAndProductID(int iShipmentID, int iProductID)
        {
            String strQuery = String.Format(@"  SELECT * FROM dbo.ICShipmentItems
                                            WHERE AAStatus = 'Alive' AND FK_ICShipmentID={0} AND FK_ICProductID={1}", iShipmentID, iProductID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICShipmentItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        #region Lấy tất cả các ShpItem mà không nằm trong phiếu chuyển mã --Vinh --11/12/2012

        public DataSet LayTatCaShpItemMaKhongNamTrongPhieuChuyenMa(int iStockID, int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICShipmentItems 
                                            WHERE AAStatus='Alive'
                                            AND (FK_ICStockID={0} OR 0={0})
                                            AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True' AND (ICProductID = {1} OR 0={1}))
                                            AND (
                                                    FK_ICShipmentID IN (
                                                                            SELECT ICShipmentID FROM dbo.ICShipments 
                                                                            WHERE AAStatus='Alive' 
                                                                            AND CONVERT(VARCHAR(20), ICShipmentDate, 112) >= CONVERT(VARCHAR(20),'{2}', 112) 
                                                                            AND CONVERT(VARCHAR(20), ICShipmentDate, 112) <= CONVERT(VARCHAR(20),'{3}', 112) 
                                                                        ) 
                                                    OR 
                                                    FK_PPProductionOrdrID IN (
                                                                                SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs 
                                                                                WHERE AAStatus='Alive' 
                                                                                --AND PPProductionOrdrTypeCombo <> 'ConvertProduct' 
                                                                                AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) >= CONVERT(VARCHAR(20),'{2}', 112) 
                                                                                AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) <= CONVERT(VARCHAR(20),'{3}', 112)
                                                                            )
                                                )", iStockID, iProductID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }
        #endregion

        /// <summary>
        /// Viet Nguyen 2013.09.27
        /// Lấy tổng số lượng theo sản phẩm-Thành phẩm theo công đoạn
        /// </summary>
        public DataSet GetAllShpItemInProductionOrdrSUMByProductParentProductAndPhaseCfg(int iPPPhaseCfgID, int iProductID, int iProductParentID, DateTime dteFrom, DateTime dteTo)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFrom, dteTo);
            string strQuery = string.Format(@"SELECT FK_ICProductID,FK_ICProductIDWO,FK_PPPhaseCfgID,SUM(ICShipmentItemQty) AS ICShipmentItemQty
                                ,SUM(ICShipmentItemCostTot) AS ICShipmentItemCostTot
                                ,SUM(ICShipmentItemCostTot)/SUM(ICShipmentItemQty) AS ICShipmentItemUnitCost
                                 FROM	dbo.ICShipmentItems
                                 WHERE AAStatus='Alive' AND (FK_PPPhaseCfgID={0} or {0}=0)
                                 AND (FK_ICProductID={2} or {2}=0)
                                AND (FK_ICProductIDWO={3} or {3}=0)
                                 AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs WHERE AAStatus='Alive' AND {1})
                                GROUP BY FK_ICProductID,FK_ICProductIDWO,FK_PPPhaseCfgID
                                Having SUM(ICShipmentItemQty)>0", iPPPhaseCfgID, strQueryDate, iProductID, iProductParentID);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.09.27
        /// Lấy danh sách xuất kho trong nhập xuất quy trình theo sản phẩm, thàhn phẩm, công đoạn.
        /// </summary>
        public DataSet GetAllShpItemInProductionOrdrByProductParentProductAndPhaseCfg(int iPPPhaseCfgID, int iProductID, int iProductParentID, DateTime dteFrom, DateTime dteTo)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFrom, dteTo);
            string strQuery = string.Format(@"SELECT *
                                 FROM	dbo.ICShipmentItems
                                 WHERE AAStatus='Alive' AND (FK_PPPhaseCfgID={0} or {0}=0)
                                 AND (FK_ICProductID={2} or {2}=0)
                                AND (FK_ICProductIDWO={3} or {3}=0)
                                 AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs WHERE AAStatus='Alive' AND {1})
                                ", iPPPhaseCfgID, strQueryDate, iProductID, iProductParentID);
            return dal.GetDataSet(strQuery);
        }

        #region Lấy CBM của xuất kho trong phiếu NXQT --Vinh

        public double LayCBMCuaXuatNVLTrongNXQT(int iICStockID, int iICProductID, int iYear, int iMonth)
        {
            double dbCBM = 0;

            String str = String.Format(@"   SELECT SUM(ICShipmentItemVolume) FROM dbo.ICShipmentItems
                                            WHERE AAStatus = 'Alive'
                                            AND (FK_ICStockID = {0} OR {0} = 0)
                                            AND (FK_ICProductID = {1} OR {1} = 0)
                                            AND FK_PPProductionOrdrID IN (
								                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                            WHERE AAStatus = 'Alive'
								                                            AND YEAR(PPProductionOrdrDate) = {2}
								                                            AND MONTH(PPProductionOrdrDate) = {3}
							                                              )"
                                        , iICStockID, iICProductID, iYear, iMonth);

            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dbCBM = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return dbCBM;
        }

        #endregion
        public double GetShpmtItmCostPrice(int piInvItmID)
        {
            String strQuerry = String.Format(@"
SELECT  ICShipmentItemUnitCost
FROM    dbo.ICShipmentItems a
        INNER JOIN dbo.ARInvoiceItemShipmentItems b ON a.ICShipmentItemID = b.FK_ICShipmentItemID
WHERE   a.AAStatus = 'Alive'
        AND b.AAStatus = 'Alive'
        AND b.FK_ARInvoiceItemID = {0}", piInvItmID);

            DataSet ds = dal.GetDataSet(strQuerry);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        #region Lấy tất cả chi tiết NVL theo SP bộ và kho và thời gian --Vinh

        public DataSet GetAllDataByReceiptItemProductANDStockANDDate(int iICStockID, int iICReceiptItemProductID, int iYear, int iPeriod)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICShipmentItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICProductIDWO = {1}
                                            AND FK_PPProductionOrdrID IN (
								                                            SELECT FK_PPProductionOrdrID FROM dbo.ICReceiptItems
								                                            WHERE AAStatus = 'Alive'
								                                            AND FK_ICStockID = {0}
								                                            AND FK_ICProductID = {1}
								                                            AND FK_PPProductionOrdrID IN (
																                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
																                                            WHERE AAStatus = 'Alive'
                                                                                                            --AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
																                                            AND YEAR(PPProductionOrdrDate) = {2}
																                                            AND MONTH(PPProductionOrdrDate) = {3}
															                                             )
								                                            )
                                            ", iICStockID, iICReceiptItemProductID, iYear, iPeriod);
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetAllShipmentItemBySupplier(int iSupplierID)
        {
            string strQuery = String.Format(@"SELECT * FROM dbo.ICShipmentItems WHERE ICShipmentItemID IN (
SELECT dbo.ICShipmentItemROItems.FK_ICShipmentItemID FROM dbo.ICShipmentItemROItems WHERE FK_ICROItemID IN
(SELECT dbo.ICROItems.ICROItemID FROM  dbo.ICROItems WHERE FK_ICROID IN (
SELECT ICROID FROM dbo.ICROs WHERE FK_APPOID IN (SELECT dbo.APPOs.APPOID FROM dbo.APPOs WHERE dbo.APPOs.FK_APSupplierID={0} AND AAStatus='Alive')) AND dbo.ICROItems.AAStatus='Alive') AND dbo.ICShipmentItemROItems.AAStatus='Alive')
AND dbo.ICShipmentItems.AAStatus='Alive'
                ", iSupplierID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllShipmentItemBySupplierAndProduct(int iSupplierID, int iICProductID)
        {
            string strQuery = String.Format(@"SELECT * FROM dbo.ICShipmentItems WHERE ICShipmentItemID IN (
SELECT dbo.ICShipmentItemROItems.FK_ICShipmentItemID FROM dbo.ICShipmentItemROItems WHERE FK_ICROItemID IN
(SELECT dbo.ICROItems.ICROItemID FROM  dbo.ICROItems WHERE FK_ICROID IN (
SELECT ICROID FROM dbo.ICROs WHERE FK_APPOID IN (SELECT dbo.APPOs.APPOID FROM dbo.APPOs WHERE dbo.APPOs.FK_APSupplierID={0} AND AAStatus='Alive')) AND dbo.ICROItems.AAStatus='Alive') AND dbo.ICShipmentItemROItems.AAStatus='Alive')
AND dbo.ICShipmentItems.AAStatus='Alive' AND dbo.ICShipmentItems.FK_ICProductID={1}
                ", iSupplierID, iICProductID);
            return dal.GetDataSet(strQuery);
        }
        #region Giá Thành Mới --Vinh
        public void UpdateCostTotShipmentItems(int iICProductID, int iPeriod, int iYear, double dbUnitCost)
        {
            String strQuery = String.Format(culture, @"UPDATE  ICShipmentItems
                                                        SET     ICShipmentItemUnitCost = {0} ,
                                                                ICShipmentItemCostTot = ROUND({0} * ICShipmentItemQty, 0)
                                                        WHERE   AAStatus = 'Alive'
                                                                AND FK_PPCostCenterID NOT IN (
                                                                                                SELECT FK_PPCostCenterID FROM dbo.PPProductionCostCenterActives
                                                                                                WHERE PPPeriod = {2}
                                                                                                AND PPYear = {3}
                                                                                              )
                                                                AND FK_ICProductID = {1}
                                                                AND 
		                                                        (
			                                                        FK_ICShipmentID IN ( SELECT ICShipmentID
                                                                                         FROM   dbo.ICShipments
                                                                                         WHERE  AAStatus = 'Alive'
                                                                                                AND MONTH(ICShipmentDate) = {2}
                                                                                                AND YEAR(ICShipmentDate) = {3} )
			                                                        OR
			                                                        FK_PPProductionOrdrID IN (	SELECT PPProductionOrdrID
										                                                        FROM dbo.PPProductionOrdrs
										                                                        WHERE AAStatus = 'Alive'
										                                                        AND MONTH(PPProductionOrdrDate) = {2}
										                                                        AND YEAR(PPProductionOrdrDate) = {3})
		                                                        )",
                                                                  dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture), iICProductID, iPeriod, iYear);

            dal.GetDataSet(strQuery);
        }
        public void UpdateCostTotShipmentItemsLan2(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost, bool isGiaVonXuat = false)
        {
            String strQuery = String.Format(culture, @"
            UPDATE  ICShipmentItems
            SET     ICShipmentItemUnitCost = {0} ,
                    ICShipmentItemCostTot = ROUND({0} * ICShipmentItemStkQty, 0),
                    ICShipmentItemFUnitCost = {3} ,
                    ICShipmentItemFCostTot = {3} * ICShipmentItemStkQty
            WHERE   AAStatus = 'Alive'
                    AND ICShipmentItemIsIdentifyCost = 0        
                    AND FK_ICProductID = {1}
                    AND FK_ICShipmentID IN (    SELECT ICShipmentID
                                                FROM   dbo.ICShipments
                                                WHERE  AAStatus = 'Alive'
                                                       AND  YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {2} )
                    AND FK_ICShipmentID NOT IN (
                    SELECT  ICShipmentID
                    FROM    dbo.ICShipments
                    WHERE   AAStatus = 'Alive'
                            AND AAModule IN ( 'PurchaseReceiptShipment',
                                              'PurchaseReturnShipment',
                                              'DecInvFromPO',
                                              'DecInvFromTransferOS')
                            AND YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {2} )

            UPDATE ICShipments
                SET ICShipmentCostTot = ICShipmentItemCostTot
                FROM ICShipments a
                    INNER JOIN (SELECT FK_ICShipmentID, SUM(ICShipmentItemCostTot) ICShipmentItemCostTot
			                    FROM ICShipmentItems 
			                    WHERE AAStatus = 'Alive'
			                    GROUP BY FK_ICShipmentID) b ON b.FK_ICShipmentID = a.ICShipmentID
                        AND a.AAStatus = 'Alive'
                        AND YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {2}"
                , dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                , iICProductID
                , iPeriod + iYear * 12
                , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }
        public ICShipmentItemsInfo GetFirstDataUpdateCostTotShipmentItemsLan2(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(culture, @"
            SELECT * FROM  ICShipmentItems
            WHERE   AAStatus = 'Alive'
                    AND FK_ICProductID = {0}
                    AND FK_ICShipmentID IN (    SELECT ICShipmentID
                                                FROM   dbo.ICShipments
                                                WHERE  AAStatus = 'Alive'
                                                       AND  YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {1} )
                    AND FK_ICShipmentID NOT IN (
                    SELECT  ICShipmentID
                    FROM    dbo.ICShipments
                    WHERE   AAStatus = 'Alive'
                            AND AAModule IN ( 'PurchaseReceiptShipment',
                                              'PurchaseReturnShipment',
                                              'DecInvFromPO')
                            AND YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {1} )

            "
                , iICProductID, iPeriod + iYear * 12);

           DataSet ds = dal.GetDataSet(strQuery);
           if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
               return (ICShipmentItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
           return null;
        }
        #endregion

        public void UpdateCostTotShipmentItemProductionOrdersLan1(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost)
        {
            String strQuery = String.Format(culture, @"
            --Xuat chuyen ma / Xuat NVL
            UPDATE  ICShipmentItems
            SET     ICShipmentItemUnitCost = {0} ,
                    ICShipmentItemCostTot = ROUND({0} * ICShipmentItemStkQty, 0),
                    ICShipmentItemFUnitCost = {3} ,
                    ICShipmentItemFCostTot = {3} * ICShipmentItemStkQty
            WHERE   AAStatus = 'Alive'
                    AND FK_ICProductID = {1}
                    AND FK_PPProductionOrdrID IN (	SELECT PPProductionOrdrID
										            FROM dbo.PPProductionOrdrs
										            WHERE AAStatus = 'Alive'
										            AND YEAR(PPProductionOrdrDate) * 12 + MONTH(PPProductionOrdrDate) = {2}
                                                    AND PPProductionOrdrs.PPProductionOrdrTypeCombo = 'ConvertProduct')

            --Cap nhat gia nhap cho thanh pham cua no
            UPDATE  ICReceiptItems
            SET     ICReceiptItemUnitCost = CASE WHEN ICReceiptItemStkQty > 0 THEN c.ICShipmentItemCostTot/ICReceiptItemStkQty ELSE 0 END,
                    ICReceiptItemCostTot = c.ICShipmentItemCostTot,
                    ICReceiptItemFCostTot = c.ICShipmentItemFCostTot
                FROM ICReceiptItems a
                    INNER JOIN PPProductionOrdrs b ON a.FK_PPProductionOrdrID = b.PPProductionOrdrID
                        AND a.AAStatus = 'Alive'AND b.AAStatus = 'Alive'
                        AND YEAR(PPProductionOrdrDate) * 12 + MONTH(PPProductionOrdrDate) = {2}
                    INNER JOIN (SELECT FK_PPProductionOrdrID, SUM(ICShipmentItemCostTot) as ICShipmentItemCostTot, SUM(ICShipmentItemFCostTot) as ICShipmentItemFCostTot
                                FROM ICShipmentItems 
                                WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                GROUP BY FK_PPProductionOrdrID
                                ) c ON c.FK_PPProductionOrdrID = b.PPProductionOrdrID
                    AND b.PPProductionOrdrTypeCombo = 'ConvertProduct'
            "
                , dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                , iICProductID
                , iPeriod + iYear * 12
                , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }

        public void UpdateCostTotShipmentItemProductionOrdersLan2(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost)
        {
            String strQuery = String.Format(culture, @"
            --Xuat chuyen ma / Xuat NVL
            UPDATE  ICShipmentItems
            SET     ICShipmentItemUnitCost = {0} ,
                    ICShipmentItemCostTot = ROUND({0} * ICShipmentItemStkQty, 0),
                    ICShipmentItemFUnitCost = {3} ,
                    ICShipmentItemFCostTot = {3} * ICShipmentItemStkQty
            WHERE   AAStatus = 'Alive'
                    AND FK_ICProductID = {1}
                    AND FK_PPProductionOrdrID IN (	SELECT PPProductionOrdrID
										            FROM dbo.PPProductionOrdrs
										            WHERE AAStatus = 'Alive'
										            AND YEAR(PPProductionOrdrDate) * 12 + MONTH(PPProductionOrdrDate) = {2}
                                                    AND PPProductionOrdrTypeCombo != 'ConvertProduct')

            --Cap nhat gia nhap cho thanh pham cua no
            UPDATE  ICReceiptItems
            SET     ICReceiptItemUnitCost = CASE WHEN ICReceiptItemStkQty > 0 THEN c.ICShipmentItemCostTot/ICReceiptItemStkQty ELSE 0 END,
                    ICReceiptItemCostTot = c.ICShipmentItemCostTot,
                    ICReceiptItemFCostTot = c.ICShipmentItemFCostTot
                FROM ICReceiptItems a
                    INNER JOIN PPProductionOrdrs b ON a.FK_PPProductionOrdrID = b.PPProductionOrdrID
                        AND a.AAStatus = 'Alive'AND b.AAStatus = 'Alive'
                        AND YEAR(PPProductionOrdrDate) * 12 + MONTH(PPProductionOrdrDate) = {2}
                    INNER JOIN (SELECT FK_PPProductionOrdrID, SUM(ICShipmentItemCostTot) as ICShipmentItemCostTot
                                    , SUM(ICShipmentItemFCostTot) as ICShipmentItemFCostTot
                                FROM ICShipmentItems 
                                WHERE AAStatus = 'Alive' AND FK_ICProductID = {1}
                                GROUP BY FK_PPProductionOrdrID
                                ) c ON c.FK_PPProductionOrdrID = b.PPProductionOrdrID

                    AND b.PPProductionOrdrTypeCombo != 'ConvertProduct'
            "
                , dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                , iICProductID
                , iPeriod + iYear * 12
                , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }
        public ICShipmentItemsInfo LayShipmentItemTheoAssemblyID(int iICProductID, int iICAssemblyID)
        {
            String strQuery = String.Format(@"SELECT dbo.ICShipmentItems.* FROM dbo.ICAssemblys INNER JOIN dbo.ICShipmentItems
                                              ON ICShipmentItems.FK_ICAssemblyID = ICAssemblys.ICAssemblyID
                                              AND ICShipmentItems.AAStatus = ICAssemblys.AAStatus
                                              WHERE ICAssemblys.AAStatus='Alive'
                                              AND ICShipmentItems.FK_ICAssemblyID={1}
                                              AND ICShipmentItems.FK_ICProductID={0}
                                              ", iICProductID, iICAssemblyID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables[0].Rows != null && ds.Tables[0].Rows.Count != 0)
            {
                return (ICShipmentItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        public DataSet GetShipmentItemPPProductionOrd()
        {
            String strQuery = String.Format(@"  SELECT *
                                                FROM dbo.ICShipmentItems
                                                WHERE AAStatus = 'Alive'
                                                      AND FK_PPProductionOrdrID > 0");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataByShipmentIDAndARSOItemIDByKit(int iICShipmentID, int ARSOItemID)
        {
            string strQuery = String.Format(@"  SELECT *
                                                FROM ICShipmentItems
                                                WHERE AAStatus = 'Alive'
                                                      AND FK_ICShipmentID = {0} 
                                                      AND FK_ARSOID = {1}", iICShipmentID, ARSOItemID);
            return dal.GetDataSet(strQuery);
        }
        public void UpdateRMShipment(int iICProductID, int iPeriod, int iYear, double dbUnitCost, bool isGiaVonXuat = false)
        {
            String strQuery = String.Format(culture, @"
            UPDATE  ICShipmentItems
            SET     ICShipmentItemUnitCost = {0} ,
                    ICShipmentItemCostTot = ROUND({0} * ICShipmentItemStkQty, 0)
            WHERE   AAStatus = 'Alive'
                    AND ICShipmentItemIsIdentifyCost = 1        
                    AND FK_ICProductID = {1}
                    AND FK_ICShipmentID IN  (
                    SELECT  ICShipmentID
                    FROM    dbo.ICShipments
                    WHERE   AAStatus = 'Alive'
                            AND AAModule ='RMShipment'
                            AND YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {2} )

            UPDATE ICShipments
                SET ICShipmentCostTot = ICShipmentItemCostTot
                FROM ICShipments a
                    INNER JOIN (SELECT FK_ICShipmentID, SUM(ICShipmentItemCostTot) ICShipmentItemCostTot
			                    FROM ICShipmentItems 
			                    WHERE AAStatus = 'Alive'
			                    GROUP BY FK_ICShipmentID) b ON b.FK_ICShipmentID = a.ICShipmentID
                        AND a.AAStatus = 'Alive'
                        AND YEAR(ICShipmentDate) * 12 + MONTH(ICShipmentDate) = {2}"
               , dbUnitCost, iICProductID, iPeriod + iYear * 12);

            dal.GetDataSet(strQuery);
        }
        public ICShipmentItemsInfo GetCostTotByRcptItmID(int iReceiptItemID)
        {
            string strQuery = String.Format(@"
SELECT ISNULL(SUM(ICShipmentItemCostTot),0) ICShipmentItemCostTot
	, ISNULL(SUM(ICShipmentItemFCostTot),0) ICShipmentItemFCostTot
FROM ICShipmentItems a
INNER JOIN ICShipments b
	ON b.ICShipmentID = a.FK_ICShipmentID
		AND b.AAStatus = 'Alive'
WHERE a.AAStatus = 'Alive'
	AND FK_ICReceiptItemID = {0}
", iReceiptItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables[0].Rows != null && ds.Tables[0].Rows.Count != 0)
            {
                return (ICShipmentItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }
        public DateTime GetLastDateShipmentAndTransfer()
        {
            string strQuery = @"SELECT TOP 1 * FROM (
                                SELECT * FROM 
                                (SELECT Top 1 ICShipmentID,ICShipmentNo,ICShipmentName,ICShipmentDate
                                                                FROM ICShipments a
                                                                JOIN ICShipmentItems b ON a.AAStatus = 'Alive'
                                                                    AND b.AAStatus= 'Alive'
                                                                ORDER BY ICShipmentDate DESC) a
                                UNION
                                SELECT * FROM 
                                (SELECT Top 1 ICTransferID,ICTransferNo,ICTransferName,ICTransferDate
                                                                FROM ICTransfers a
                                                                JOIN ICTransferItems b ON a.AAStatus = 'Alive'
                                                                    AND b.AAStatus= 'Alive'
                                                                ORDER BY ICTransferDate DESC) b) c
                                ORDER BY ICShipmentDate DESC";
            DataTable dt = this.GetDataTableByDataSet(GetDataSet(strQuery));
            if (dt != null && dt.Rows.Count > 0)
                return Convert.ToDateTime(dt.Rows[0]["ICShipmentDate"]);
            return DateTime.Today;
        }

        public ICShipmentItemsInfo GetAllDataByPeriodAndPPCostCenter(int pPPCostCenterID, int pPeriod, int pYear, int pICProductID, int pICProductIDWO)
        {
            string strQuery = string.Format(@"
                                            SELECT  ICShipmentItems.FK_ICProductID ,
                                                ICShipmentItemQty
                                            FROM    dbo.ICShipmentItems
                                                    INNER JOIN dbo.ICShipments ON ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                            WHERE   ICShipmentItems.AAStatus = 'Alive'
                                                    AND ICShipments.AAStatus = 'Alive'
                                                    AND ICShipmentItems.FK_PPCostCenterID = '{0}' 
                                                    AND ICShipmentItems.FK_ICProductID = '{1}' 
                                                    AND ICShipmentItems.FK_ICProductIDWO='{4}'
                                                    AND MONTH(ICShipmentDate) = '{2}'
                                                    AND YEAR(ICShipmentDate) = '{3}'
                                            ", pPPCostCenterID, pICProductID, pPeriod, pYear, pICProductIDWO);
            DataSet ds = GetDataSet(strQuery);
            if (ds.Tables[0].Rows.Count > 0 && ds != null && ds.Tables[0].Rows[0] != null)
            {
                return (ICShipmentItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }
    }
    #endregion
}
