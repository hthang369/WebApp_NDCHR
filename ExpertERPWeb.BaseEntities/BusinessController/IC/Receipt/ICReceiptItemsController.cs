using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Globalization;

namespace ExpertERP.BusinessEntities
{
    #region ICReceiptItems
    //-----------------------------------------------------------
    //Generated By: GMC Studio
    //Class:ICReceiptItemsController
    //Created Date:Saturday, May 31, 2008
    //-----------------------------------------------------------

    public class ICReceiptItemsController : BaseBusinessController
    {
        public static CultureInfo culture = new CultureInfo("en-US");
        public ICReceiptItemsController()
        {
            dal = new DALBaseProvider("ICReceiptItems", typeof(ICReceiptItemsInfo));
        }

        public DataSet GetAllReceiptItemsForShipmentFIFO(int iProductID)
        {
            //String strQuery = String.Format("SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive' AND (ICReceiptItemQty > ICReceiptItemShpQty OR ICReceiptItemShpQty is Null) AND ICReceiptItemDate IS NOT NULL AND FK_ICProductID = {0} ORDER BY ICReceiptItemDate", iProductID);

            String strQuery = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts 
                                                WHERE ICReceiptItems.AAStatus = 'Alive'
                                                AND FK_ICReceiptID = ICReceiptID 
                                                AND ICReceipts.AAStatus = 'Alive'
                                                AND (ICReceiptItemQty > ICReceiptItemShpQty OR ICReceiptItemShpQty is Null)
                                                AND ICReceiptDate IS NOT NULL
                                                AND FK_ICProductID = {0}
                                                ORDER BY ICReceiptDate", iProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemsForShipmentLIFO(int iProductID)
        {
            //String strQuery = String.Format("SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive' AND (ICReceiptItemQty > ICReceiptItemShpQty OR ICReceiptItemShpQty is Null) AND ICReceiptItemDate IS NOT NULL AND FK_ICProductID = {0} ORDER BY ICReceiptItemDate DESC", iProductID);

            String strQuery = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts 
                                                WHERE ICReceiptItems.AAStatus = 'Alive'
                                                AND FK_ICReceiptID = ICReceiptID 
                                                AND ICReceipts.AAStatus = 'Alive'
                                                AND (ICReceiptItemQty > ICReceiptItemShpQty OR ICReceiptItemShpQty is Null)
                                                AND ICReceiptDate IS NOT NULL
                                                AND FK_ICProductID = {0}
                                                ORDER BY ICReceiptDate DESC", iProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductSerialNoAndStockID",
                                                         strProductSerialNo,
                                                         iStockID);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductSerialNoAndStockID",
                                                         strProductSerialNo,
                                                         iStockID);
        }

        public DataSet GetReceiptItemsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductSerialNo(String strProductSerialNo)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetReceiptItemsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByFK_ICProductID", iProductID);
        }

        public ICReceiptItemsInfo GetReceiptItemByProductID(int iProductID)
        {
            return (ICReceiptItemsInfo)dal.GetDataObject("ICReceiptItems_SelectByProductID", iProductID);
        }

        public DataSet GetReceiptItemsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetReceiptItemsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICReceiptItemsInfo objReceiptItemsInfo = (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objReceiptItemsInfo != null)
                        if (objReceiptItemsInfo.FK_ICStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }

        public ICReceiptItemsInfo GetReceiptItemByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetReceiptItemsByProductIDAndStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICReceiptItemsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        public DataSet GetReceiptItemsNewInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{1}' And '{2})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='New' )
                                                 )",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItems(int iBranchID, int iProductID, int iStockID)
        {
            String strQuery = String.Format(@"Select Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
                                                 )",
                                                   iProductID);

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{1}' And '{2})' 
                                                 )",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsNewInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select  FK_ICProductID,FK_ICStockID, Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{0}' And '{1})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='New' )
                                                 )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select  FK_ICProductID,FK_ICStockID, Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{0}' And '{1})' 
                                                 )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsAdjustInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{1}' And '{2})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='Adjust' )
                                                 )",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsAdjustInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID, Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{0}' And '{1})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='Adjust' )
                                                 )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));

            if (iBranchID != 0)// cho mot chi nhanh cu the
            {

            }
            else// cho toan bo chi nhanh
            {

            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsReturnInRangeTime(int iBranchID, int iProductID, int iStockID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICProductID = {0}
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{1}' And '{2})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='Return' )
                                                 )",
                                                   iProductID,
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));
            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
                else
                    strQuery += String.Format(" AND FK_ICStockID IN (SELECT ICStockID FROM ICStocks WHERE FK_BRBranchID = {0} AND AASTatus = 'Alive')", iBranchID);
            }
            else// cho toan bo chi nhanh
            {
                if (iStockID != 0)
                    strQuery += String.Format(" AND FK_ICStockID = {0}", iStockID);
            }
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemsReturnInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"Select FK_ICProductID,FK_ICStockID, Sum(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot
                                                From ICReceiptItems 
                                                where AAStatus ='Alive' 
                                                AND FK_ICReceiptID in
                                                (select ICReceiptID from ICReceipts 
	                                                where AAStatus='Alive' 
	                                                and convert(varchar(10),ICReceiptDate,112) Between  '{0}' And '{1})' 
	                                                and FK_ICReceiptTypeID IN 
		                                                (SELECT ICReceiptTypeID FROM  dbo.ICReceiptTypes 
		                                                WHERE AAStatus='Alive' 
		                                                AND ICReceiptTypeNo='Return' )
                                                 )
                                             AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive')
                                             AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')",
                                                   dtFrom.ToString("yyyyMMdd"),
                                                   dtTo.ToString("yyyyMMdd"));
            if (iBranchID != 0)// cho mot chi nhanh cu the
            {
            }
            else// cho toan bo chi nhanh
            {
            }
            strQuery += string.Format("Group by FK_ICProductID,FK_ICStockID order by FK_ICStockID,FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }

        public double GetTotalReceiptQuantityOfPurchaseOrderItem(int iAPPOItemID)
        {
            double dbTotalReceiptedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet("ICReceiptItems_SelectTotalReceiptedQuantityByAPPOItemID", iAPPOItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalReceiptedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }
                return dbTotalReceiptedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        #region--hieu nguyen--
        public double GetReceiptQtyByProductAndProductTypeAndStockAndBranchAndDate(int iProductID, int iProductTypeID, int iStockID, int iBranchID, DateTime dtFromDate, DateTime dtToDate)
        {
            double dbQty = 0;
            String strGetReceiptByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICReceiptItems] WHERE {0}", GenerateQueryConditionReceipt(iProductID, iProductTypeID, iBranchID, iStockID, dtFromDate, dtToDate));
            DataSet ds = dal.GetDataSet(strGetReceiptByProductStockAndDate);
            if (ds != null)
            {
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow row in ds.Tables[0].Rows)
                    {
                        ICReceiptItemsInfo objICReceiptItemsInfo = (ICReceiptItemsInfo)dal.GetObjectFromDataRow(row);
                        if (objICReceiptItemsInfo != null)
                        {
                            dbQty += objICReceiptItemsInfo.ICReceiptItemQty;
                        }
                    }
                }
            }
            return dbQty;
        }
        private String GenerateQueryConditionReceipt(int iProductID, int iProductTypeID, int iBranchID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICReceiptID] IN (SELECT [ICReceiptID] FROM [dbo].[ICReceipts] WHERE CONVERT(VARCHAR(10), [ICReceiptDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [AAStatus] ='{2}' AND (([FK_BRBranchID]={4}) OR ({4}=0))) AND (([FK_ICStockID]= {5}) OR({5}=0)) AND (([FK_ICProductTypeID]= {6}) OR({6}=0)) AND [FK_ICProductID]={3} AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iBranchID, iStockID, iProductTypeID);
        }
        //
        public DataSet GetListObjectByProductAndStockAndDate(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            List<ICReceiptItemsInfo> lst = new List<ICReceiptItemsInfo>();
            String strGetReceiptByProductStockAndDate = String.Format("SELECT * FROM [dbo].[ICReceiptItems] WHERE {0}", GenerateQueryConditionReceipt(iProductID, iStockID, dtFromDate, dtToDate));
            return (DataSet)dal.GetDataSet(strGetReceiptByProductStockAndDate);

        }
        private String GenerateQueryConditionReceipt(int iProductID, int iStockID, DateTime dtFromDate, DateTime dtToDate)
        {
            return String.Format("[FK_ICReceiptID] IN (SELECT [ICReceiptID] FROM [dbo].[ICReceipts] WHERE CONVERT(VARCHAR(10), [ICReceiptDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) AND [AAStatus] ='{2}') AND [FK_ICProductID]={3} AND (([FK_ICStockID]= {4}) OR({4}=0)) AND [AAStatus] ='{2}'", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, iProductID, iStockID);
        }
        //
        #endregion

        public DataSet GetDataSetICReceiptItemsByICProductIDAndFDateTDate(int iICProductID, DateTime dtFDate, DateTime dtTDate)
        {
            DataSet dsICReceiptItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ICReceiptItems] WHERE [FK_ICReceiptID] IN (SELECT [ICReceiptID] FROM [dbo].[ICReceipts] WHERE CONVERT(VARCHAR(10), [ICReceiptDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [FK_ICProductID]={0} AND [AAStatus] ='{3}'", iICProductID, dtFDate.ToString("yyyyMMdd"), dtTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetDataSetICReceiptItemsByICProductIDAndICReceiptItemSerialNo(int iICProductID, String serialNo)
        {
            DataSet dsICReceiptItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ICReceiptItems] WHERE FK_ICProductID={0} AND ICReceiptItemSerialNo='{1}'", iICProductID, serialNo);
            return (DataSet)dal.GetDataSet(strQuery);
        }

        public DataSet GetReceiptItemByStockIDProductIDAndPeriodAndYear(int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByStockID_ProductID_Period_Year", iICStockID, iICProductID, iPeriod, iYear);
        }

        public DataSet GetSumQtyAndCostTotByStockIDProductIDAndPeriodAndYear(int iICStockID, int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot FROM ICReceiptItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0} AND FK_ICStockID = {1}", iICProductID, iICStockID);
            String strQueryReceiptAlive = String.Format("SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' AND Month(ICReceiptDate) = {0} AND Year(ICReceiptDate) = {1}", iPeriod, iYear);
            String strQueryProductionOrdrAlive = String.Format("SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive' AND Month(PPProductionOrdrDate) = {0} AND Year(PPProductionOrdrDate) = {1}", iPeriod, iYear);

            strQuery += String.Format(" AND (FK_ICReceiptID IN ({0}) OR FK_PPProductionOrdrID IN ({1}))", strQueryReceiptAlive, strQueryProductionOrdrAlive);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetSumQtyAndCostTotByProductIDAndPeriodAndYear(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT SUM(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot FROM ICReceiptItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0}", iICProductID);
            String strQueryReceiptAlive = String.Format("SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' AND Month(ICReceiptDate) = {0} AND Year(ICReceiptDate) = {1}", iPeriod, iYear);
            String strQueryProductionOrdrAlive = String.Format("SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive' AND Month(PPProductionOrdrDate) = {0} AND Year(PPProductionOrdrDate) = {1}", iPeriod, iYear);

            strQuery += String.Format(" AND (FK_ICReceiptID IN ({0}) OR FK_PPProductionOrdrID IN ({1}))", strQueryReceiptAlive, strQueryProductionOrdrAlive);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemByWO_InPrieod(int prieod, int year, int iWOs)
        {
            string strQuery = string.Format("select FK_ICProductID,FK_ICStockID, sum(ICReceiptItemQty)from ICReceiptItems where AAStatus = 'Alive' and "
                                                + " FK_ICReceiptID in (Select ICReceiptID from ICReceipts where AAStatus = 'Alive' and FK_PPWOID = {0}"
                                                + " and month(ICReceiptDate) = {1} and year(ICReceiptDate) = {2})"
                                                + " and FK_ICProductID in (select FK_ICProductID from PPWOEstFGItems where FK_PPWOID = {})"
                                                + " and FK_ICStockID in (Select FK_ICStockID from PPPhaseCfgs where AAStatus = 'Alive')"
                                                + " group by FK_ICProductID,FK_ICStockID", iWOs, prieod, year);
            return dal.GetDataSet(strQuery);
        }

        public double GetQuantityByProductAndStock_InPrieod(int prieod, int year, int productID, int stockID, int WOIDs)
        {
            double result = 0;
            string strQuery = string.Format("select sum(ICReceiptItemQty)from ICReceiptItems where AAStatus = 'Alive' and FK_ICReceiptID "
                                        + " in (Select ICReceiptID from ICReceipts where AAStatus = 'Alive' and FK_PPWOID = {0} and"
                                        + " month(ICReceiptDate) = {1} and year(ICReceiptDate) = {2}) and FK_ICProductID = {3} and FK_ICStockID = {4}",
                                        WOIDs, prieod, year, productID, stockID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    result += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return result;
        }

        public DataSet GetReceiptItemByProductIDAndPeriodAndYear(int iICProductID, int iPeriod, int iYear)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByProductID_Period_Year", iICProductID, iPeriod, iYear);
        }

        public DataSet GetReceiptItemByReceiptIDAndProductIDAndDesinationStockID(int iReceiptID, int iProductID, int iStockID)
        {
            return dal.GetDataSet("ICReceiptItems_SelectByFK_ICReceiptIDAndFK_ICProductIDAndFK_ICStockID", iReceiptID, iProductID, iStockID);
        }

        public DataSet GetAllReceiptItemsOrderByDate(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts 
                                                        WHERE ICReceiptItems.AAStatus = 'Alive' 
                                                        AND ICReceipts.AAStatus = 'Alive' 
                                                        AND FK_ICReceiptID = ICReceiptID
                                                        AND Month(ICReceiptDate) = {0}
                                                        AND Year(ICReceiptDate) = {1}  
                                                        AND ICReceiptItems.FK_ICProductID = {2} 
                                                        ORDER BY ICReceiptDate", iPeriod, iYear, iProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemsOrderByDateDESC(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts 
                                                        WHERE ICReceiptItems.AAStatus = 'Alive' 
                                                        AND ICReceipts.AAStatus = 'Alive' 
                                                        AND ICReceiptItems.FK_ICProductID = {0} 
                                                        AND FK_ICReceiptID = ICReceiptID
                                                        AND Month(ICReceiptDate) = {1}
                                                        AND Year(ICReceiptDate) = {2}  
                                                        ORDER BY ICReceiptDate DESC", iProductID, iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetFGReceiptItemsByPeriodAndYear(int iPeriod, int iYear)
        {
            String strQuery = String.Format("Select * From [ICReceiptItems] Where ([AAStatus]='Alive') AND [FK_ICReceiptID] IN (Select [ICReceiptID] From [ICReceipts] Where Month([ICReceiptDate])={0} AND Year([ICReceiptDate])={1} AND FK_ICReceiptTypeID IN (SELECT ICReceiptTypeID FROM ICReceiptTypes WHERE AASTatus ='Alive' AND ICReceiptTypeNo = 'RcpFG') AND [AAStatus]='Alive')", iPeriod, iYear);

            return dal.GetDataSet(strQuery);
        }

        public double GetSumFGReceiptForProductPln(int iProductID, int iProductPlnID, int iStockID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty)
                                                FROM ICReceiptItems
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0} AND FK_ICStockID={2}
                                                AND (
                                                        FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus= 'Alive' AND FK_PPProductPlnID = {1}))
                                                        OR
                                                        FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus= 'Alive' AND FK_PPProductPlnID = {1}))
                                                    )", iProductID, iProductPlnID, iStockID);

            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public double GetSumFGReceiptForWO(int iProductID, int iPPWOID, int iStockID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty)
                                                FROM ICReceiptItems
                                                WHERE AAStatus = 'Alive' AND FK_PPWOID ={1}
                                                AND FK_ICProductID = {0} AND FK_ICStockID={2}
                                                AND (
                                                        FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' )
                                                        OR
                                                        FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' )
                                                    )", iProductID, iPPWOID, iStockID);

            DataSet ds = dal.GetDataSet(strQuery);
            double dbRcp = 0;
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dbRcp = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return dbRcp;
        }
        //NhamNDH add -13/12/2016-
        public double GetSumFGReceiptForWOBySO(int iARShpPlanItemID, int iProductID, int iPPWOID, int iStockID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty)
                                                FROM ICReceiptItems
                                                WHERE AAStatus = 'Alive' AND FK_PPWOID ={1}
                                                AND FK_ICProductID = {0} AND FK_ICStockID={2}
                                                AND FK_ARShpPlanItemID = {3}
                                                AND (
                                                        FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' )
                                                        OR
                                                        FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' )
                                                    )", iProductID, iPPWOID, iStockID, iARShpPlanItemID);

            DataSet ds = dal.GetDataSet(strQuery);
            double dbRcp = 0;
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dbRcp = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return dbRcp;
        }

        public DataSet GetAllFGReceiptForProductPln(int iProductID, int iProductPlnID, int iStockID)
        {
            String strQuery = String.Format(@"select *
                                                FROM ICReceiptItems
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0} AND FK_ICStockID={2}
                                                AND FK_ICReceiptID IN
		                                                 (SELECT ICReceiptID 
		                                                 FROM ICReceipts 
		                                                 WHERE AAStatus = 'Alive'
		                                                 AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus= 'Alive' AND FK_PPProductPlnID = {1}))", iProductID, iProductPlnID, iStockID);

            return GetDataSet(strQuery);
        }

        public Nullable<DateTime> GetMaxReceiptDateForProductPln(int iProductID, int iProductPlnID, int iStockID)
        {
            String strQuery = String.Format(@"select top 1 ICReceiptDate from ICReceipts inner join ICReceiptItems on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                WHERE ICReceipts.AAStatus = 'Alive' AND ICReceiptItems.AAStatus = 'Alive'
                                                AND FK_ICProductID = {0} AND ICReceiptItems.FK_ICStockID={2}
		                                         AND ICReceiptItems.FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus= 'Alive' AND FK_PPProductPlnID = {1})
                                                      Order By ICReceiptDate Desc", iProductID, iProductPlnID, iStockID);

            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            }

            return null;
        }

        public double GetSUMQtyByOrdrPlnItemPOBatch(int iOrdrPlnItemPOBatchID)
        {
            string strQuery = string.Format(@"SELECT SUM(ICReceiptItemQty) FROM dbo.ICReceiptItems INNER JOIN ICReceiptItemPurchaseOrderItems ON 
                                            dbo.ICReceiptItems.ICReceiptItemID = dbo.ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID
                                            INNER JOIN dbo.APPOItems ON dbo.ICReceiptItemPurchaseOrderItems.FK_APPOItemID = dbo.APPOItems.APPOItemID
                                            WHERE dbo.APPOItems.AAStatus='Alive' AND dbo.ICReceiptItemPurchaseOrderItems.AAStatus='Alive'
                                            AND dbo.ICReceiptItems.AAStatus='Alive'
                                            AND FK_APOrdrPlnItemPOBatchID={0}", iOrdrPlnItemPOBatchID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public double GetSUMQtyByOrdrPlnItemPPBatch(int iOrdrPlnItemPPBatchID)
        {
            string strQuery = string.Format(@"SELECT SUM(ICReceiptItemQty) FROM dbo.ICReceiptItems INNER JOIN ICReceiptItemPurchaseOrderItems ON 
                                            dbo.ICReceiptItems.ICReceiptItemID = dbo.ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID
                                            INNER JOIN dbo.APPOItems ON dbo.ICReceiptItemPurchaseOrderItems.FK_APPOItemID = dbo.APPOItems.APPOItemID
                                            WHERE dbo.APPOItems.AAStatus='Alive' AND dbo.ICReceiptItemPurchaseOrderItems.AAStatus='Alive'
                                            AND dbo.ICReceiptItems.AAStatus='Alive'
                                            AND FK_APOrdrPlnItemPPBatchID={0}", iOrdrPlnItemPPBatchID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetReceiptItemsByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select * from ICReceiptItems where AAStatus='Alive' 
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo ='{0}')
                                                AND FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo='{1}')
                                                AND FK_ICReceiptID in (Select ICReceiptID from ICReceipts where AAStatus='Alive' and {2})
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }

        public double GetSumPOReceiptQtyByProductInPeriod(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' 
                                                                            AND MONTH(ICReceiptDate) = {1} AND YEAR(ICReceiptDate) = {2}
                                                                            AND ICReceiptItemID IN (SELECT FK_ICReceiptItemID FROM ICReceiptItemPurchaseOrderItems WHERE AAStatus = 'Alive'))", iProductID, iPeriod, iYear);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public DataSet GetAllReceiptItemsForProductInPeriod(int iProductID, int iStockID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_ICStockID = {1}
                                                    AND FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' 
                                                                            AND MONTH(ICReceiptDate) = {2} AND YEAR(ICReceiptDate) = {3}
                                                                            AND FK_PPWOID > 0)", iProductID, iStockID, iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByShpPlanItem(int iARShpPlanItemID)
        {
            string strQuery = string.Format(@"select * from ICReceiptItems where AAStatus='Alive'
                                        AND ICReceiptItemID in 
	                                        (
		                                        select FK_ICReceiptItemID from ICReceiptItemPurchaseOrderItems where AAStatus='Alive'
		                                        AND FK_APPOItemID in 
			                                        (
				                                        Select APPOItemID from APPOItems where AAStatus='Alive' AND 
					                                        (
						                                         FK_APSemiOrdPlanID in (Select  APSemiOrdPlanID from APSemiOrdPlans where AAStatus='Alive' AND FK_ARShpPlanItemID={0})
					                                         --or  FK_APSemiDetailOrdPlanID in (Select  APSemiDetailOrdPlanID from APSemiDetailOrdPlans where AAStatus='Alive' AND FK_ARShpPlanItemID={0})
					                                        )
			                                        )
	                                        )", iARShpPlanItemID);
            return dal.GetDataSet(strQuery);

        }

        public DataSet GetAllDataByAPSemiOrdrPlanID(int iAPSemiOrdrPlanID)
        {
            string strQuery = string.Format(@"select * from ICReceiptItems where AAStatus='Alive'
                                        AND ICReceiptItemID in 
	                                        (
		                                        select FK_ICReceiptItemID from ICReceiptItemPurchaseOrderItems where AAStatus='Alive'
		                                        AND FK_APPOItemID in 
			                                        (
				                                        Select APPOItemID from APPOItems where AAStatus='Alive' AND
                                                            APPOItemID in (select FK_APPOItemID from APPOItemSemiOrdPlans where FK_APSemiOrdPlanID ={0})
			                                        )
	                                        )", iAPSemiOrdrPlanID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataByAPSemiDetailOrdrPlanID(int iAPSemiDetailOrdrPlanID)
        {
            string strQuery = string.Format(@"select * from ICReceiptItems where AAStatus='Alive'
                                        AND ICReceiptItemID in 
	                                        (
		                                        select FK_ICReceiptItemID from ICReceiptItemPurchaseOrderItems where AAStatus='Alive'
		                                        AND FK_APPOItemID in 
			                                        (
				                                        Select APPOItemID from APPOItems where AAStatus='Alive' AND 
                                                                APPOItemID in (select FK_APPOItemID from APPOItemSemiDetailOrdPlans where FK_APSemiDetailOrdPlanID ={0})
			                                        )
	                                        )", iAPSemiDetailOrdrPlanID);
            return dal.GetDataSet(strQuery);
        }

        #region Get SUM Qty --Vinh --19/11/2012

        public double GetSUMQtyByPOItem(int iPOItemID)
        {
            String str = String.Format(@"SELECT SUM(ICReceiptItemOrgQty) FROM ICReceiptItems WHERE AAStatus='Alive' AND ICReceiptItemID IN (SELECT FK_ICReceiptItemID FROM ICReceiptItemPurchaseOrderItems WHERE AAStatus='Alive' AND FK_APPOItemID IN (SELECT APPOItemID FROM APPOItems WHERE AAStatus='Alive' AND APPOItemID={0}))", iPOItemID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        public double GetSUMQtyBySemiDetailOrdPlan(int iSemiDetailOrdPlanID)
        {
            String str = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus='Alive' AND ICReceiptItemID IN (SELECT FK_ICReceiptItemID FROM ICReceiptItemPurchaseOrderItems WHERE AAStatus='Alive' AND FK_APPOItemID IN (SELECT APPOItemID FROM APPOItems WHERE AAStatus='Alive' AND FK_APSemiDetailOrdPlanID IN (SELECT APSemiDetailOrdPlanID FROM APSemiDetailOrdPlans WHERE AAStatus='Alive' AND APSemiDetailOrdPlanID={0})))", iSemiDetailOrdPlanID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        public double GetSUMQtyBySemiOrdPlan(int iSemiOrdPlanID)
        {
            String str = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus='Alive' 
                    AND ICReceiptItemID IN (SELECT FK_ICReceiptItemID FROM ICReceiptItemPurchaseOrderItems WHERE AAStatus='Alive' 
                        AND FK_APPOItemID IN (SELECT APPOItemID FROM APPOItems WHERE AAStatus='Alive' AND
                        FK_APSemiOrdPlanID IN (SELECT APSemiOrdPlanID FROM APSemiOrdPlans WHERE AAStatus='Alive' AND APSemiOrdPlanID={0})))", iSemiOrdPlanID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        public double GetSUMQtyByWOANDProduct(int iWOID, int iProductID)
        {
            String str = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus='Alive' AND FK_PPWOID={1})", iProductID, iWOID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        #endregion

        public ICReceiptItemsInfo GetItemByLotNo(String strLotNo)
        {
            string strQuery = string.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive' AND ICReceiptItemLotNo = '{0}'
                                                AND FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'ALive')", strLotNo);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        public DataSet GetAllProductStockByPhase(int iPhaseCfgID, DateTime dtFrom, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GenerateBeetween("PPProductionOrdrDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT DISTINCT  FK_ICProductID, FK_ICStockID FROM ICReceiptItems
                                                    WHERE AAStatus = 'Alive' 
                                                    AND FK_PPProductionOrdrID IN 
                                                            (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive'
                                                                        AND FK_PPPhaseCfgID = {0}  
                                                                        AND {1})
                                                    ", iPhaseCfgID, strTimeCond);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByPOItem(int iPOItemID)
        {
            String str = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus='Alive' AND ICReceiptItemID IN (SELECT FK_ICReceiptItemID FROM ICReceiptItemPurchaseOrderItems WHERE AAStatus='Alive' AND FK_APPOItemID IN (SELECT APPOItemID FROM APPOItems WHERE AAStatus='Alive' AND APPOItemID={0}))", iPOItemID);
            return dal.GetDataSet(str);
        }

        public DataSet GetAllObjectByProductionInRange(DateTime dtFromDate, DateTime dtToDate, string strProductTypeNo)
        {

            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dtFromDate, dtToDate);
            string strQuery = String.Format(@"Select * from ICReceiptItems where AAStatus='Alive' AND FK_PPProductionOrdrID 
                                                    in (Select PPProductionOrdrID from PPProductionOrdrs where AAStatus='Alive'
                                                        AND {0})
                                            AND FK_ICProductID in (select ICProductID from ICProducts where AAStatus='Alive'
                                                AND FK_ICProductGroupID in (select ICProductGroupID from ICProductGroups where ICProductGroupNo='{1}')) ", strDate, strProductTypeNo);
            return dal.GetDataSet(strQuery);
        }

        public ICReceiptItemsInfo GetItemByLotNoProductGroupNo(string strLotNo, string strProductGroupGOLON)
        {
            string strQuery = string.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive' AND ICReceiptItemLotNo = '{0}'
                                                AND FK_ICReceiptID IN (SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'ALive')
                                                AND FK_ICProductID in (Select ICProductID From ICProducts where AAStatus='Alive' AND FK_ICProductGroupID
                                                    in (Select ICProductGroupID from ICProductGroups where AAStatus='Alive' AND ICProductGroupNo='{1}'))", strLotNo, strProductGroupGOLON);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        public double GetTotalQtyByProductionOrdrAndProductionType(int iProductionOrdrID, string strLotNo, string strType)
        {
            string strQuery = string.Format(@"Select SUM(ICReceiptItemQty) from ICReceiptItems where AAStatus='Alive' AND FK_PPProductionOrdrID ={0}
                                                        AND ICReceiptItemProductionTypeCombo='{1}' AND ICReceiptItemLotNo='{2}'", iProductionOrdrID, strType, strLotNo);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {
                    return 0;
                }
            }
            return 0;
        }

        #region GetAllDataViewInventoryStatistic --Vinh --11/12/2012 --Lấy tất cả danh sách ReceiptItem dựa vào Kho, Sản phẩm, Nhóm sản phẩm, Brand và Từ ngày đến ngày.

        public DataSet GetAllDataViewInventoryStatistic(int iStockID, int iProductID, int iProductGroupID, int iProductTypeID, int iBrandID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICReceiptItems 
                                            WHERE AAStatus='Alive'
                                            AND (FK_ICStockID={0} OR 0={0})
                                            AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True' AND (ICProductID = {1} OR 0={1}) AND (FK_ICBrandID={2} OR 0={2}) AND (FK_ICProductGroupID = {3} OR 0={3}) AND (FK_ICProductTypeID = {6} OR 0={6}))
                                            AND (
                                                    FK_ICReceiptID IN (SELECT ICReceiptID FROM dbo.ICReceipts WHERE AAStatus='Alive' AND CONVERT(VARCHAR(20), ICReceiptDate, 112) >= CONVERT(VARCHAR(20),'{4}', 112) AND CONVERT(VARCHAR(20), ICReceiptDate, 112) <= CONVERT(VARCHAR(20),'{5}', 112) ) 
                                                    OR 
                                                    FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs WHERE AAStatus='Alive' AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) >= CONVERT(VARCHAR(20),'{4}', 112) AND CONVERT(VARCHAR(20), PPProductionOrdrDate, 112) <= CONVERT(VARCHAR(20),'{5}', 112))
                                                )", iStockID, iProductID, iBrandID, iProductGroupID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"), iProductTypeID);

            return dal.GetDataSet(str);
        }

        #endregion
        /// <summary>
        /// QuocTrung 2012/12/11
        /// Tạo nguyên vật liệu thực tế từ kết quả sản xuất ( Tạm thời )
        /// </summary>
        public DataSet GetAllReceiptItemsInRCB(string strProductNo, string strPhaseCfgNo)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems INNER JOIN  PPProductionOrdrs ON ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID 
							                                INNER JOIN PPPhaseCfgs ON PPProductionOrdrs.FK_PPPhaseCfgID=PPPhaseCfgs.PPPhaseCfgID
                                                            INNER JOIN ICProducts ON ICReceiptItems.FK_ICProductID=ICProducts.ICProductID
                                                WHERE   PPPhaseCfgs.AAStatus = 'Alive'
                                                        AND ICReceiptItems.AAStatus = 'Alive'
                                                        AND PPProductionOrdrs.AAStatus = 'Alive'
                                                        AND (ICReceiptItems.ICReceiptItemQty > ICReceiptItems.ICReceiptItemShpQty OR ICReceiptItems.ICReceiptItemShpQty is Null)
                                                        AND PPProductionOrdrs.PPProductionOrdrDate IS NOT NULL
                                                        AND ICProducts.ICProductNo='{0}'
                                                        AND PPPhaseCfgs.PPPhaseCfgNo='{1}'
                                                        ORDER BY PPProductionOrdrs.PPProductionOrdrDate", strProductNo, strPhaseCfgNo);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.01.09
        /// Get Last Finish Date Of WOItem
        /// </summary>
        public Nullable<DateTime> GetLastFinishDateProductForWO(int iProductID, int iPPWOID, int iStockID)
        {
            String strQuery = String.Format(@"select top 1 ICReceiptDate from ICReceipts 
                                            inner join ICReceiptItems on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                WHERE ICReceipts.AAStatus = 'Alive' AND ICReceiptItems.AAStatus = 'Alive'
                                                AND FK_ICProductID = {0} AND ICReceiptItems.FK_ICStockID={2}
		                                         AND ICReceiptItems.FK_PPWOID={1}
                                                 Order By ICReceiptDate Desc", iProductID, iPPWOID, iStockID);
            DataSet ds = dal.GetDataSet(strQuery);
            DateTime RcpDate = new DateTime();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                RcpDate = Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            }
            else
                RcpDate = new DateTime(1900, 01, 01);

            strQuery = String.Format(@"select top 1 PPProductionOrdrDate from PPProductionOrdrs 
                                            inner join ICReceiptItems on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                WHERE PPProductionOrdrs.AAStatus = 'Alive' AND ICReceiptItems.AAStatus = 'Alive'
                                                AND FK_ICProductID = {0} AND ICReceiptItems.FK_ICStockID={2}
		                                         AND ICReceiptItems.FK_PPWOID={1}
                                                 Order By PPProductionOrdrDate Desc", iProductID, iPPWOID, iStockID);
            ds = dal.GetDataSet(strQuery);
            DateTime ProductionDate = new DateTime();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                ProductionDate = Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            }
            else
                ProductionDate = new DateTime(1900, 01, 01);

            strQuery = String.Format(@" SELECT TOP 1 Tranfer.ICTransferDate 
                                        FROM dbo.ICTransfers Tranfer
                                        INNER JOIN dbo.ICTransferItems TranItem ON Tranfer.ICTransferID = TranItem.FK_ICTransferID
                                        WHERE Tranfer.AAStatus='Alive' AND TranItem.AAStatus='Alive'
                                        AND TranItem.FK_ICProductID={0} AND TranItem.FK_ICToStockID={1}
                                        AND TranItem.FK_PPWOID={2}
                                        ORDER BY Tranfer.ICTransferDate DESC", iProductID, iStockID, iPPWOID);
            ds = dal.GetDataSet(strQuery);
            DateTime TransferDate = new DateTime();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                TransferDate = Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            }
            else
                TransferDate = new DateTime(1900, 01, 01);

            if (RcpDate < ProductionDate)
            {
                RcpDate = ProductionDate;
            }

            if (RcpDate < TransferDate)
            {
                RcpDate = TransferDate;
            }

            if (RcpDate == new DateTime(1900, 01, 01))
                return null;
            return RcpDate;
        }
        public ICReceiptItemsInfo GetReceiptItemByProductID(int iProductionOrdrID, int iProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID = {1} ", iProductID, iProductionOrdrID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;

        }

        public DataSet GetAllDataByWOAndProduct(int iWO, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} ", ProductID, iWO);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByWOAndProductAndStock(int iWO, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} AND FK_ICStockID={2}", ProductID, iWO, StockID);

            return GetDataSet(strQuery);
        }

        public double GetSUMQtyByWOAndProductAndStock(int iWO, int ProductID, int StockID)
        {
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID={1} AND FK_ICStockID={2}", ProductID, iWO, StockID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
                catch (System.Exception ex)
                {
                    return 0;
                }
            }
            return 0;
        }


        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1}) ", ProductID, ProductPlanID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProductPlanAndProduct(int ProductPlanID, int ProductID, int iSOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={2}) ", ProductID, ProductPlanID, iSOID);

            return GetDataSet(strQuery);

        }

        public DataSet GetAllDataByProductPlnAndProductAndStockAndSO(int ProductPlanID, int ProductID, int StockID, int iSOID)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive') AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={3} ) AND FK_ICStockID={2}", ProductID, ProductPlanID, StockID, iSOID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemsInPeriodByStock(int iStockID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(ICReceiptDate) = {1}
                                            AND YEAR(ICReceiptDate) = {2}", iStockID, iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemsInPeriod(int iStockID, int iPeriod, int iYear, bool isFirstStock)
        {
            String strQuery1 = String.Empty;
            if (isFirstStock == true)
                strQuery1 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(ICReceiptDate) = {1}
                                            AND YEAR(ICReceiptDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery2 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, PPProductionOrdrs
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(PPProductionOrdrDate) = {1}
                                            AND YEAR(PPProductionOrdrDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strQuery1) == false)
                strQuery = String.Format(@"{0}
                                            UNION ALL
                                           {1}", strQuery1, strQuery2);
            else
                strQuery = strQuery2;

            return GetDataSet(strQuery);
        }

        public DataSet GetAllReceiptItemsInPeriod(int iStockID, int iProductID, int iPeriod, int iYear, bool isFirstStock)
        {
            String strQuery1 = String.Empty;
            if (isFirstStock == true)
                strQuery1 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND ICReceiptItems.FK_ICProductID = {1}
                                            AND MONTH(ICReceiptDate) = {2}
                                            AND YEAR(ICReceiptDate) = {3}", iStockID, iProductID, iPeriod, iYear);

            String strQuery2 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, PPProductionOrdrs
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND ICReceiptItems.FK_ICProductID = {1}
                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND MONTH(PPProductionOrdrDate) = {2}
                                            AND YEAR(PPProductionOrdrDate) = {3}", iStockID, iProductID, iPeriod, iYear);

            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strQuery1) == false)
                strQuery = String.Format(@"{0}
                                            UNION ALL
                                           {1}", strQuery1, strQuery2);
            else
                strQuery = strQuery2;

            return GetDataSet(strQuery);
        }

        public DataSet CapNhatGiaVonChoChiTietNhapKhoTheoKhoVaThoiGian(int iStockID, int iPeriod, int iYear, bool isFirstStock)
        {
            String strQuery1 = String.Empty;
            if (isFirstStock == true)
                strQuery1 = String.Format(@"SELECT ICReceiptItems.ICReceiptItemID FROM ICReceiptItems, ICReceipts
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(ICReceiptDate) = {1}
                                            AND YEAR(ICReceiptDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery2 = String.Format(@"SELECT ICReceiptItems.ICReceiptItemID FROM ICReceiptItems, PPProductionOrdrs
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND PPProductionOrdrs.PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND MONTH(PPProductionOrdrDate) = {1}
                                            AND YEAR(PPProductionOrdrDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strQuery1) == false)
                strQuery = String.Format(@"{0}
                                            UNION ALL
                                           {1}", strQuery1, strQuery2);
            else
                strQuery = strQuery2;

            strQuery = String.Format(@" UPDATE dbo.ICReceiptItems
                                        SET 
                                        ICReceiptItemCostTot = (ICReceiptItemPrice + ICReceiptItemFreightAmt + ICReceiptItemOverheadCost + ICReceiptItemLaborCost + ICReceiptItemBeginCostAmt + ICReceiptItemImpTxAmt + ICReceiptItemIndirectRMCost),
                                        ICReceiptItemUnitCost = CASE 
							                                        WHEN ICReceiptItemQty != 0
							                                        THEN ROUND(((ICReceiptItemPrice + ICReceiptItemFreightAmt + ICReceiptItemOverheadCost + ICReceiptItemLaborCost + ICReceiptItemBeginCostAmt + ICReceiptItemImpTxAmt + ICReceiptItemIndirectRMCost) / ICReceiptItemQty),2)
							                                        ELSE 0
						                                        END
                                        FROM dbo.ICReceiptItems
                                        WHERE AAStatus='Alive'
                                        AND ICReceiptItemID IN (
							                                    {0}
						                                        )", strQuery);

            return GetDataSet(strQuery);
        }
        public void ResetAllocateCost(int iStockID, int iPeriod, int iYear)
        {
            String strQuery1 = String.Format(@"UPDATE dbo.ICReceiptItems
                                            SET ICReceiptItemInDirectAllocateCostTot = 0
                                            FROM dbo.ICReceipts
                                            WHERE ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(ICReceipts.ICReceiptDate) = {1}
                                            AND YEAR(ICReceipts.ICReceiptDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery2 = String.Format(@"UPDATE dbo.ICReceiptItems
                                            SET ICReceiptItemInDirectAllocateCostTot = 0
                                            FROM dbo.PPProductionOrdrs
                                            WHERE ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND dbo.PPProductionOrdrs.PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND MONTH(PPProductionOrdrs.PPProductionOrdrDate) = {1}
                                            AND YEAR(PPProductionOrdrs.PPProductionOrdrDate) = {2}", iStockID, iPeriod, iYear);

            String strQuery3 = String.Format(@"UPDATE dbo.ICReceiptItems
                                            SET ICReceiptItemOverheadCost = 0, ICReceiptItemLaborCost = 0, ICReceiptItemBeginCostAmt = 0
                                            FROM dbo.PPProductionOrdrs
                                            WHERE ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND dbo.PPProductionOrdrs.PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND MONTH(PPProductionOrdrs.PPProductionOrdrDate) = {1}
                                            AND YEAR(PPProductionOrdrs.PPProductionOrdrDate) = {2}", iStockID, iPeriod, iYear);

            GetDataSet(strQuery1);
            GetDataSet(strQuery2);
            GetDataSet(strQuery3);
        }

        #region Lấy tất cả các ReceiptItem thuộc PPProductionOrdr có tháng năm truyền vào --Vinh --02/07/2013

        public DataSet GetReceiptItemProductionOrdrByYearANDPeriod(int iYear, int iPeriod)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_PPProductionOrdrID IN (
								                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                            WHERE AAStatus = 'Alive'
                                                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
								                                            AND YEAR(PPProductionOrdrDate) = {0}
								                                            AND MONTH(PPProductionOrdrDate) = {1}
							                                            )", iYear, iPeriod);
            return dal.GetDataSet(str);
        }

        public DataSet GetReceiptItemProductionOrdrByYearANDPeriod(int iICStockID, int iYear, int iPeriod)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND FK_PPProductionOrdrID IN (
								                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                            WHERE AAStatus = 'Alive'
                                                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
								                                            AND YEAR(PPProductionOrdrDate) = {1}
								                                            AND MONTH(PPProductionOrdrDate) = {2}
							                                            )", iICStockID, iYear, iPeriod);
            return dal.GetDataSet(str);
        }

        public DataSet GetReceiptItemsByProductionOrdrID(int iPPProductionOrdrID)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_PPProductionOrdrID ={0}", iPPProductionOrdrID);
            return dal.GetDataSet(str);
        }

        #endregion

        #region Lấy tất cả nhập kho có Tổng giá khác với Tổng giá vốn xuất kho --Vinh --03/07/2013

        public DataSet LayTatCaNhapKhoCoTongGiaKhacTongGiaVonXuatKho(int iYear, int iMonth)
        {
            String str = String.Format(@"   SELECT * FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_PPProductionOrdrID IN(
								                                            SELECT PPProductionOrdrID FROM
								                                            (
									                                            SELECT PPProductionOrdrID,
									                                            (
										                                            SELECT SUM(ICShipmentItemCostTot) FROM dbo.ICShipmentItems
										                                            WHERE AAStatus = 'Alive'
										                                            AND FK_PPProductionOrdrID = PPProductionOrdrID
									                                            ) AS ICShipmentItemCostTot,
									                                            (
										                                            SELECT SUM(ICReceiptItemPrice) FROM dbo.ICReceiptItems
										                                            WHERE AAStatus = 'Alive'
										                                            AND FK_PPProductionOrdrID = PPProductionOrdrID
									                                            ) AS ICReceiptItemPrice
									                                            FROM dbo.PPProductionOrdrs
									                                            WHERE AAStatus='Alive'
									                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
									                                            AND YEAR(PPProductionOrdrDate) * 12 + MONTH(PPProductionOrdrDate) = {0}
								                                            ) AS TB
								                                            WHERE ICReceiptItemPrice <> ICShipmentItemCostTot
						                                                )", iYear * 12 + iMonth);
            return dal.GetDataSet(str);
        }

        #endregion

        public ICReceiptItemsInfo GetReceiptItemByReceiptIDAndProductID(int iReceiptID, int iProductID)
        {
            String strQuery = String.Format(@"  SELECT * FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive' AND FK_ICReceiptID={0} AND FK_ICProductID={1}", iReceiptID, iProductID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }
        /// <summary>
        #region Kiểm tra RcpItem mà không nằm trong phiếu chuyển mã --Vinh --11/12/2012
        public Boolean KiemTraReceiptItemTrongNXQTCoKhoKhacKhoTruyenVao(int iProductionOrdrID, List<int> lstStock)
        {
            String strStock = String.Empty;
            foreach (int iStockID in lstStock)
            {
                if (String.IsNullOrEmpty(strStock))
                {
                    strStock += String.Format(@"SELECT {0} AS StockID ", iStockID);
                }
                else
                {
                    strStock += String.Format(@" UNION SELECT {0} AS StockID ", iStockID);
                }
            }
            /// 
            String str = String.Empty;
            if (!String.IsNullOrEmpty(strStock))
            {
                str = String.Format(@"  SELECT * FROM dbo.ICReceiptItems
                                        WHERE AAStatus = 'Alive'
                                        AND FK_PPProductionOrdrID = {0}
                                        AND FK_ICStockID IN ({1})", iProductionOrdrID, strStock);
            }
            else
            {
                return true;
            }
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return false;
            }
            return true;
        }
        #endregion
        #region Lấy tất cả các ReceiptItem mà không có nằm trong phiếu chuyển mã --Vinh -- 12/-9/2103
        public DataSet GetAllReceiptItemsInPeriod(int iStockID, int iPeriod, int iYear)
        {
            String strQuery1 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND ICReceipts.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND MONTH(ICReceiptDate) = {1}
                                            AND YEAR(ICReceiptDate) = {2}", iStockID, iPeriod, iYear);
            String strQuery2 = String.Format(@"SELECT ICReceiptItems.* FROM ICReceiptItems, PPProductionOrdrs
                                            WHERE ICReceiptItems.AAStatus = 'Alive'
                                            AND PPProductionOrdrs.AAStatus = 'Alive'
                                            AND ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                            AND ICReceiptItems.FK_ICStockID = {0}
                                            AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND MONTH(PPProductionOrdrDate) = {1}
                                            AND YEAR(PPProductionOrdrDate) = {2}", iStockID, iPeriod, iYear);
            String strQuery = String.Format(@"{0}
                                            UNION ALL
                                           {1}", strQuery1, strQuery2);
            return GetDataSet(strQuery);
        }

        public DataSet GetAllICReceiptItemsByStockANDDate(int iStockID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@" SELECT ICReceiptItems.* FROM ICReceiptItems, ICReceipts
                                                WHERE ICReceiptItems.AAStatus = 'Alive'
                                                AND ICReceipts.AAStatus = 'Alive'
                                                AND ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                                AND (ICReceiptItems.FK_ICStockID = {0} OR {0} = 0)
                                                AND MONTH(ICReceiptDate) = {1}
                                                AND YEAR(ICReceiptDate) = {2}

                                                UNION ALL

                                                SELECT ICReceiptItems.* FROM ICReceiptItems, PPProductionOrdrs
                                                WHERE ICReceiptItems.AAStatus = 'Alive'
                                                AND PPProductionOrdrs.AAStatus = 'Alive'
                                                AND ICReceiptItems.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                                AND (ICReceiptItems.FK_ICStockID = {0} OR {0} = 0)
                                                AND PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                                AND MONTH(PPProductionOrdrDate) = {1}
                                                AND YEAR(PPProductionOrdrDate) = {2}
                                                ", iStockID, iPeriod, iYear);
            return GetDataSet(strQuery);
        }
        #endregion

        /// <summary>
        /// Viet Nguyen 2013.07.22
        /// 
        /// </summary>
        public DataSet GetAllRcpGroupByProductPhaseWOByDate(DateTime dteDate)
        {
            string strQueryRcpDate = DALUtil.GennerateCondition("PPProductionOrdrDate", CompareType.Equal, dteDate);
            string strQuery = string.Format(@"select FK_ICProductID, FK_PPPhaseCfgID, FK_PPWOID, SUM(ICReceiptItemQty) as ICReceiptItemQty from ICReceiptItems where AAStatus='Alive' AND FK_PPPhaseCfgID>0 AND FK_PPWOID>0 
                                                    AND FK_PPProductionOrdrID in (select PPProductionOrdrID from PPProductionOrdrs where AAStatus='Alive' AND {0})
                                                                 group by FK_ICProductID, FK_PPPhaseCfgID, FK_PPWOID
                                                  ", strQueryRcpDate);
            return dal.GetDataSet(strQuery);
        }

        public double LayTongSoTienChiPhiNhapKho(int iICStockID, int iICProductID, int iYear, int iPeriod, String strColumnName)
        {
            String str = String.Format(@"   SELECT SUM({0}) FROM dbo.ICReceiptItems
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICStockID = {1}
                                            AND FK_ICProductID = {2}
                                            AND
                                            (
	                                            FK_ICReceiptID IN (
							                                            SELECT ICReceiptID FROM dbo.ICReceipts
							                                            WHERE AAStatus = 'Alive'
							                                            AND YEAR(ICReceiptDate) = {3}
							                                            AND MONTH(ICReceiptDate) = {4}
						                                            )
	                                            OR
	                                            FK_PPProductionOrdrID IN (
									                                            SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
									                                            WHERE AAStatus = 'Alive'
									                                            AND YEAR(PPProductionOrdrDate) = {3}
									                                            AND MONTH(PPProductionOrdrDate) = {4}
								                                            )
                                            )", strColumnName, iICStockID, iICProductID, iYear, iPeriod);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public DataSet LayDanhSachNhapKhoThongKeGiaThanh(int iICStockID, int iICProductTypeID, int iYear, int iMonth)
        {
            String str = String.Format(@"   SELECT dbo.ICReceiptItems.* FROM dbo.ICReceiptItems, dbo.ICReceipts, dbo.ICProducts
                                            WHERE dbo.ICReceiptItems.AAStatus = 'Alive'
                                            AND dbo.ICReceipts.AAStatus = 'Alive'
                                            AND dbo.ICProducts.AAStatus = 'Alive'
                                            AND dbo.ICReceiptItems.FK_ICReceiptID = dbo.ICReceipts.ICReceiptID
                                            AND dbo.ICReceiptItems.FK_ICProductID = dbo.ICProducts.ICProductID
                                            AND (dbo.ICReceiptItems.FK_ICStockID = {0} OR {0} = 0)
                                            AND (dbo.ICProducts.FK_ICProductTypeID = {1} OR {1} = 0)
                                            AND YEAR(dbo.ICReceipts.ICReceiptDate) = {2}
                                            AND MONTH(dbo.ICReceipts.ICReceiptDate) = {3}

                                            UNION ALL

                                            SELECT dbo.ICReceiptItems.* FROM dbo.ICReceiptItems, dbo.PPProductionOrdrs, dbo.ICProducts
                                            WHERE dbo.ICReceiptItems.AAStatus = 'Alive'
                                            AND dbo.PPProductionOrdrs.AAStatus = 'Alive'
                                            AND dbo.ICReceiptItems.FK_PPProductionOrdrID = dbo.PPProductionOrdrs.PPProductionOrdrID
                                            AND dbo.ICReceiptItems.FK_ICProductID = dbo.ICProducts.ICProductID
                                            --AND dbo.PPProductionOrdrs.PPProductionOrdrTypeCombo <> 'ConvertProduct'
                                            AND (dbo.ICReceiptItems.FK_ICStockID = {0} OR {0} = 0)
                                            AND (dbo.ICProducts.FK_ICProductTypeID = {1} OR {1} = 0)
                                            AND YEAR(dbo.PPProductionOrdrs.PPProductionOrdrDate) = {2}
                                            AND MONTH(dbo.PPProductionOrdrs.PPProductionOrdrDate) = {3}
                                            ", iICStockID, iICProductTypeID, iYear, iMonth);

            return dal.GetDataSet(str);
        }

        public double GetSUMRcpQtyByProductPlnProductStockSOInRange(int ProductPlanID, int ProductID, int iPhaseCfgID, int iSOID, DateTime fromDate, DateTime ToDate)
        {
            string strQueryDateRcp = DALUtil.GenerateBeetween("ICReceiptDate", fromDate, ToDate);
            string strQueryDateProduction = DALUtil.GenerateBeetween("PPProductionOrdrDate", fromDate, ToDate);
            String strQuery = String.Format(@"SELECT SUM(ICReceiptItemQty) FROM ICReceiptItems WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND ( FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND {4}) 
                                                    or FK_ICReceiptID in (select ICReceiptID from ICReceipts where AAStatus='Alive' AND {5}))
                                                AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={3} ) 
                                                AND FK_ICStockID in (select FK_ICStockID from PPPhaseCfgs where AAStatus='Alive' AND PPPhaseCfgID={2})", ProductID, ProductPlanID, iPhaseCfgID, iSOID, strQueryDateProduction, strQueryDateRcp);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        #region Lấy số lượng sản xuất của Phiếu sản xuất theo Công Đoạn và Phân xưởng và Ngày tạo phiếu -- Vinh -- 2014.08.25

        public double LaySoLuongTheoCongDoanVaPhanXuongVaNgay(int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dt)
        {
            string str = GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(iICProductID, iPPPhaseCfgID, iPPWorkCenterID, ref dt, "SUM(ICReceiptItemQty)");
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public DataSet LayDanhSachTheoCongDoanVaPhanXuongVaNgay(int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dt)
        {
            string str = GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(iICProductID, iPPPhaseCfgID, iPPWorkCenterID, ref dt, "*");
            return dal.GetDataSet(str);
        }

        private String GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(int iICProductID, int iPPPhaseCfgID, int iPPWorkCenterID, ref DateTime dt, string strSelectCon)
        {
            String str = String.Format(@"SELECT {4} FROM dbo.ICReceiptItems
                                        WHERE AAStatus = 'Alive'
                                        AND FK_ICProductID = {0}
                                        AND FK_PPProductionOrdrID IN  (
								                                        SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                        WHERE AAStatus = 'Alive'
								                                        AND FK_PPPhaseCfgID = {1}
								                                        AND FK_PPWorkCenterID = {2}
                                                                        AND
                                                                        (
	                                                                        (
		                                                                        PPProductionOrdrEstEndDate IS NULL
		                                                                        AND
		                                                                        CONVERT(VARCHAR, PPProductionOrdrDate, 112) = '{3}'
	                                                                        )
	                                                                        OR
	                                                                        CONVERT(VARCHAR, PPProductionOrdrEstEndDate, 112) = '{3}'
                                                                        )
							                                         )"
                                               , iICProductID, iPPPhaseCfgID, iPPWorkCenterID, dt.ToString("yyyyMMdd"), strSelectCon);
            return str;
        }

        #endregion

        #region Lấy số lượng nhập kho theo POItem -- Vinh -- 2014.08.29

        public DataSet LayTatCaNhapKhoChiTietTheoPO(int iICProductID, int iAPPOItemID)
        {
            String str = String.Format(@"   SELECT ReceiptItem.* FROM dbo.ICReceiptItems ReceiptItem
                                            INNER JOIN dbo.ICReceipts Receipt ON Receipt.ICReceiptID = ReceiptItem.FK_ICReceiptID
                                            INNER JOIN dbo.ICReceiptItemPurchaseOrderItems ReceiptItemPOItem ON ReceiptItemPOItem.FK_ICReceiptItemID = ReceiptItem.ICReceiptItemID
                                            WHERE Receipt.AAStatus = 'Alive' AND ReceiptItem.AAStatus = 'Alive' AND ReceiptItemPOItem.AAStatus = 'Alive'
                                            AND ReceiptItem.FK_ICProductID = {0}
                                            AND ReceiptItemPOItem.FK_APPOItemID = {1}"
                                       , iICProductID, iAPPOItemID);
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet LayDanhSachNhapKhoTheoNhaCungCapVaNguyenVatLieu(int iSupplierID, int iICProductID)
        {
            string strQuery = string.Format(@" SELECT * FROM dbo.ICReceiptItems WHERE FK_ICReceiptID IN
                (SELECT dbo.ICReceipts.ICReceiptID FROM dbo.ICReceipts WHERE FK_APSupplierID={0} AND AAStatus='Alive')
                AND FK_ICProductID IN (SELECT dbo.APPOBOMItems.FK_ICProductParentID FROM dbo.APPOBOMItems WHERE FK_ICProductID={1}) AND dbo.ICReceiptItems.AAStatus='Alive'", iSupplierID, iICProductID);
            return dal.GetDataSet(strQuery);
        }

        public float GetReceiptItemByPO(int iPOItemID, int iICReceiptItemID)
        {
            float fQtyStock = 0;

            string strQuery = string.Format(@"  SELECT SUM(icreceiptitems.ICReceiptItemOrgQty)
                                                FROM ICReceiptItems 
                                                WHERE ICReceiptItems.AAStatus='Alive' 
                                                      AND  ICReceiptItems.ICReceiptItemID IN (  SELECT FK_ICReceiptItemID
										                                                FROM dbo.ICReceiptItemPurchaseOrderItems
										                                                WHERE FK_APPOItemID = {0} AND ICReceiptItemPurchaseOrderItems.AAStatus = 'Alive' )
                                                      AND ICReceiptItems.ICReceiptItemID != {1}

                                            ", iPOItemID, iICReceiptItemID);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0].ToString() != "")
                fQtyStock = float.Parse(ds.Tables[0].Rows[0][0].ToString());

            return fQtyStock;

        }
        #region Giá Thành Mới --Vinh
        public DataSet GetSumQtyAndCostTotByProductIDAndPeriodAndYear(int iICProductID, int iPeriod, int iYear, Boolean isHasProductionOrdr = true)
        {
            String strQuery = String.Format("SELECT SUM(ICReceiptItemQty) as Qty, SUM(ICReceiptItemCostTot) as CostTot FROM ICReceiptItems WHERE AAStatus = 'Alive' AND FK_ICProductID = {0}", iICProductID);
            String strQueryReceiptAlive = String.Format("SELECT ICReceiptID FROM ICReceipts WHERE AAStatus = 'Alive' AND MONTH(ICReceiptDate) = {0} AND YEAR(ICReceiptDate) = {1}", iPeriod, iYear);
            String strQueryProductionOrdrAlive = String.Empty;
            if (isHasProductionOrdr)
                strQueryProductionOrdrAlive = String.Format("OR FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus = 'Alive' AND Month(PPProductionOrdrDate) = {0} AND Year(PPProductionOrdrDate) = {1})", iPeriod, iYear);

            strQuery += String.Format(" AND (FK_ICReceiptID IN ({0}) {1})", strQueryReceiptAlive, strQueryProductionOrdrAlive);

            return dal.GetDataSet(strQuery);
        }

        public void UpdateCostTotReceiptItems(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost)
        {
            //Chỉ cập nhật cho nhập kho NVL dư thừa (RMReceipt) --Vinh
            String strQuery = String.Format(@" UPDATE  ICReceiptItems
                                                        SET     ICReceiptItemUnitCost = {0} ,
                                                                ICReceiptItemCostTot = ROUND({0} * ICReceiptItemQty, 0),
                                                                ICReceiptItemFCostTot = {4} * ICReceiptItemQty
                                                  WHERE     AAStatus = 'Alive'
                                                            /*AND FK_PPCostCenterID NOT IN (
                                                                                            SELECT FK_PPCostCenterID FROM dbo.PPProductionCostCenterActives
                                                                                            WHERE PPPeriod = {2}
                                                                                            AND PPYear = {3}
                                                                                            )*/
                                                            AND FK_ICProductID = {1}
                                                            AND FK_ICReceiptID IN (
                                                                                    SELECT ICReceiptID 
                                                                                    FROM dbo.ICReceipts
                                                                                    WHERE AAStatus = 'Alive'
                                                                                          AND MONTH(ICReceiptDate) = {2}
                                                                                          AND Year(ICReceiptDate) = {3}
                                                                                          AND AAModule IN ('RMReceipt','FGReceipt')
                                                                                    )
                                                            ",
                                                                  dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                                                                  , iICProductID
                                                                  , iPeriod
                                                                  , iYear
                                                                  , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));
            dal.GetDataSet(strQuery);
        }

        public void UpdateCostTotReceiptItemTraHang(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost, bool isGiaVonXuat = false)
        {
            String strQuery = String.Format(@"
            IF ( OBJECT_ID('tempdb..#ReceiptUse') IS NOT NULL )
                DROP TABLE #ReceiptUse;

            --Lay Cac Phieu NK tra hang cua phieu xuat kho cua thang đo
            SELECT  *
            INTO    #ReceiptUse
            FROM    (
		              --Nhap kho tra hang tu SaleReturn
                      SELECT    ICReceipts.ICReceiptID
                      FROM      dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                               AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                               AND ICReceipts.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ICReceiptItemSaleReturnItems ON ( ICReceiptItemSaleReturnItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                          AND ICReceiptItemSaleReturnItems.AAStatus = ICReceiptItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ARSaleReturnItems ON ( ARSaleReturnItems.ARSaleReturnItemID = ICReceiptItemSaleReturnItems.FK_ARSaleReturnItemID
                                                                      AND ARSaleReturnItems.AAStatus = ICReceiptItemSaleReturnItems.AAStatus
                                                                    )
                                INNER JOIN dbo.ARSaleReturns ON ( ARSaleReturns.ARSaleReturnID = ARSaleReturnItems.FK_ARSaleReturnID
                                                                  AND ARSaleReturns.AAStatus = ARSaleReturnItems.AAStatus
                                                                )
                      WHERE     ICReceipts.AAModule IN ( 'SaleReturnReceiptFromSO', 'SaleReturnReceipt' )
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {2}
                                AND ARSaleReturnItems.ARSaleReturnItemID IN (
					            --SaleReturn tao tu Shipment
                                SELECT  ARSaleReturnItemShipmentItems.FK_ARSaleReturnItemID
                                FROM    dbo.ARSaleReturnItemShipmentItems
                                        INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ARSaleReturnItemShipmentItems.FK_ICShipmentItemID
                                                                          AND ICShipmentItems.AAStatus = ARSaleReturnItemShipmentItems.AAStatus
                                                                          )
                                        INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                        AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                                      )
                                WHERE   ARSaleReturnItemShipmentItems.FK_ARSaleReturnItemID = ARSaleReturnItems.ARSaleReturnItemID
                                        AND ARSaleReturnItemShipmentItems.AAStatus = ARSaleReturnItems.AAStatus
                                        AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) = {2}
                                UNION
					            --SaleReturn tao tu Invoice, Invoice tao tu Shipment
                                SELECT  ARSaleReturnItemInvoiceItems.FK_ARSaleReturnItemID
                                FROM    dbo.ARSaleReturnItemInvoiceItems
                                        INNER JOIN dbo.ARInvoiceItems ON ( ARInvoiceItems.ARInvoiceItemID = ARSaleReturnItemInvoiceItems.FK_ARInvoiceItemID
                                                                   AND ARInvoiceItems.AAStatus = ARSaleReturnItemInvoiceItems.AAStatus
                                                                   AND ARInvoiceItems.AAStatus = 'Alive'
                                                                 )
                                        INNER JOIN dbo.ARInvoices ON ( ARInvoices.ARInvoiceID = ARInvoiceItems.FK_ARInvoiceID
                                                                       AND ARInvoiceItems.AAStatus = ARInvoices.AAStatus
                                                                       AND ARInvoiceItems.AAStatus = 'Alive'
                                                                     )
                                        INNER JOIN dbo.ARInvoiceItemShipmentItems ON ( ARInvoiceItemShipmentItems.FK_ARInvoiceItemID = ARInvoiceItems.ARInvoiceItemID
                                                                          AND ARInvoiceItemShipmentItems.AAStatus = ARInvoiceItems.AAStatus
                                                                          )
                                        INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ARInvoiceItemShipmentItems.FK_ICShipmentItemID
                                                                          AND ICShipmentItems.AAStatus = ARSaleReturnItemInvoiceItems.AAStatus
                                                                          )
                                        INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                        AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                                      )
                                WHERE   ARSaleReturnItemInvoiceItems.FK_ARSaleReturnItemID = ARSaleReturnItems.ARSaleReturnItemID
                                        AND ARSaleReturnItemInvoiceItems.AAStatus = ARSaleReturnItems.AAStatus
                                        AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) = {2}
                                UNION
					            --SaleReturn tao truc tiep khong qua tao tu nao het
                                SELECT  SaleReturnItemTemp.ARSaleReturnItemID AS FK_ARSaleReturnItemID
                                FROM    ARSaleReturnItems SaleReturnItemTemp
                                        INNER JOIN dbo.ARSaleReturns SaleReturnTemp ON ( SaleReturnTemp.ARSaleReturnID = SaleReturnItemTemp.FK_ARSaleReturnID
                                                                          AND SaleReturnTemp.AAStatus = SaleReturnItemTemp.AAStatus
                                                                          AND SaleReturnTemp.AAStatus = 'Alive'
                                                                          )
                                WHERE   SaleReturnItemTemp.ARSaleReturnItemID NOT IN (
                                        SELECT  DISTINCT ARSaleReturnItemInvoiceItems.FK_ARSaleReturnItemID
                                        FROM    dbo.ARSaleReturnItemInvoiceItems
                                        UNION
                                        SELECT  ARSaleReturnItemShipmentItems.FK_ARSaleReturnItemID
                                        FROM    dbo.ARSaleReturnItemShipmentItems )
                                )
                      /*UNION
		              --Nhap kho tra hang tu Xuat kho (hay tu SO)
                      SELECT    ICReceipts.ICReceiptID
                      FROM      dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                               AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                               AND ICReceipts.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ICReceiptItemShipmentItems ON ( ICReceiptItemShipmentItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                          AND ICReceiptItemShipmentItems.AAStatus = ICReceiptItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ICReceiptItemShipmentItems.FK_ICShipmentItemID
                                                                    AND ICShipmentItems.AAStatus = ICReceiptItemShipmentItems.AAStatus
                                                                  )
                                INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                              )
                      WHERE     ICReceipts.AAModule IN ( 'SaleReturnReceipt', 'SaleReturnReceiptFromSO' )
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {2}
                                AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) = {2}
*/
                    ) AS TB;

		            UPDATE  ICReceiptItems
                    SET     ICReceiptItemUnitCost = {0} ,
                            ICReceiptItemCostTot = ROUND({0} * ICReceiptItemStkQty, 0),
                            ICReceiptItemFCostTot = {3} * ICReceiptItemStkQty
                    WHERE   AAStatus = 'Alive'
                            AND FK_ICProductID = {1}
		                    AND FK_ICReceiptID IN (
		                                            SELECT ICReceiptID 
                                                    FROM #ReceiptUse
		                    )

            "
                , dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                , iICProductID
                , iPeriod + iYear * 12
                , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }

        public void UpdateCostTotReceiptItemTraHangKhacThang(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"
            IF ( OBJECT_ID('tempdb..#ReceiptSaleReturnWithShipmentDiffMonth') IS NOT NULL )
                DROP TABLE #ReceiptSaleReturnWithShipmentDiffMonth;

            --Loai Tru Cac Phieu nhap NVL Thua + NK tra hang cua phieu xuat kho cua thang đo
            SELECT  *
            INTO    #ReceiptSaleReturnWithShipmentDiffMonth
            FROM    (
		              --Nhap kho tra hang tu SaleReturn
                      SELECT    ICReceiptItems.ICReceiptItemID ,
                                ICShipmentItems.ICShipmentItemStkQty,
                                ICShipmentItems.ICShipmentItemCostTot,
                                ICShipmentItems.ICShipmentItemFCostTot
                      FROM      dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                               AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                               AND ICReceipts.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ICReceiptItemSaleReturnItems ON ( ICReceiptItemSaleReturnItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                          AND ICReceiptItemSaleReturnItems.AAStatus = ICReceiptItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ARSaleReturnItems ON ( ARSaleReturnItems.ARSaleReturnItemID = ICReceiptItemSaleReturnItems.FK_ARSaleReturnItemID
                                                                      AND ARSaleReturnItems.AAStatus = ICReceiptItemSaleReturnItems.AAStatus
                                                                    )
                                INNER JOIN dbo.ARSaleReturns ON ( ARSaleReturns.ARSaleReturnID = ARSaleReturnItems.FK_ARSaleReturnID
                                                                  AND ARSaleReturns.AAStatus = ARSaleReturnItems.AAStatus
                                                                )
                                INNER JOIN dbo.ARSaleReturnItemShipmentItems ON ( ARSaleReturnItemShipmentItems.FK_ARSaleReturnItemID = ARSaleReturnItems.ARSaleReturnItemID
                                                                          AND ARSaleReturnItemShipmentItems.AAStatus = ARSaleReturnItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ARSaleReturnItemShipmentItems.FK_ICShipmentItemID
                                                                    AND ICShipmentItems.AAStatus = ARSaleReturnItemShipmentItems.AAStatus
                                                                  )
                                INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                              )
                      WHERE     ICReceipts.AAModule IN ( 'SaleReturnReceiptFromSO',
                                                         'SaleReturnReceipt' )
                                AND ICReceiptItems.FK_ICProductID = {0}
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {1}
                                AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) != {1}
                      UNION

					  --SaleReturn tao tu Invoice, Invoice tao tu Shipment
                      SELECT    ICReceiptItems.ICReceiptItemID ,
                                ICShipmentItems.ICShipmentItemStkQty,
                                ICShipmentItems.ICShipmentItemCostTot,
                                ICShipmentItems.ICShipmentItemFCostTot
                      FROM      dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                               AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                               AND ICReceipts.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ICReceiptItemSaleReturnItems ON ( ICReceiptItemSaleReturnItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                          AND ICReceiptItemSaleReturnItems.AAStatus = ICReceiptItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ARSaleReturnItems ON ( ARSaleReturnItems.ARSaleReturnItemID = ICReceiptItemSaleReturnItems.FK_ARSaleReturnItemID
                                                                      AND ARSaleReturnItems.AAStatus = ICReceiptItemSaleReturnItems.AAStatus
                                                                    )
                                INNER JOIN dbo.ARSaleReturns ON ( ARSaleReturns.ARSaleReturnID = ARSaleReturnItems.FK_ARSaleReturnID
                                                                  AND ARSaleReturns.AAStatus = ARSaleReturnItems.AAStatus
                                                                )
                                INNER JOIN dbo.ARSaleReturnItemInvoiceItems ON ( ARSaleReturnItemInvoiceItems.FK_ARSaleReturnItemID = ARSaleReturnItems.ARSaleReturnItemID
                                                                          AND ARSaleReturnItemInvoiceItems.AAStatus = ARSaleReturnItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ARInvoiceItems ON ( ARInvoiceItems.ARInvoiceItemID = ARSaleReturnItemInvoiceItems.FK_ARInvoiceItemID
                                                                   AND ARInvoiceItems.AAStatus = ARSaleReturnItemInvoiceItems.AAStatus
                                                                   AND ARInvoiceItems.AAStatus = 'Alive'
                                                                 )
                                INNER JOIN dbo.ARInvoices ON ( ARInvoices.ARInvoiceID = ARInvoiceItems.FK_ARInvoiceID
                                                               AND ARInvoiceItems.AAStatus = ARInvoices.AAStatus
                                                               AND ARInvoiceItems.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ARInvoiceItemShipmentItems ON ( ARInvoiceItemShipmentItems.FK_ARInvoiceItemID = ARInvoiceItems.ARInvoiceItemID
                                                                          AND ARInvoiceItemShipmentItems.AAStatus = ARInvoiceItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ARInvoiceItemShipmentItems.FK_ICShipmentItemID
                                                                    AND ICShipmentItems.AAStatus = ARSaleReturnItemInvoiceItems.AAStatus
                                                                  )
                                INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                              )
                      WHERE     ICReceipts.AAModule IN ( 'SaleReturnReceiptFromSO',
                                                         'SaleReturnReceipt' )
                                AND ICReceiptItems.FK_ICProductID = {0}
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {1}
                                AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) != {1}
                      /*UNION
					            
		              --Nhap kho tra hang tu Xuat kho (hay tu SO)
                      SELECT    ICReceiptItems.ICReceiptItemID ,
                                ICShipmentItems.ICShipmentItemStkQty,
                                ICShipmentItems.ICShipmentItemCostTot,
                                ICShipmentItems.ICShipmentItemFCostTot
                      FROM      dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                               AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                               AND ICReceipts.AAStatus = 'Alive'
                                                             )
                                INNER JOIN dbo.ICReceiptItemShipmentItems ON ( ICReceiptItemShipmentItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                          AND ICReceiptItemShipmentItems.AAStatus = ICReceiptItems.AAStatus
                                                                          )
                                INNER JOIN dbo.ICShipmentItems ON ( ICShipmentItems.ICShipmentItemID = ICReceiptItemShipmentItems.FK_ICShipmentItemID
                                                                    AND ICShipmentItems.AAStatus = ICReceiptItemShipmentItems.AAStatus
                                                                  )
                                INNER JOIN dbo.ICShipments ON ( ICShipments.ICShipmentID = ICShipmentItems.FK_ICShipmentID
                                                                AND ICShipments.AAStatus = ICShipmentItems.AAStatus
                                                              )
                      WHERE     ICReceipts.AAModule IN ( 'SaleReturnReceipt',
                                                         'SaleReturnReceiptFromSO' )
                                AND ICReceiptItems.FK_ICProductID = {0}
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {1}
                                AND YEAR(ICShipments.ICShipmentDate) * 12 + MONTH(ICShipments.ICShipmentDate) != {1}
                    */
                    ) AS TB;

            UPDATE  dbo.ICReceiptItems
            SET     ICReceiptItemUnitCost = b.ICShipmentItemCostTot / b.ICShipmentItemStkQty
                , ICReceiptItemFCostTot = b.ICShipmentItemFCostTot / b.ICShipmentItemStkQty * a.ICReceiptItemStkQty
            FROM dbo.ICReceiptItems a
                INNER JOIN #ReceiptSaleReturnWithShipmentDiffMonth b 
                    ON b.ICReceiptItemID = a.ICReceiptItemID AND b.ICShipmentItemStkQty <> 0

            UPDATE  dbo.ICReceiptItems
            SET     ICReceiptItems.ICReceiptItemCostTot = ROUND(ICReceiptItems.ICReceiptItemUnitCost * ICReceiptItems.ICReceiptItemStkQty, 0)
            WHERE   ICReceiptItems.ICReceiptItemID IN (
                    SELECT  #ReceiptSaleReturnWithShipmentDiffMonth.ICReceiptItemID
                    FROM    #ReceiptSaleReturnWithShipmentDiffMonth );

            "
                , iICProductID, (iPeriod + iYear * 12));

            dal.GetDataSet(strQuery);
        }

        public void UpdateCostTotReceiptItemTraHangTrucTiep(int iICProductID, int iPeriod, int iYear, double dbUnitCost, double dbFUnitCost, bool isGiaVonXuat = false)
        {
            String strQuery = String.Format(@"
            IF ( OBJECT_ID('tempdb..#ReceiptUse') IS NOT NULL )
                DROP TABLE #ReceiptUse;

            --Lay Cac Phieu NK tra hang cua phieu xuat kho cua thang đo ma la tao truc tiep
            SELECT  *
            INTO    #ReceiptUse
            FROM    (
		                --Nhap kho tra hang tao truc tiep khong qua tao tu nao het
                        SELECT  ICReceipts.ICReceiptID
                        FROM    dbo.ICReceiptItems
                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                             AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                             AND ICReceipts.AAStatus = 'Alive'
                                                           )
                        WHERE   ICReceipts.AAModule IN ( 'SaleReturnReceipt', 'SaleReturnReceiptFromSO' )
                                AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {2}
                                /*AND ICReceiptItems.ICReceiptItemID NOT IN (
                                    SELECT  DISTINCT ICReceiptItemShipmentItems.FK_ICReceiptItemID
                                    FROM    dbo.ICReceiptItemShipmentItems
                                    UNION
                                    SELECT  DISTINCT ICReceiptItemSaleReturnItems.FK_ICReceiptItemID
                                    FROM    dbo.ICReceiptItemSaleReturnItems )   */                  
                    ) AS TB;

		            UPDATE  ICReceiptItems
                    SET     ICReceiptItemUnitCost = {0} ,
                            ICReceiptItemCostTot = ROUND({0} * ICReceiptItemStkQty, 0),
                            ICReceiptItemFCostTot = {3} * ICReceiptItemStkQty
                    WHERE   AAStatus = 'Alive'
                            AND FK_ICProductID = {1}
		                    AND FK_ICReceiptID IN (
		                                            SELECT ICReceiptID 
                                                    FROM #ReceiptUse
		                    )

            "
                , dbUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture)
                , iICProductID
                , iPeriod + iYear * 12
                , dbFUnitCost.ToString(System.Globalization.CultureInfo.InvariantCulture));

            dal.GetDataSet(strQuery);
        }
        #endregion

        public ICReceiptItemsInfo LayReceiptItemTheoAssemblyID(int iICProductID, int iICAssemblyID)
        {
            String strQuery = String.Format(@"SELECT dbo.ICReceiptItems.* FROM dbo.ICAssemblys INNER JOIN dbo.ICReceiptItems
                                              ON ICReceiptItems.FK_ICAssemblyID = ICAssemblys.ICAssemblyID
                                              AND ICReceiptItems.AAStatus = ICAssemblys.AAStatus
                                              WHERE ICAssemblys.AAStatus='Alive'
                                              AND FK_ICAssemblyID={1}
                                              AND ICReceiptItems.FK_ICProductID={0}
                                              ", iICProductID, iICAssemblyID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables[0].Rows != null && ds.Tables[0].Rows.Count != 0)
            {
                return (ICReceiptItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        public void GetTotalCostImportByInvoiceItemID(int iAPPInvoiceItemID, ref double dbCostImport, ref double dbFCostImport)
        {
            string strQuery = string.Format(@"SELECT  SUM(ICReceiptItemImportCostAmt), SUM(ICReceiptItemFImportCostAmt)
                                                        FROM    dbo.ICReceiptItems
                                                        WHERE   AAStatus = 'Alive'
                                                                AND ICReceiptItemID IN ( SELECT FK_ICReceiptItemID
                                                                                         FROM   dbo.ICReceiptItemPInvoiceItems
                                                                                         WHERE AAStatus='Alive' AND FK_APPInvoiceItemID = {0} )", iAPPInvoiceItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value)
                    dbCostImport = Convert.ToDouble(ds.Tables[0].Rows[0][0]);

                if (ds.Tables[0].Rows[0][1] != DBNull.Value)
                    dbFCostImport = Convert.ToDouble(ds.Tables[0].Rows[0][1]);
            }
        }

        #region Lay so luong nhap kho tu POItem
        public double GetRcpItemQtyByPOItem(int iAPPOItemID)
        {
            String str = String.Format(@"SELECT  SUM(ICReceiptItemQty)
                                        FROM    dbo.ICReceiptItems
                                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                                                AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                                                AND ICReceipts.AAStatus = 'Alive'
                                                                                )
                                        WHERE   ICReceiptItemID IN (
                                                SELECT  ICReceiptItemID
                                                FROM    dbo.ICReceiptItems
                                                        INNER JOIN dbo.ICReceiptItemPurchaseOrderItems ON ( ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                                                        AND ICReceiptItemPurchaseOrderItems.AAStatus = ICReceiptItems.AAStatus
                                                                                                        AND ICReceiptItems.AAStatus = 'Alive'
                                                                                                        AND ICReceiptItemPurchaseOrderItems.FK_APPOItemID = 0
                                                                                                        )
                                                UNION
                                                SELECT  ICReceiptItemID
                                                FROM    dbo.ICReceiptItems
                                                        INNER JOIN dbo.ICReceiptItemQCItems ON ( ICReceiptItemQCItems.FK_ICReceiptItemID = ICReceiptItems.ICReceiptItemID
                                                                                                    AND ICReceiptItemQCItems.AAStatus = ICReceiptItems.AAStatus
                                                                                                    AND ICReceiptItemQCItems.AAStatus = 'Alive'
                                                                                                )
                                                        INNER JOIN dbo.ICQCItems ON ( ICQCItems.ICQCItemID = ICReceiptItemQCItems.FK_ICQCItemID
                                                                                        AND ICQCItems.AAStatus = ICReceiptItemQCItems.AAStatus
                                                                                    )
                                                        INNER JOIN dbo.ICQCs ON ( ICQCs.ICQCID = ICQCItems.FK_ICQCID
                                                                                    AND ICQCs.AAStatus = ICQCItems.AAStatus
                                                                                )
                                                        INNER JOIN dbo.ICQCItemPOItems ON ( ICQCItemPOItems.FK_ICQCItemID = ICQCItems.ICQCItemID
                                                                                            AND ICQCItemPOItems.AAStatus = ICQCItems.AAStatus
                                                                                            AND ICQCItemPOItems.FK_APPOItemID = 0
                                                                                            ) )
                                        "
                                        , iAPPOItemID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        #endregion

        #region Lấy số lượng kết quả sản xuất cho Lệnh sản xuất, công đoạn, phân xưởng
        public double LaySoLuongKetQuaSanXuatChoLenhSanXuat(int iPPWOID, int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID)
        {
            double dbQty = 0;
            string str = string.Format(@"SELECT  SUM(ICReceiptItemQty)
                                        FROM    dbo.ICReceiptItems
                                        WHERE   AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND ( FK_PPProductionOrdrID IN ( SELECT PPProductionOrdrID
                                                                                    FROM   dbo.PPProductionOrdrs
                                                                                    WHERE  AAStatus = 'Alive'
                                                                                        AND FK_PPWOID = {1}
                                                                                        AND FK_PPPhaseCfgID = {2}
                                                                                        AND FK_PPWorkCenterID = {3} )
                                                        OR FK_ICReceiptID IN (
                                                        SELECT    ICReceiptID
                                                        FROM      dbo.ICReceipts
                                                        WHERE     AAStatus = 'Alive'
                                                                AND FK_PPProductionOrdrID IN (
                                                                SELECT  PPProductionOrdrID
                                                                FROM    dbo.PPProductionOrdrs
                                                                WHERE   AAStatus = 'Alive'
                                                                        AND FK_PPWOID = {1}
                                                                        AND FK_PPPhaseCfgID = {2}
                                                                        AND FK_PPWorkCenterID = {3} ) )
                                                    )", iICProductID, iPPWOID, iPPPhaseCfgID, iPPWorkCenterID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dbQty = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return dbQty;
        }
        #endregion

        public double GetSaleReturnReceiptQty(int iARSOItemID)
        {
            double dSaleReturnReceiptQty = 0;

            string strQuery = string.Format(@"  SELECT SUM (ICReceiptItems.ICReceiptItemQty)
                                                From ICReceipts inner join ICReceiptItems ON ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                Where ICReceipts.AAStatus = 'Alive' AND ICReceiptItems.AAStatus = 'Alive'
                                                      AND ICReceipts.AAModule = 'SaleReturnReceipt'
	                                                  AND ICReceiptItems.FK_ARSOItemID = {0}", iARSOItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dSaleReturnReceiptQty = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return dSaleReturnReceiptQty;
        }

        public DataSet GetAllObjectByReceitpID(int iReceiptID)
        {
            string strQuery = string.Format(@"  select *
                                                from icreceiptItems
                                                Where AAStatus = 'Alive' AND FK_ICREceiptID = {0}", iReceiptID);
            DataSet ds = dal.GetDataSet(strQuery);

            return ds;
        }

        public DataSet GetReceiptByProductAndLotNoAndUOM(int ICProductID, string ICReceiptItemLotNo, int ICUOMID)
        {
            string strQuery = string.Format(@"SELECT SUM(ICReceiptItems.ICReceiptItemCostTot) AS 'CostTot', 
                                                        SUM(ICReceiptItems.ICReceiptItemQty) AS 'Qty'
                                                        FROM dbo.ICReceiptItems 
                                                        WHERE FK_ICProductID = {0} AND ICReceiptItemLotNo = '{1}' 
                                                        AND FK_ICUOMID = {2}", ICProductID, ICReceiptItemLotNo, ICUOMID);
            return GetDataSet(strQuery);
        }

        //Thang add - 10/12/2015 lay receiptitem by pinvoiceitemid
        public ICReceiptItemsInfo GetObjectByPInvoiceItemID(int iPInvoiceItemID, int iReceiptID)
        {
            string strQuery = string.Format(@"SELECT TOP 1 * FROM ICReceiptItems
                                                WHERE ICReceiptItemID IN(SELECT FK_ICReceiptItemID 
                                                                            FROM APPInvoiceItemReceiptItems
                                                                            WHERE FK_APPInvoiceItemID = {0} AND AAStatus = 'Alive') AND AAStatus = 'Alive' AND FK_ICReceiptID = {1}", iPInvoiceItemID, iReceiptID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ICReceiptItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public DataSet GetAllDataByConvertProductFromReceipt(int iReceiptID)
        {
            string strQuery = string.Format(@"IF OBJECT_ID('tempdb..#ViewShp') IS NOT NULL
                                    DROP TABLE #ViewShp
                                IF OBJECT_ID('tempdb..#ViewRcp') IS NOT NULL
                                    DROP TABLE #ViewRcp
                                SELECT *
                                INTO #ViewShp
                                FROM dbo.ICShipmentItems
                                WHERE AAStatus = 'Alive'
                                        AND FK_PPProductionOrdrID > 0

                                SELECT *
                                INTO #ViewRcp
                                FROM ICReceiptItems
                                WHERE AAStatus = 'Alive' AND FK_ICProductParentID = 0 AND FK_ICReceiptID = {0}

                                UPDATE #ViewRcp
                                    SET AASelected = 0,
                                        ICReceiptItemRQty = ICReceiptItemRQty - ISNULL((SELECT ICShipmentItemQty FROM #ViewShp WHERE FK_ICReceiptID = #ViewRcp.FK_ICReceiptID 
                                                AND FK_ICProductID = #ViewRcp.FK_ICProductID AND ICShipmentItemLotNo = #ViewRcp.ICReceiptItemLotNo AND FK_ICReceiptItemID = ICReceiptItemID), 0)
                                SELECT * FROM #ViewRcp WHERE ICReceiptItemRQty > 0", iReceiptID);
            return GetDataSet(strQuery);
        }

        public DataSet GetProductQtyTotFGReceipt_ByPeriod(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"
                                            SELECT  SUM(ICReceiptItemQty) ICReceiptItemQty,
                                                    FK_PPCostCenterID
                                            FROM    dbo.ICReceiptItems
                                            WHERE   FK_ICReceiptID IN ( SELECT  ICReceiptID
                                                                        FROM    dbo.ICReceipts
                                                                        WHERE   MONTH(ICReceiptDate) = '{0}'
                                                                                AND YEAR(ICReceiptDate) = '{1}'
                                                                                AND AAModule = 'FGReceipt'
                                                                                AND AAStatus='Alive'
                                                                        )
                                                                        
                                                    AND AAStatus='Alive'
                                            GROUP BY FK_PPCostCenterID
										
                                            ", iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        #region Lấy thông tin item theo module nhập kho thành phẩm
        public DataSet GetAllDataByAAModuleAndPeriod(string strModuleName, int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"
                                            SELECT  *
                                            FROM    dbo.ICReceiptItems
                                            WHERE   FK_ICReceiptID IN ( SELECT  ICReceiptID
                                                                        FROM    dbo.ICReceipts
                                                                        WHERE   AAModule = '{0}'
                                                                                AND AAStatus = 'Alive'
                                                                                AND MONTH(ICReceiptDate) = '{1}'
                                                                                AND YEAR(ICReceiptDate) = '{2}' )
                                                    AND AAStatus = 'Alive'
                                                    AND FK_PPCostCenterID<>0
                                            ", strModuleName, iPeriod, iYear);
            return GetDataSet(strQuery);
        }

        #region Lấy thông tin item theo module nhập kho thành phẩm và sản phẩm dở dang
        public DataSet GetAllData_ByFGReceipt(int iPeriod, int iYear, int pICProductID = 0)
        {
            string subQuery = string.Empty;
            if (pICProductID > 0)
            {
                subQuery = string.Format(@"
                                             AND FK_ICProductID='{0}'
                                        ", pICProductID);
            }
            string strQuery = string.Format(@"
                                            SELECT  *
                                            FROM    dbo.ICReceiptItems
                                            WHERE   FK_ICReceiptID IN ( SELECT  ICReceiptID
                                                                        FROM    dbo.ICReceipts
                                                                        WHERE   MONTH(ICReceiptDate) = '{0}'
                                                                                AND YEAR(ICReceiptDate) = '{1}'
                                                                                AND AAModule = 'FGReceipt'
                                                                                AND AAStatus='Alive'
                                                                      )
                                                    AND AAStatus='Alive'
                                                    {2}
                                            ", iPeriod, iYear, subQuery);
            return GetDataSet(strQuery);
        }

        #endregion

        #endregion

        #region Lấy giá trị của NVL thừa
        public double GetAmtRMReceipt_ByICProductAndPeriod(int iICProductID, int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"
                                            SELECT  ISNULL(SUM(ICReceiptItemUnitPrice*ICReceiptItemQty),0) ICReceiptItemPrice
                                            FROM    dbo.ICReceiptItems
                                            WHERE   FK_ICReceiptID IN ( SELECT  ICReceiptID
                                                                        FROM    dbo.ICReceipts
                                                                        WHERE   MONTH(ICReceiptDate) = '{1}'
                                                                                AND YEAR(ICReceiptDate) = '{2}'
                                                                                AND AAModule = 'RMReceipts'
                                                                                AND AAStatus = 'Alive' )
                                                    AND FK_ICProductID = '{0}'
		                                            AND AAStatus='Alive'
                                            ", iICProductID, iPeriod, iYear);
            DataSet ds = GetDataSet(strQuery);
            double dAmt = 0;
            if (ds != null && ds.Tables[0].Rows.Count > 0)
            {
                dAmt = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return dAmt;
        }

        #endregion

        #region Update Receipt cost 
        public void UpdateReceiptCostAndSelectIDMainAndICProduct(DateTime dtime)
        {           
            SqlDatabaseHelper.RunStoredProcedure("spl_UpdateReceiptCosting", dtime);
        }
        #endregion

        public DataSet GetallDataByPPProductionOrdrParentID(int iPPProductionOrdrID)
        {
            string strQuery = string.Format(@"  SELECT ICReceiptItems.* 
                                                FROM dbo.ICReceipts
                                                INNER JOIN dbo.ICReceiptItems ON ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID AND dbo.ICReceiptItems.AAStatus = 'Alive'
                                                WHERE dbo.ICReceipts.AAStatus = 'Alive'
		                                                AND ICReceipts.FK_PPProductionOrdrID = {0}", iPPProductionOrdrID);
            return GetDataSet(strQuery);
        }
    }
    #endregion
}