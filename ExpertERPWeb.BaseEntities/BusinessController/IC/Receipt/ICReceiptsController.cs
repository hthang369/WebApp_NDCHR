using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Globalization;


namespace ExpertERP.BusinessEntities
{
	#region ICReceipts
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ICReceiptsController
	//Created Date:Saturday, May 31, 2008
	//-----------------------------------------------------------
	
	public class ICReceiptsController:BaseBusinessController
	{
        public static CultureInfo culture = new CultureInfo("en-US");
		public ICReceiptsController()
		{
			dal= new DALBaseProvider("ICReceipts",typeof(ICReceiptsInfo));
		}
        public DataSet GetDataSetICReceiptsByICProductIDAndFDateTDate(int iCProductID, DateTime dteFDate, DateTime dteTDate)
        {
            DataSet dsICReceipts = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[ICReceipts]WHERE [ICReceiptID] in(SELECT FK_ICReceiptID FROM [dbo].ICReceiptItems WHERE [FK_ICProductID]={0} AND [AAStatus]='{3}')AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iCProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            dsICReceipts = dal.GetDataSet(strQuery);
            if (dsICReceipts != null)
                return dsICReceipts;
            return dsICReceipts;
        }
        public DataSet ListObjectByProductAndFromDateToDate(int iProductID, DateTime dtFromdate, DateTime dtTodate)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[ICReceipts] {0}", GenerateCondition(iProductID, dtFromdate, dtTodate));
            return (DataSet)dal.GetDataSet(strQuery);


        }
        private String GenerateCondition(int iProductID, DateTime dtFromdate, DateTime dtTodate)
        {
            return String.Format("WHERE [ICReceiptID] IN (SELECT [FK_ICReceiptID] FROM [dbo].[ICReceiptItems] WHERE [FK_ICProductID]={0} AND [AAStatus]='{3}') AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iProductID, dtFromdate.ToString("yyyyMMdd"), dtTodate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
        }

        public DataSet GetAllReceiptWithWO_InPeriod(int iPeriod, int iYear)
        {
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT * FROM ICReceipts WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ICReceiptDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ICReceiptDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND FK_PPWOID > 0");
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }
		public double GetAllReceiptWithWO_InPeriod(int iPeriod, int iYear,int WOIDs)
        {
            double result = 0.0;
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT sum(ICReceiptItmAmtTot) FROM ICReceipts WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ICReceiptDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ICReceiptDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND FK_PPWOID = {0}", WOIDs);
            DataSet ds = dal.GetDataSet(query);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotalCostWithWO_InPeriod(int iPeriod, int iYear)
        {
            double result = 0.0;
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT sum(ICReceiptItmAmtTot) FROM ICReceipts WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ICReceiptDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ICReceiptDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND FK_PPWOID > 0");
            DataSet ds = dal.GetDataSet(query);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public DataSet GetAllReceiptGroupByWO_InPeriod(int iPeriod, int iYear)
        {
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT sum(ICReceiptItmAmtTot),FK_PPWOID  FROM ICReceipts WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ICReceiptDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ICReceiptDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            query += String.Format("AND FK_PPWOID > 0 group by FK_PPWOID");
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        public DataSet GetAllReceiptInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM ICReceipts 
                                                    WHERE AAStatus = 'Alive'
                                                    AND MONTH(ICReceiptDate) = {0} 
                                                    AND YEAR(ICReceiptDate) = {1}", iPeriod, iYear);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllReceipt_InPeriod(int iPeriod, int iYear,string status)
        {
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT * FROM ICReceipts WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND ICReceiptDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND ICReceiptDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            DataSet ds = dal.GetDataSet(query + string.Format(" and (AAPostStatus is Null or AAPostStatus = N'{0}')", status));
            return ds;
        }

        public DataSet GetAllReceiptByType(String strType)
        {
            String strQuery = String.Format("SELECT * FROM ICReceipts WHERE AAStatus = 'Alive' AND ICReceiptSubType = N'{0}'", strType);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetReceiptsByFromDateToDate(DateTime fromDate, DateTime toDate)
        {
            String strDate = DALUtil.GenerateBeetween("ICReceiptDate", fromDate, toDate);
            string query = String.Format("SELECT * FROM ICReceipts WHERE AAStatus = 'Alive' AND {0}",strDate);
            
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        public DataSet GetDataSetARSOsByYearMonthAndFK_SupplierID(int year, int month, int FK_SupplierID)
        {
            string str = string.Format(@"SELECT * FROM dbo.ICReceipts WHERE AAStatus='Alive' AND
                                YEAR(ICReceiptDate)={0} AND MONTH(ICReceiptDate)={1} AND FK_APSupplierID={2}", year, month, FK_SupplierID);
            return dal.GetDataSet(str);
        }

        #region Get All Amt Cost By From Date To Date AND Supplier --Vinh -- 17/08/2012

        public DataSet GetAllAmtByFromDateToDateANDSupplier(int iSupplier, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ICReceiptDate) AS Year, MONTH(ICReceiptDate) AS Month, APSupplierGroupID, SUM(dbo.ICReceiptItems.ICReceiptItemAmtTot) AS Amt
                                        FROM dbo.ICReceipts INNER JOIN dbo.ICReceiptItems ON ICReceiptID = FK_ICReceiptID INNER JOIN dbo.APSuppliers ON dbo.ICReceipts.FK_APSupplierID=dbo.APSuppliers.APSupplierID INNER JOIN dbo.APSupplierGroups ON dbo.APSuppliers.FK_APSupplierGroupID=dbo.APSupplierGroups.APSupplierGroupID
                                        WHERE dbo.ICReceipts.AAStatus='Alive' AND dbo.ICReceiptItems.AAStatus='Alive' AND dbo.APSuppliers.AAStatus='Alive' AND dbo.APSupplierGroups.AAStatus='Alive'
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplier != 0)
            {
                str += String.Format(@" AND dbo.ICReceipts.FK_APSupplierID={0}", iSupplier);
            }
            str += String.Format(@"GROUP BY YEAR(ICReceiptDate), MONTH(ICReceiptDate), APSupplierGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All ICReceipt By FromDate ToDate AND Supplier --Vinh --20/08/2012

        public DataSet GetAllICReceiptByFromDateToDateANDSupplier(int iSupplierGroupID, int iSupplierID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.ICReceipts
                                        WHERE dbo.ICReceipts.AAStatus='Alive'
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplierID != 0)
            {
                str += String.Format(@" AND dbo.ICReceipts.FK_APSupplierID={0}", iSupplierID);
            }
            if (iSupplierGroupID != 0)
            {
                str += String.Format(@" AND dbo.ICReceipts.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID = {0})", iSupplierGroupID);
            }
            else if (iSupplierGroupID == 0)
            {
                str += String.Format(@" AND dbo.ICReceipts.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID <> 0)");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Price Cost By From Date To Date AND Product --Vinh -- 26/10/2012

        public DataSet GetAllPriceCostByFromDateToDateANDProduct(int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(ICReceiptDate) AS Year, MONTH(ICReceiptDate) AS Month, ICProductGroupID, SUM(dbo.ICReceiptItems.ICReceiptItemCostTot) AS CostTot
                                        FROM dbo.ICReceipts INNER JOIN dbo.ICReceiptItems ON ICReceiptID = FK_ICReceiptID INNER JOIN dbo.ICProducts ON dbo.ICReceiptItems.FK_ICProductID=dbo.ICProducts.ICProductID INNER JOIN dbo.ICProductGroups ON dbo.ICProducts.FK_ICProductGroupID=dbo.ICProductGroups.ICProductGroupID
                                        WHERE dbo.ICReceipts.AAStatus='Alive' AND dbo.ICReceiptItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(ICReceiptDate) * 12 +MONTH(ICReceiptDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.ICReceiptItems.FK_ICProductID={0}", iProductID);
            }
            str += String.Format(@" AND dbo.ICReceiptItems.FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True')");
            str += String.Format(@"GROUP BY YEAR(ICReceiptDate), MONTH(ICReceiptDate), ICProductGroupID");
            return dal.GetDataSet(str);
        }
        #endregion

        #region Giá Thành M?i
        public DataSet GetAllReceiptInPeriodNotInCostCenterActive(int iYear, int iPeriod)
        {
            String strQuery = String.Format(@"  SELECT  *
                                                FROM    dbo.ICReceipts
                                                        INNER JOIN dbo.ICReceiptItems ON ( ICReceiptItems.FK_ICReceiptID = ICReceipts.ICReceiptID
                                                                                            AND ICReceiptItems.AAStatus = ICReceipts.AAStatus
                                                                                            AND ICReceipts.AAStatus = 'Alive'											
                                                                                            AND YEAR(ICReceiptDate) = {0}
                                                                                            AND MONTH(ICReceiptDate) = {1}
                                                                                            AND FK_PPCostCenterID NOT IN (
																		                                                SELECT  FK_PPCostCenterID
																		                                                FROM    dbo.PPProductionCostCenterActives
																		                                                WHERE   PPYear = {0}
																				                                                AND PPPeriod = {1} )
                                                                                          )
                                                ", iYear, iPeriod);

            return dal.GetDataSet(strQuery);
        }
        public DataSet LayTatCaNhapKhoTraHangCuaSanPhamTrongThang(int iICProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(culture, @"

            SELECT * 
            FROM dbo.ICReceipts
            WHERE ICReceipts.AAStatus = 'Alive'
            AND ICReceipts.ICReceiptID IN (
                                SELECT  DISTINCT ICReceipts.ICReceiptID
                                FROM    dbo.ICReceiptItems
                                        INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                                      AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                                      AND ICReceipts.AAStatus = 'Alive'
                                                                      )
                                WHERE   ICReceipts.AAModule IN ( 'SaleReturnReceiptFromSO', 'SaleReturnReceipt' )
                                        AND ICReceiptItems.FK_ICProductID = {0}
                                        AND YEAR(ICReceipts.ICReceiptDate) * 12 + MONTH(ICReceipts.ICReceiptDate) = {1}
            )
            "
                , iICProductID, iPeriod + iYear * 12);

            return dal.GetDataSet(strQuery);
        }
        #endregion

        public bool GetObjectICReceitpsInfo(int ICReceiptID)
        {
            string str = string.Format(@" SELECT *
                                          FROM dbo.ICReceiptItems
                                          WHERE AAStatus = 'Alive'
                                                AND FK_ICReceiptID = {0}
                                                AND ICReceiptItemRQty > 0", ICReceiptID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //Thang add - 10/12/2015 lấy Receipt từ PinvoiceID
        public DataSet GetReceiptByPInvoiceID(int iPInvoiceID, string sReceiptNo, string moduleName = "PInvoiceReceipt")
        {
            string strQuery = string.Format(@"  SELECT TOP 1 * FROM ICReceipts 
                                                WHERE ICReceiptID IN (SELECT FK_ICReceiptID FROM APPInvoiceReceipts
                                                                        WHERE FK_APPInvoiceID = {0} AND AAStatus = 'Alive') AND AAStatus = 'Alive' AND AAModule = '{1}'", iPInvoiceID, moduleName);
            DataSet ds = GetDataSet(strQuery);
            if(ds==null||ds.Tables.Count == 0||ds.Tables[0].Rows.Count == 0)
            {
                strQuery = string.Format("SELECT TOP 1 * FROM ICReceipts WHERE AAStatus = 'Alive' AND ICReceiptNo = '{0}' AND AAModule = '{1}'", sReceiptNo, moduleName);
                ds = GetDataSet(strQuery);
            }
            return ds;
        }
        //Thang add - 11/12/2015
        public DataSet GetAllObjectByPInvoiceIDAndModule(int iPInvoiceID, string moduleName = "PurchaseCost")
        {
            string strQuery = string.Format(@"SELECT * FROM ICReceipts 
                                                WHERE AAStatus = 'Alive' AND AAModule = '{0}' AND
                                                ICReceiptID IN(SELECT FK_ICReceiptID FROM APPInvoiceReceipts
                                                WHERE FK_APPInvoiceID = {1} AND AAStatus = 'Alive')", moduleName, iPInvoiceID);
            return GetDataSet(strQuery);
        }

        //(Thang add - 18/1/2016
        public DataSet GetAllPurchaseCostByPOID(int iPOID, string strType, int isAllocate = -1)
        {
            string strAllocate = (isAllocate == -1) ? "" : string.Format("AND ICReceiptAutoAllocateCheck = {0}", isAllocate);
            string strQuery = string.Format(@"SELECT * FROM ICReceipts 
                                                WHERE AAModule = 'PurchaseCost' AND AAStatus = 'Alive'
                                                AND FK_APPOID = {0} AND ICReceiptPurchaseCostTypeCombo = '{1}' {2}", iPOID, strType, strAllocate);
            return GetDataSet(strQuery);
        }
        //)
        public DataSet GetAllConvertProductFromReceipt(string strSubQuery)
        {
            string strQuery = string.Format(@"--IF OBJECT_ID('tempdb..#ViewShp') IS NOT NULL
                                --    DROP TABLE #ViewShp
                                --IF OBJECT_ID('tempdb..#ViewRcp') IS NOT NULL
                                --    DROP TABLE #ViewRcp
                                IF OBJECT_ID('tempdb..#ViewMain') IS NOT NULL
                                    DROP TABLE #ViewMain
                                -- SELECT *
                                -- INTO #ViewShp
                                -- FROM dbo.ICShipmentItems
                                -- WHERE AAStatus = 'Alive'
                                        -- AND FK_PPProductionOrdrID > 0

                                {0}

                                --SELECT *
                                --INTO #ViewRcp
                                --FROM ICReceiptItems
                                --WHERE AAStatus = 'Alive'
                                --   AND FK_ICReceiptID IN(SELECT ICReceiptID FROM #ViewMain)

                                --UPDATE #ViewRcp
                                --    SET ICReceiptItemRQty = ICReceiptItemRQty - ISNULL((SELECT SUM(ICShipmentItemQty) AS ICShipmentItemQty  FROM #ViewShp WHERE FK_ICReceiptID = #ViewRcp.FK_ICReceiptID 
                                --                AND FK_ICProductID = #ViewRcp.FK_ICProductID AND ICReceiptItemID = FK_ICReceiptItemID), 0)

                                UPDATE #ViewMain SET AASelected = 0
                                
                                SELECT * FROM #ViewMain
                                WHERE ICReceiptID IN(SELECT FK_ICReceiptID FROM ICReceiptItems WHERE AAStatus = 'Alive')", strSubQuery.Replace("FROM","INTO #ViewMain FROM"));
            return GetDataSet(strQuery);
        }
    }
    #endregion
}