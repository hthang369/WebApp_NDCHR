using System;
using System.Data;
using System.Text;
using System.Collections.Generic;

using ExpertWebLib;


namespace ExpertERP.BusinessEntities
{
	#region ICInventoryStockSerials
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ICInventoryStockSerialsController
	//Created Date:Wednesday, July 16, 2008
	//-----------------------------------------------------------
	
	public class ICInventoryStockSerialsController:BaseBusinessController
	{
        private readonly string spGetInventoryStockSerialByProductAndProductSerialNoAndStock =
                                "ICInventoryStockSerials_SelectByProductAndProductSerialNoAndStock";

		public ICInventoryStockSerialsController()
		{
			dal= new DALBaseProvider("ICInventoryStockSerials",typeof(ICInventoryStockSerialsInfo));
		}

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductAndProductSerialNoAndStock(int iProductID, String strProductSerialNo, int iStockID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject(spGetInventoryStockSerialByProductAndProductSerialNoAndStock, iProductID, strProductSerialNo, iStockID);
        }

        public DataSet GetInventoryStockSerialsByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByProductSerialNoAndStockID", strProductSerialNo, iStockID);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductSerialNoAndStockID(String strProductSerialNo, int iStockID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductSerialNoAndStockID", strProductSerialNo, iStockID);
        }

        public DataSet GetInventoryStockSerialsByProductSerialNo(String strProductSerialNo)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByProductSerialNo", strProductSerialNo);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductSerialNo(String strProductSerialNo)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductSerialNo", strProductSerialNo);
        }

        public DataSet GetInventoryStockSerialsByProductID(int iProductID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByFK_ICProductID", iProductID);
        }

        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductID(int iProductID)
        {
            return (ICInventoryStockSerialsInfo)dal.GetDataObject("ICInventoryStockSerials_SelectByProductID", iProductID);
        }

        public DataSet GetInventoryStockSerialsByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetInventoryStockSerialsByProductID(iProductID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICInventoryStockSerialsInfo objInventoryStockSerialsInfo = (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objInventoryStockSerialsInfo != null)
                        if (objInventoryStockSerialsInfo.FK_ICStockID != iStockID)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }
        public DataSet GetInventoryStockSerialsByFK_ICProductIDAndFK_ICStockID(int iProductID, int iStockID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectByFK_ICProductIDAndFK_ICStockID", iProductID, iStockID);
        }
        public ICInventoryStockSerialsInfo GetInventoryStockSerialByProductIDAndStockID(int iProductID, int iStockID)
        {
            DataSet ds = GetInventoryStockSerialsByProductIDAndStockID(iProductID, iStockID);
            if (ds.Tables.Count > 0)
                return (ICInventoryStockSerialsInfo)dal.GetSingleObject(ds.Tables[0]);
            return null;
        }

        public DataSet GetInventoryStockSerialByFK_ICStockID_AndPositiveQuantity(int iStockID)
        {
            DataSet ds = dal.GetDataSet("ICInventoryStockSerials_SelectByFK_ICStockID", iStockID);
            if (ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    ICInventoryStockSerialsInfo objInventoryStockSerialsInfo = (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[i]);
                    if (objInventoryStockSerialsInfo != null)
                        if (objInventoryStockSerialsInfo.ICInventoryStockSerialQuantity <= 0)
                        {
                            ds.Tables[0].Rows.RemoveAt(i);
                            i--;
                        }
                }
            }
            return ds;
        }
        /// <summary>
        /// hoang.nguyen Added 09.11.25
        /// </summary>
        /// <param name="iBRBranchID"></param>
        /// <returns></returns>
        public DataSet GetDataSetICInventoryStockSerials_SelectAllByBRBranchIDForFK_ICStocks(int iBRBranchID)
        {
            return dal.GetDataSet("ICInventoryStockSerials_SelectAllByBRBranchIDForFK_ICStocks", iBRBranchID);
        }

        public void PermenentDeleteAllByICInventoryStockID(int iICInventoryStockID)
        {
            String strQuery = String.Format("DELETE FROM ICInventoryStockSerials where FK_ICInventoryStockID = '{0}'", iICInventoryStockID);
            dal.GetDataSet(strQuery);
        }

        //Phuong. Add
        public ICInventoryStockSerialsInfo GetObjectBySerial(String strSerial)
        {
            String strQuery = String.Format(@"SELECT * FROM ICInventoryStockSerials WHERE AAStatus = 'Alive' AND ICInventoryStockSerialQuantity > 0 AND ICInventoryStockSerialProductSerialNo = '{0}'", strSerial);

            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count == 1)
                return (ICInventoryStockSerialsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
	}
	#endregion
}