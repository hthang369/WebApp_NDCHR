using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPOutSourcingCalendars
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:PPOutSourcingCalendarsController
	//Created Date:Thursday, August 28, 2014
	//-----------------------------------------------------------
	
	public class PPOutSourcingCalendarsController:BaseBusinessController
	{
		public PPOutSourcingCalendarsController()
		{
			dal= new DALBaseProvider("PPOutSourcingCalendars",typeof(PPOutSourcingCalendarsInfo));
		}

        public double GetAllDataByProductANDPhaseCfgANDWorkCenter(int iICProductID, int iPPPhaseCfgID, int iPPWorkCenterID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"   SELECT  SUM(PPOutSourcingCalendarQty)
                                            FROM    dbo.PPOutSourcingCalendars
                                            WHERE AAStatus = 'Alive'
                                            AND FK_ICProductID = {0}
                                            AND FK_PPPhaseCfgID = {1}
                                            AND FK_PPWorkCenterID = {2}
                                            AND CONVERT(VARCHAR, PPOutSourcingCalendarFODate, 112) >= '{3}'
                                            AND CONVERT(VARCHAR, PPOutSourcingCalendarFODate, 112) <= '{4}'"
                                        , iICProductID, iPPPhaseCfgID, iPPWorkCenterID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public DataSet GetAllDataExistQty()
        {
            String str = String.Format(@"   SELECT  *
                                            FROM    dbo.PPOutSourcingCalendars
                                            WHERE AAStatus = 'Alive'
                                            AND PPOutSourcingCalendarQty > 0"
                                        );
            return dal.GetDataSet(str);
        }

        public DataSet GetAllObjectByFODate(DateTime dteFODate)
        {
            string strQueryDate = DALUtil.GennerateCondition("PPOutSourcingCalendarFODate", CompareType.Equal, dteFODate);
            string strQuery = string.Format(@"  SELECT  *
                                                FROM    dbo.PPOutSourcingCalendars
                                                WHERE AAStatus = 'Alive'
                                                AND {0}"
                                            , strQueryDate);
            return dal.GetDataSet(strQuery);
        }

        public PPOutSourcingCalendarsInfo GetObjectByProductFODatePhaseWorkCenter(int iICProductID, DateTime dteFODate, int iPPPhaseCfgID, int iPPWorkCenterID)
        {
            string strQueryDate = DALUtil.GennerateCondition("PPOutSourcingCalendarFODate", CompareType.Equal, dteFODate);
            string strQuery = string.Format(@"select * from PPOutSourcingCalendars where AAStatus='Alive' AND FK_ICProductID={0}
                                                AND FK_PPPhaseCfgID={1} AND FK_PPWorkCenterID={2} AND {3}", iICProductID, iPPPhaseCfgID, iPPWorkCenterID, strQueryDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPOutSourcingCalendarsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
	}
	#endregion
}