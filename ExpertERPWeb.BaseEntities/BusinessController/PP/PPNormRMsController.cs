using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPNormRMs
	//-----------------------------------------------------------
	//Generated By: Expert Studio
	//Class:PPNormRMsController
	//Created Date:Monday, September 26, 2011
	//-----------------------------------------------------------
	
	
	public class PPNormRMsController:BaseBusinessController
	{
		public PPNormRMsController()
		{
			dal= new DALBaseProvider("PPNormRMs",typeof(PPNormRMsInfo));
		}
        public double GetNormRMQtyByRMAndFinishGood(int iICRMProductID, int iICFGProductID)
        {
            double dbQty = 0;
            String strQuery = String.Format("Select * From [PPNormRMs] WHERE ([FK_ICProductID]={0}) AND ([FK_PPNormID] IN (Select [PPNormID] From [PPNorms] Where [FK_ICProductID]={1} AND [AAStatus]='Alive'))", iICRMProductID, iICFGProductID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    PPNormRMsInfo objPPNormRMsinfo = (PPNormRMsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
                    dbQty = objPPNormRMsinfo.PPNormRMQty;
                }
            }

            return dbQty;
        }

        public PPNormRMsInfo GetNormRMByRMAndPhaseAndFG(int iICRMProductID, int iPPPhaseCfgID, int iICFGProductID)
        {
            String strQuery = String.Format("Select * From [PPNormRMs] WHERE ([FK_ICProductID]={0}) AND ([FK_PPNormID] IN (Select [PPNormID] From [PPNorms] Where [FK_ICProductID]={1} AND [AAStatus]='Alive')) AND [FK_PPPhaseCfgID]={2}", iICRMProductID, iICFGProductID,iPPPhaseCfgID);
            DataSet ds = GetDataSet(strQuery);
            if (ds.Tables[0].Rows.Count > 0)
            {
                return (PPNormRMsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }

        public double GetNormRMQtyByFGGoodNo(string strProductFGNo)
        {
            string strQuery = string.Format(@"Select top 1 PPNormRMQty from PPNormRMs where  FK_PPNormID in (Select PPNormID from PPNorms where AAStatus='Alive')
                                                    AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' and ICProductNo='{0}')", strProductFGNo);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllDataByFinishGood(int iFGProductID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where  FK_PPNormID in (
                                                        select PPNormID from PPNorms where AAStatus='Alive' and FK_ICProductID={0})", iFGProductID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataByFinishGoodAndPhaseCfg(int iFGProductID, int iPhaseCfgID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where  FK_PPNormID in (
                                                        select PPNormID from PPNorms where AAStatus='Alive' and FK_ICProductID={0}) AND (FK_PPPhaseCfgID={1} OR 0={1})", iFGProductID, iPhaseCfgID);
            return dal.GetDataSet(strQuery);
        }

        public PPNormRMsInfo GetNormRMByNormAndProductType(int iNormID, int iProductTypeID)
        {
            string strQuery = string.Format(@"Select top 1 * from PPNormRMs where FK_PPNormID={0}
                                            AND FK_ICProductID in (select ICProductID from ICProducts Where AAStatus='Alive' AND FK_ICProductTypeID={1})", iNormID, iProductTypeID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPNormRMsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public PPNormRMsInfo GetObjectByProductRMNo(string strProductRMNo)
        {
            string strQuery = string.Format(@"Select top 1 * from PPNormRMs where  FK_PPNormID in (Select PPNormID from PPNorms where AAStatus='Alive')
                                                    AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' and ICProductNo='{0}')", strProductRMNo);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPNormRMsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public DataSet GetNormRMLevel2ByFGProduct(int iFGProductID)
        {
            string strQuery = string.Format(@"select * from PPNormRMs where
                        FK_PPNormID in (select PPNormID from PPNorms where FK_ICProductID in
                         (Select FK_ICProductID from PPNormRMs where FK_PPNormID in 
                         (Select PPNormID from PPNorms where AAStatus='Alive' AND FK_ICProductID={0})))
                        ", iFGProductID);
            return dal.GetDataSet(strQuery);
        }

        public PPNormRMsInfo GetNormRMByFGAndProductType(int iFGProductID, int iProductTypeID)
        {
            string strQuery = string.Format(@"Select top 1 * from PPNormRMs where FK_PPNormID in (select PPNormID from PPNorms where AAStatus='Alive' AND FK_ICProductID={0})
                                            AND FK_ICProductID in (select ICProductID from ICProducts Where AAStatus='Alive' AND FK_ICProductTypeID={1})", iFGProductID, iProductTypeID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPNormRMsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public DataSet GetAllDataByFGAndProductType(int iFGProductID, int iProductTypeID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID in (select PPNormID from PPNorms where FK_ICProductID={0} AND AAStatus='Alive')
                                            AND FK_ICProductID in (select ICProductID from ICProducts Where AAStatus='Alive' AND FK_ICProductTypeID={1})", iFGProductID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetNormRMLevel2ByFGProductAndProductType(int iFGProductID, int iProductTypeID)
        {
            string strQuery = string.Format(@"select PPNormRMs.PPNormRMQty*NormRMLevel2.PPNormRMQty as PPNormRMQty,NormRMLevel2.* from PPNorms 
			                                inner join PPNormRMs on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
			                                inner join PPNorms as NormLevel2 on NormLevel2.FK_ICProductID=PPNormRMs.FK_ICProductID
			                                inner join PPNormRMs as NormRMLevel2 on NormLevel2.PPNormID=NormRMLevel2.FK_PPNormID
			                                inner join ICProducts  on ICProducts.ICProductID=NormRMLevel2.FK_ICProductID
			                                where PPNorms.FK_ICProductID={0} AND FK_ICProductTypeID={1} AND PPNorms.AAStatus='Alive' AND NormLevel2.AAStatus='Alive'
                        ", iFGProductID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }

        public bool CheckExistNormRMByNormIDAndProductNo(int iNormID,int iProductID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID={0} AND FK_ICProductID ={1}", iNormID, iProductID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;
        }
        public PPNormRMsInfo GetObjectByNormIDAndProductNo(int iNormID, int iProductID)
        {

            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID={0} AND FK_ICProductID ={1}", iNormID, iProductID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPNormRMsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public DataSet GetAllDataByFGAndProductGroup(int iFGProductID, int iProductGroupID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID in (select PPNormID from PPNorms where FK_ICProductID={0} AND AAStatus='Alive')
                                            AND FK_ICProductID in (select ICProductID from ICProducts Where AAStatus='Alive' AND FK_ICProductGroupID={1})", iFGProductID, iProductGroupID);
            return dal.GetDataSet(strQuery);
        }

        public PPNormRMsInfo GetMajorMaterialIDByProduct(string FGProductNo)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs INNER JOIN PPNorms ON  PPNorms.PPNormID = PPNormRMs.FK_PPNormID where PPNorms.AAStatus='Alive' AND PPNorms.FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductNo ='{0}') AND PPNormRMs.PPNormRMIsMajorMaterial = 1", FGProductNo);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (PPNormRMsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null ;
        }

        public DataSet GetAllDataByPhaseCfgNoAndNorm(string strPhaseCfgNo,int iNormID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID ={1}
                                            AND FK_PPPhaseCfgID IN (SELECT PPPhaseCfgID FROM PPPhaseCfgs WHERE AAStatus='Alive' AND (PPPhaseCfgNo='{0}' OR ''='{0}'))", strPhaseCfgNo, iNormID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataByFGProductTypeGroupAndPhaseCfg(int iFGProductID, int iProductTypeID,int iProductGroupID,int iPPPhaseCfgID)
        {
            string strQuery = string.Format(@"Select * from PPNormRMs where FK_PPNormID in (select PPNormID from PPNorms where FK_ICProductID={0} AND AAStatus='Alive')
                                            AND FK_ICProductID in (select ICProductID from ICProducts Where AAStatus='Alive' AND (FK_ICProductTypeID={1} or {1}=0)
                                                                AND (FK_ICProductGroupID={2} or {2}=0) AND (FK_PPPhaseCfgID={3} or {3}=0))"
                                                    , iFGProductID, iProductTypeID, iProductGroupID, iPPPhaseCfgID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataLastByFinishGoodANDCustomer(int iFGProductID, int iARCustomerID)
        {
            string strQuery = string.Format(@"  SELECT * FROM PPNormRMs 
                                                WHERE FK_PPNormID IN (
                                                                        SELECT TOP 1 PPNormID FROM PPNorms 
                                                                        WHERE AAStatus = 'Alive' 
                                                                        AND FK_ICProductID = {0}
                                                                        AND FK_ARCustomerID = {1}
                                                                        ORDER BY PPNormID DESC
                                                                    )
                                                ", iFGProductID, iARCustomerID);
            return dal.GetDataSet(strQuery);
        }

        #region Lấy tất cả định mức của sản phẩm theo KH --Vinh

        public DataSet GetLastAllDataByFGProduct(int iICProductFGID)
        {
            String str = String.Format(@"   SELECT * FROM dbo.PPNormRMs
                                            WHERE FK_PPNormID IN (
						                                            SELECT TOP 1 PPNormID FROM dbo.PPNorms
						                                            WHERE AAStatus = 'Alive'
						                                            AND FK_ICProductID = {0}
						                                            ORDER BY PPNormID DESC
					                                             )", iICProductFGID);
            return dal.GetDataSet(str);
        }

        #endregion

        /// <summary>
        /// Viet Nguyen 2014.07.14
        /// Get NormRM By Finish Goods and Revision
        /// </summary>
        /// <param name="iICProductFGID"></param>
        /// <returns></returns>
        public DataSet GetAllDataByFGProductAndRevision(int iICProductFGID,string strRevision)
        {
            String str = String.Format(@"   SELECT * FROM dbo.PPNormRMs
                                            WHERE AAStatus='Alive' AND FK_PPNormID IN (
						                                            SELECT TOP 1 PPNormID FROM dbo.PPNorms
						                                            WHERE AAStatus = 'Alive' AND PPNormRevision like '{1}'
						                                            AND FK_ICProductID = {0}
						                                            ORDER BY PPNormActiveCheck DESC
					                                             )", iICProductFGID, strRevision);
            return dal.GetDataSet(str);
        }

        #region Lấy tất cả định mức của sản phẩm theo Routing --Vinh

        public DataSet GetLastAllDataByFGProductANDRouting(int iICProductFGID, int iPPRoutingID)
        {
            String str = String.Format(@"   SELECT NormRM.* FROM dbo.PPNormRMs NormRM
                                            INNER JOIN dbo.PPNorms Norm ON Norm.PPNormID = NormRM.FK_PPNormID
                                            INNER JOIN dbo.PPRoutings Routing ON Routing.PPRoutingNormRevision = Norm.PPNormRevision
                                            WHERE Routing.AAStatus = 'Alive' AND Norm.AAStatus = 'Alive' AND NormRM.AAStatus = 'Alive'
                                            AND Routing.PPRoutingID = {0}
                                            AND Norm.FK_ICProductID = {1}"
                                        , iPPRoutingID, iICProductFGID);
            return dal.GetDataSet(str);
        }

        #endregion

        #region Lấy tất cả định mức của sản phẩm theo KH --Vinh

        public DataSet GetAllDataByFGProductANDCustomer(int iICProductFGID, int iARCustomerID)
        {
            String str = String.Format(@"   SELECT * FROM dbo.PPNormRMs
                                            WHERE FK_PPNormID IN (
						                                            SELECT PPNormID FROM dbo.PPNorms
						                                            WHERE AAStatus = 'Alive'
						                                            AND FK_ICProductID = {0}
						                                            AND (FK_ARCustomerID = {1} OR {1} = 0)
					                                             )", iICProductFGID, iARCustomerID);
            return dal.GetDataSet(str);
        }

        #endregion
        public DataSet GetAllDataByFGProductAndConditionMajorMaterial(int iICProduct, Boolean IsMajorMaterial)
        {
            String str = String.Format(@"   SELECT PPNormRMs.*
                                            FROM dbo.PPNormRMs
                                                INNER JOIN dbo.PPNorms ON PPNorms.PPNormID = PPNormRMs.FK_PPNormID AND dbo.PPNorms.AAStatus = 'Alive'
                                            WHERE   PPNormRMs.AAStatus='Alive'
	                                                AND PPNorms.PPNormActiveCheck = 'true'
	                                                AND dbo.PPNormRMs.PPNormRMIsMajorMaterial = '{1}'
													AND PPNorms.FK_ICProductID = {0}", iICProduct, IsMajorMaterial);
            return dal.GetDataSet(str);
        }
        public DataSet GetDetailNormByProductANDRevision(int iProductID, string sRevision)
        {
            return SqlDatabaseHelper.RunStoredProcedure("GetDetailNormByProductANDRevision", iProductID, sRevision);
        }
    }
	#endregion
}