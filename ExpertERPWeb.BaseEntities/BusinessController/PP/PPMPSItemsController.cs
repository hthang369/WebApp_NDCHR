using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
    #region PPMPSItems
    //-----------------------------------------------------------
    //Generated By: Expert Studio
    //Class:PPMPSItemsController
    //Created Date:01 Tháng Tám 2014
    //-----------------------------------------------------------

	public class PPMPSItemsController:BaseBusinessController
    {
        public PPMPSItemsController()
        {
			dal= new DALBaseProvider("PPMPSItems",typeof(PPMPSItemsInfo));
        }
        public DataSet GetAllMPSItemByMPSIDAndLevel(int iMPSID, int iFromLevel, int iToLevel)
        {
            string strQuery = string.Format(@"Select * from PPMPSItems where AAStatus='Alive' AND FK_PPMPSID={0} And 
                                                    PPMPSItemLevel>={1} and PPMPSItemLevel<={2}", iMPSID, iFromLevel, iToLevel);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllMPSItemByPhaseWorkCenter(int iMPSID, int PPPhaseCfgID, int PPWorkCenterID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPMPSItemFODate", dteFromDate, dteToDate);
            string strQueryPhase = string.Empty;
            if (PPPhaseCfgID > 0 || PPWorkCenterID > 0)
                strQueryPhase = string.Format(@" AND FK_PPRoutingID in (Select FK_PPRoutingID FROM PPRoutingOperations where AAStatus='Alive' 
                                                                                        AND (FK_PPPhaseCfgID={0} or {0}=0)
                                                                                        AND (FK_PPWorkCenterID={1} or {1}=0))", PPPhaseCfgID, PPWorkCenterID);
            string strQuery = string.Format(@"Select * from PPMPSItems where AAStatus='Alive' AND FK_PPMPSID={0} {1} AND {2}", iMPSID, strQueryPhase, strQueryDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataByMPSProductInRange(int iMPSID, int FK_ICProductID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPMPSItemFODate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select * from PPMPSItems where AAStatus='Alive' AND (FK_PPMPSID={0} or {0}=0)
                                                AND (FK_ICProductID={1} or {1}=0) AND {2}
                                                    ", iMPSID, FK_ICProductID, strQueryDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllMPSItemByPhaseWorkCenterInRange(int iMPSID, int PPPhaseCfgID, int PPWorkCenterID,DateTime dteFromDate,DateTime dteToDate)
        {
            string strQueryDate = string.Empty;
            strQueryDate = DALUtil.GenerateBeetween("PPMPSItemFODate", dteFromDate, dteToDate);

            string strQueryPhase = string.Empty;
            string strQuery = string.Format(@"SELECT  PPRoutingOperations.FK_PPPhaseCfgID ,
                                                    PPRoutingOperations.FK_PPWorkCenterID ,
                                                    PPMPSItems.*
                                            FROM    PPMPSItems
                                                    INNER JOIN dbo.PPRoutingOperations ON dbo.PPRoutingOperations.FK_PPRoutingID = dbo.PPMPSItems.FK_PPRoutingID
                                            where PPMPSItems.AAStatus='Alive' AND PPRoutingOperations.AAStatus='Alive' AND FK_PPMPSID={0} AND {1}
                                                    AND (PPRoutingOperations.FK_PPPhaseCfgID={2} or {2}=0)
                                                    AND (PPRoutingOperations.FK_PPWorkCenterID={3} or {3}=0)
                                                  order by PPMPSItemFODate", iMPSID, strQueryDate, PPPhaseCfgID, PPWorkCenterID);
            return dal.GetDataSet(strQuery);
        }
        public void DeleteAllData()
        {
            string str = string.Format(@"DELETE dbo.PPMPSItems
                                         WHERE AAStatus != 'Dummy'");
            dal.GetDataSet(str);
        }
        public void DeleteAllObjectData()
        {
            string str = string.Format(@"DELETE dbo.PPMPSItems
                                         WHERE AAStatus != 'Dummy'");
            dal.GetDataSet(str);
        }

        public void DeleteAllDataAfterByDate(DateTime dte)
        {
            string str = string.Format(@"DELETE dbo.PPMPSItems 
                                        WHERE AAStatus != 'Dummy' 
                                                AND CONVERT(VARCHAR(10), PPMPSItemFODate, 112) >= {0}", dte.ToString("yyyyMMdd"));
            dal.GetDataSet(str);
        }        
        public DataSet GetAllObjetHasRemainQty()
        {
            string strQuery = string.Format(@"SELECT * FROM dbo.PPMPSItems WHERE AAStatus = 'Alive' AND PPMPSItemBalanceQty < 0");
            return GetDataSet(strQuery);
        }
        public DataSet GetLastFODateMPSItemByProduct(int iICProductID)
        {
            string strQuery = string.Format(@"SELECT  dbo.PPMPSItems.*
                                                FROM    dbo.PPMPSItems
                                                        INNER JOIN dbo.PPMPSs on dbo.PPMPSItems.FK_PPMPSID = dbo.PPMPSs.PPMPSID  AND dbo.PPMPSs.AAStatus='Alive' AND dbo.PPMPSItems.AAStatus ='Alive'
                                                        INNER JOIN (  SELECT
                                                                            MAX(PPMPSItemFODate) FODate
                                                                            FROM
                                                                            dbo.PPMPSItems
                                                                   ) a ON dbo.PPMPSItems.PPMPSItemFODate = a.FODate
                                                WHERE   dbo.PPMPSItems.FK_ICProductID = {0}
                                                        OR {0}= 0", iICProductID);
            return GetDataSet(strQuery);
        }
        public DataSet GetLastFODateMPSItem()
        {
            string strQuery = string.Format(@"SELECT  dbo.PPMPSItems.*
                                                FROM    dbo.PPMPSItems
                                                        INNER JOIN dbo.PPMPSs on dbo.PPMPSItems.FK_PPMPSID = dbo.PPMPSs.PPMPSID  AND dbo.PPMPSs.AAStatus='Alive' AND dbo.PPMPSItems.AAStatus ='Alive'
                                                        INNER JOIN (  SELECT
                                                                            MAX(PPMPSItemFODate) FODate,
							                                                FK_ICProductID
                                                                            FROM
                                                                            dbo.PPMPSItems
						                                                GROUP BY
							                                                FK_ICProductID
                                                                    ) a ON dbo.PPMPSItems.PPMPSItemFODate = a.FODate
						                                                AND dbo.PPMPSItems.FK_ICProductID = a.FK_ICProductID");
            return GetDataSet(strQuery);
        }
        public DateTime? LayNgayHoanThanhCuoiCungNhoNhatCuaKeHoach()
        {
            string strQuery = string.Format(@"SELECT TOP 1
                                                        MIN(dbo.PPMPSItems.PPMPSItemFODate) PPMPSItemFODate
                                                FROM    dbo.PPMPSItems
                                                        INNER JOIN dbo.PPMPSs ON PPMPSs.PPMPSID = PPMPSItems.FK_PPMPSID
                                                                                 AND dbo.PPMPSItems.AAStatus = 'Alive'
                                                                                 AND dbo.PPMPSs.AAStatus = 'Alive'
                                                GROUP BY dbo.PPMPSItems.FK_ICProductID
                                                ORDER BY PPMPSItemFODate");
            DataSet ds = GetDataSet(strQuery);
            if(ds!=null && ds.Tables.Count>0&& ds.Tables[0].Rows.Count>0)
            {
                DateTime dtDate = Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
                return dtDate;
            }
            return null;
        }

        public DataSet TaoDanhSachMPSItemTuMDS(int iPPMDSID)
        {
            string strQuery = string.Format(@"SELECT  TB.PPMDSItemETDDate PPMPSItemFODate ,
                    TB.FK_ICProductID FK_ICProductID,
                    SUM(PPMDSItemQty) AS PPMPSItemDemandQty,
		            MIN(TB.FK_ICUOMID) AS FK_ICUOMID,
		            MIN(tb.FK_ICStkUOMID) AS FK_ICStkUOMID
            FROM    ( SELECT    CAST(PPMDSItemETDDate AS DATE) AS PPMDSItemETDDate ,
                                FK_ICProductID ,
                                PPMDSItemQty AS PPMDSItemQty,
					            FK_ICUOMID,
					            PPMDSItems.FK_ICStkUOMID
                        FROM      PPMDSItems
                                INNER JOIN dbo.ICProducts ON ( ICProducts.ICProductID = PPMDSItems.FK_ICProductID
                                                                AND ICProducts.AAStatus = PPMDSItems.AAStatus
                                                                AND ICProducts.AAStatus = 'Alive'
                                                                )
                        WHERE     FK_PPMDSID = {0}
                    ) AS TB
            GROUP BY TB.PPMDSItemETDDate ,
                    TB.FK_ICProductID
                                                ORDER BY TB.FK_ICProductID ,
                                                        TB.PPMDSItemETDDate;", iPPMDSID);
            return GetDataSet(strQuery);
        }
        public DataSet CreateMPSItemFromMDSByDate(int iPPMDSID, DateTime dte)
        {
            string strQuery = string.Format(@"SELECT  TB.PPMDSItemETDDate PPMPSItemFODate ,
                                                    TB.FK_ICProductID FK_ICProductID,
                                                    SUM(PPMDSItemQty) AS PPMPSItemDemandQty,
		                                            MIN(TB.FK_ICUOMID) AS FK_ICUOMID,
		                                            MIN(tb.FK_ICStkUOMID) AS FK_ICStkUOMID
                                            FROM    ( SELECT    CAST(PPMDSItemETDDate AS DATE) AS PPMDSItemETDDate ,
                                                                FK_ICProductID ,
                                                                PPMDSItemQty AS PPMDSItemQty,
					                                            FK_ICUOMID,
					                                            PPMDSItems.FK_ICStkUOMID
                                                        FROM      PPMDSItems
                                                                INNER JOIN dbo.ICProducts ON ( ICProducts.ICProductID = PPMDSItems.FK_ICProductID
                                                                                                AND ICProducts.AAStatus = PPMDSItems.AAStatus
                                                                                                AND ICProducts.AAStatus = 'Alive'
                                                                                                )
                                                        WHERE     FK_PPMDSID = {0}
                                                                  AND CONVERT(VARCHAR(10), PPMDSItems.PPMDSItemETDDate, 112) >= {1}
                                                    ) AS TB
                                            GROUP BY TB.PPMDSItemETDDate ,
                                                    TB.FK_ICProductID
            ORDER BY TB.PPMDSItemETDDate ,
                    TB.FK_ICProductID;", iPPMDSID);
            return GetDataSet(strQuery);
        }

        public DateTime? GetLastFODate()
        {
            DateTime? dtLastFODate = null;
            string strQuery = string.Format(@"SELECT MAX(dbo.PPMPSItems.PPMPSItemFODate) FROM dbo.PPMPSItems WHERE dbo.PPMPSItems.AAStatus = 'Alive'");
            DataSet ds = GetDataSet(strQuery);
            if(ds!=null && ds.Tables.Count>0&&ds.Tables[0].Rows.Count>0)
            {
                if(ds.Tables[0].Rows[0][0]!=DBNull.Value)
                {
                    dtLastFODate = Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
                }
            }
            return dtLastFODate;
        }
        public DataSet GetBalanceQtyBeforeDateByProductAndDate(int iICProductID, DateTime dte)
        {
            string strQuery = string.Format(@"SELECT 
	                                            TOP 1 
	                                            PPMPSItems.*
                                            FROM dbo.PPMPSItems 
                                            WHERE 
                                                    dbo.PPMPSItems.AAStatus = 'Alive'
                                                    AND PPMPSItems.FK_ICProductID = {0}
		                                            AND CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) < '{1}'
                                            ORDER BY dbo.PPMPSItems.PPMPSItemFODate DESC", iICProductID, dte);
            return GetDataSet(strQuery);
        }
        public DataSet GetAllDataByDate(DateTime dte)
        {
            string strQuery = string.Format(@"SELECT 
	                                            PPMPSItems.*
                                            FROM dbo.PPMPSItems 
                                            WHERE 
                                                    dbo.PPMPSItems.AAStatus = 'Alive'
		                                            AND CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) >= '{0}'
                                            ORDER BY dbo.PPMPSItems.PPMPSItemFODate DESC", dte.ToString("yyyyMMdd"));
            return GetDataSet(strQuery);
        }
        public DataSet GetMPSItemFromAllDataByDate(int iPPMDSID)
        {
            string strQuery = string.Format(@"	SELECT  CONVERT(DATE, TB.PPMDSItemETDDate) AS PPMPSItemFODate ,
                                                        TB.FK_ICProductID FK_ICProductID ,
                                                        TB.FK_ICUOMID AS FK_ICUOMID ,
                                                        TB.FK_ICStkUOMID AS FK_ICStkUOMID ,
                                                        dbo.fnc_PPGetMOQQtyByProduct(SUM(PPMDSItemStkQty), TB.FK_ICProductID) PPMPSItemDemandQty ,
                                                        0 AS PPMPSItemWOQty ,
                                                        0 AS PPMPSItemWSQty
                                                FROM    PPMDSItems TB
                                                        INNER JOIN dbo.ICProducts ON ICProducts.ICProductID = TB.FK_ICProductID
                                                                                     AND ICProducts.AAStatus = 'Alive'
                                                        LEFT JOIN dbo.PPNorms ON PPNorms.FK_ICProductID = TB.FK_ICProductID
                                                                                  AND PPNorms.PPNormActiveCheck = 1
                                                                                  AND PPNorms.AAStatus = 'Alive'
                                                WHERE   FK_PPMDSID = {0}
                                                GROUP BY CONVERT(DATE, TB.PPMDSItemETDDate) ,
                                                        TB.FK_ICProductID ,
                                                        TB.FK_ICUOMID ,
                                                        TB.FK_ICStkUOMID", iPPMDSID);
            return GetDataSet(strQuery);
        }

        public DataSet GetBalanceQtyByProductAndDate()
        {
            string strQuery = string.Format(@"SELECT PPMPSItems.*
                                                FROM dbo.PPMPSItems
                                                    INNER JOIN dbo.PPMPSs ON PPMPSs.PPMPSID = PPMPSItems.FK_PPMPSID AND dbo.PPMPSs.AAStatus = 'Alive'
                                                    INNER JOIN (SELECT 
				                                                    MAX(PPMPSItems.PPMPSItemFODate) AS PPMPSItemFODate,
				                                                    PPMPSItems.FK_ICProductID
			                                                    FROM dbo.PPMPSItems
			                                                    INNER JOIN dbo.PPMPSs ON PPMPSs.PPMPSID = PPMPSItems.FK_PPMPSID AND dbo.PPMPSs.AAStatus = 'Alive'
			                                                    WHERE 
					                                                    dbo.PPMPSItems.AAStatus = 'Alive'
					                                                    --AND CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) < '{0}'
			                                                    GROUP BY
				                                                    PPMPSItems.FK_ICProductID)AS a ON a.FK_ICProductID = PPMPSItems.FK_ICProductID AND a.PPMPSItemFODate = PPMPSItems.PPMPSItemFODate
                                                WHERE dbo.PPMPSItems.AAStatus = 'Alive'
                                                ORDER BY a.FK_ICProductID
                                                ");
            return GetDataSet(strQuery);
        }
        public DataSet GetMPSItemInvQtybyMinFODate(DateTime dte)
        {
            string strQuery = string.Format(@"SELECT *
                                            FROM dbo.PPMPSItems
                                            INNER JOIN
                                            (
                                                SELECT 
                                                    DISTINCT
                                                    MIN(PPMPSItemFODate) AS PPMPSItemFODate,
                                                    FK_ICProductID AS FK_ICProductID
                                                FROM dbo.PPMPSItems
                                                WHERE CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) >= '{0}'
                                                GROUP BY FK_ICProductID
                                            )Tmp
                                            ON Tmp.PPMPSItemFODate = PPMPSItems.PPMPSItemFODate
                                            AND Tmp.FK_ICProductID = PPMPSItems.FK_ICProductID
                                            WHERE PPMPSItems.AAStatus='Alive' and CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) >= '{0}'", dte.ToString("yyyyMMdd"));
            return GetDataSet(strQuery);
        }
        public DataSet GetMPSItemQtybyMaxFODate(DateTime dte)
        {
            string strQuery = string.Format(@"SELECT *
                                            FROM dbo.PPMPSItems
                                            INNER JOIN
                                            (
                                                SELECT 
                                                    DISTINCT
                                                    MAX(PPMPSItemFODate) AS PPMPSItemFODate,
                                                    FK_ICProductID AS FK_ICProductID
                                                FROM dbo.PPMPSItems
                                                WHERE CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) <= '{0}'        
                                                GROUP BY FK_ICProductID
                                            )Tmp
                                            ON Tmp.PPMPSItemFODate = PPMPSItems.PPMPSItemFODate
                                            AND Tmp.FK_ICProductID = PPMPSItems.FK_ICProductID
                                            WHERE PPMPSItems.AAStatus='Alive' and CONVERT(VARCHAR(10), dbo.PPMPSItems.PPMPSItemFODate, 112) <= '{0}'", dte.ToString("yyyyMMdd"));
            return GetDataSet(strQuery);
        }
        public DataSet GetDemanByMDS(int iPPMDSID, DateTime dte)
        {
            object[] _objParrs = {iPPMDSID,
                                    dte
                                };
            DataSet ds;

            return ds = SqlDatabaseHelper.RunStoredProcedure("sp_PP_GetDemanByMDS", _objParrs);
        }

    }
    #endregion
}