using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPNorms
	//-----------------------------------------------------------
	//Generated By: Expert Studio
	//Class:PPNormsController
	//Created Date:Monday, September 26, 2011
	//-----------------------------------------------------------
	
	public class PPNormsController:BaseBusinessController
	{
		public PPNormsController()
		{
			dal= new DALBaseProvider("PPNorms",typeof(PPNormsInfo));
		}
        public DataSet GetAllDataByICProductInNormRM(int iProductID)
        {
            string strQuery = string.Format(@"Select * from PPNorms where AAStatus='Alive' AND
                                                    PPNormID in (Select FK_PPNormID from PPNormRMs where FK_ICProductID={0})", iProductID);
            return dal.GetDataSet(strQuery);
        }
        
        public List<BusinessObject> GetAllNormByType(string strType)
        {
            string strQuery = string.Format(@"Select * from PPNorms where AAStatus='Alive' AND
                                                    FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND FK_ICProductTypeID IN (SELECT ICProductTypeID FROM ICProductTypes WHERE AAStatus='Alive' AND ICProductTypeNo='{0}'))", strType);
            DataSet ds=dal.GetDataSet(strQuery);
            return GetListFromDataset(ds);
        }

        public PPNormsInfo GetNormByICProductANDCustomer(int iICProductID, int iARCustomerID)
        {
            string strQuery = string.Format(@"  SELECT * FROM dbo.PPNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND FK_ARCustomerID = {1}", iICProductID, iARCustomerID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPNormsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }

        public PPNormsInfo GetNormByProductANDRevision(int iICProductID, String strRevision)
        {
            string strQuery = string.Format(@"  SELECT * FROM dbo.PPNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPNormRevision LIKE '{1}'
                                                ORDER BY PPNormActiveCheck DESC", iICProductID, strRevision);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPNormsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }

        public PPNormsInfo GetNormActiveByProduct(int iICProductID)
        {
            string strQuery = string.Format(@"  SELECT * FROM dbo.PPNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPNormActiveCheck = 'True'", iICProductID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPNormsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }

        public DataSet GetNormByProductANDRevisionByEdit(int iICProductID, PPNormsInfo objPPNormsInfo_Old)
        {
            string strQuery = string.Format(@"    SELECT    *
                                                  FROM      dbo.PPNorms
                                                  WHERE     AAStatus = 'Alive'
                                                            AND FK_ICProductID = {0}
                                                            AND PPNormID NOT IN ( SELECT    PPNormID
								                                                  FROM      dbo.PPNorms
								                                                  WHERE     AAStatus = 'Alive' 
											                                                AND FK_ICProductID = {0}
											                                                AND PPNormRevision = '{1}'
								)
            ", iICProductID, objPPNormsInfo_Old.PPNormRevision);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetNormByProduct(int iICProductID)
        {
            string strQuery = string.Format(@"  SELECT * FROM dbo.PPNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}", iICProductID);
            return dal.GetDataSet(strQuery);
        }

        //V.Hung add 25-May-2016
        public PPNormsInfo GetLastNormActiveByProduct(int iICProductID)
        {
            string strQuery = string.Format(@"  SELECT TOP 1 * FROM dbo.PPNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPNormActiveCheck = 'True'
                                                ORDER BY PPNormID Desc", iICProductID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPNormsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }
        public DataSet GetAllDataNotInCostingNorm()
        {
            String str = String.Format(@"
                                        SELECT * 
                                        FROM dbo.PPNorms
                                        WHERE PPNormActiveCheck=1 
                                              AND AAStatus='Alive'
                                              AND ApprovalStatusCombo='Approved'
                                                
                                       ");
            return dal.GetDataSet(str);
        }
        public DataSet GetAllNormByNormRMProductID(int iProductID)
        {
            String str = String.Format(@"   SELECT 
		                                            PPNorms.*
                                            FROM dbo.PPNormRMs
	                                            INNER JOIN dbo.PPNorms ON PPNorms.PPNormID = PPNormRMs.FK_PPNormID AND PPNorms.AAStatus = 'Alive'
                                            WHERE 
	                                            PPNormRMs.AAStatus = 'Alive'
	                                            AND PPNormRMs.FK_ICProductID = {0}", iProductID);
            return dal.GetDataSet(str);
        }
        public DataSet GetAllDataProductParentNotChild()
        {
            String str = String.Format(@"   SELECT PPNorms.FK_ICProductID
                                            FROM dbo.PPNorms
	                                            INNER JOIN dbo.PPNormRMs ON PPNormRMs.FK_PPNormID = PPNorms.PPNormID AND PPNormRMs.AAStatus = 'Alive'
                                            WHERE 
	                                            dbo.PPNorms.PPNormActiveCheck = 'true'
	                                            AND dbo.PPNorms.AAStatus = 'Alive' 
	                                            AND NOT EXISTS (SELECT 'x' 
					                                            FROM dbo.PPNormRMs a
					                                            INNER JOIN dbo.PPNorms b ON b.PPNormID = a.FK_PPNormID AND b.AAStatus = 'Alive'
					                                            WHERE b.PPNormActiveCheck = 'true'
							                                            AND dbo.PPNorms.FK_ICProductID = a.FK_ICProductID)
                                            UNION ALL
                                            SELECT ARFlowCharts.FK_ICProductID
                                            FROM dbo.ARFlowCharts
	                                            INNER JOIN dbo.ARFlowChartItems ON ARFlowChartItems.FK_ARFlowChartID = ARFlowCharts.ARFlowChartID AND ARFlowChartItems.AAStatus = 'Alive'
                                            WHERE 
	                                            dbo.ARFlowCharts.ARFlowChartStatusCombo = 'MSDS'
	                                            AND ARFlowChartItems.FK_ICSemiProductID > 0
	                                            AND dbo.ARFlowCharts.AAStatus = 'Alive' 
	                                            AND NOT EXISTS (SELECT 'x' 
					                                            FROM dbo.ARFlowChartItems a
					                                            INNER JOIN dbo.ARFlowCharts b ON b.ARFlowChartID = a.FK_ARFlowChartID AND b.AAStatus = 'Alive'
					                                            WHERE a.FK_ICSemiProductID > 0
							                                            AND dbo.ARFlowCharts.FK_ICProductID = a.FK_ICProductID)
	                                            AND NOT EXISTS (SELECT 'x' 
					                                            FROM PPNorms 
					                                            WHERE PPNorms.AAStatus = 'Alive' 
							                                            AND PPNorms.PPNormActiveCheck = 'true' 
							                                            AND PPNorms.FK_ICProductID = ARFlowCharts.FK_ICProductID)");
            return dal.GetDataSet(str);
        }
        //170309 - T.Bao: Kiểm tra Cha chứa con, con chứa cha (vòng lặp vô tận)
        public DataSet CheckEndlessLoop()
        {
            string strQuery = string.Format(@"      SELECT Parent.*
                                                    FROM dbo.PPNorms Parent
                                                    INNER JOIN dbo.PPNormRMs Child ON Child.FK_PPNormID = Parent.PPNormID AND Child.AAStatus = 'Alive'
                                                    WHERE Parent.PPNormActiveCheck = 1
		                                                    AND EXISTS (SELECT 'x'
											                                                    FROM dbo.PPNorms
											                                                    INNER JOIN PPNormRMs ON PPNormRMs.FK_PPNormID = PPNorms.PPNormID AND dbo.PPNormRMs.AAStatus = 'Alive'
											                                                    WHERE PPNorms.PPNormActiveCheck = 1
													                                                    AND Parent.FK_ICProductID = PPNormRMs.FK_ICProductID
													                                                    AND Child.FK_ICProductID = PPNorms.FK_ICProductID)");
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }
        public DateTime GetLastUpdate()
        {
            DateTime dte = new DateTime();

            string strQuery = string.Format(@"  SELECT MAX(AAUpdatedDate)
                                                FROM dbo.PPNorms
                                                WHERE AAUpdatedDate IS NOT NULL");
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && !string.IsNullOrEmpty(ds.Tables[0].Rows[0][0].ToString()))
                    try
                    {
                        return DateTime.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    catch (System.Exception ex)
                    {

                    }
            }

            return dte;
        }
    }
	#endregion
}