using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPProductPlnRoutingItems
	//-----------------------------------------------------------
	//Generated By: Expert Studio
	//Class:PPProductPlnRoutingItemsController
	//Created Date:18 Tháng Sáu 2013
	//-----------------------------------------------------------
	
	public class PPProductPlnRoutingItemsController:BaseBusinessController
	{
		public PPProductPlnRoutingItemsController()
		{
			dal= new DALBaseProvider("PPProductPlnRoutingItems",typeof(PPProductPlnRoutingItemsInfo));
		}

        /// <summary>
        /// Viet Nguyen 2013.07.11
        /// Truy van du lieu theo LSX tong va loai LSX tong.
        /// </summary>
        public DataSet GetAllDataByPPProductPlnAndType(int iPPProductPlnID, string strType)
        {
            string strQuery = string.Format(@"Select  ARSOs.ARSONo,PPPhaseCfgs.PPPhaseCfgNo,FG.ICProductNo as ICFGProductNo
		                                            ,Semi.ICProductNo as ICSemiProductNo,ICProducts.ICProductNo as ICProductNo
		                                            ,ICProductProductionUOMs.ICProductProductionUOMFactor as PPProductPlnRoutingItemProductionFactorQty
		                                            ,PPProductPlnRoutingItems.* from PPProductPlnRoutingItems 
		                                            inner join ARSOs on PPProductPlnRoutingItems.FK_ARSOID=ARSOs.ARSOID
		                                            inner join PPPhaseCfgs on PPPhaseCfgs.PPPhaseCfgID=PPProductPlnRoutingItems.FK_PPPhaseCfgID
		                                            inner join ICProducts as FG on FG.ICProductID=PPProductPlnRoutingItems.FK_ICFGProductID
		                                            inner join ICProducts as Semi on Semi.ICProductID=PPProductPlnRoutingItems.FK_ICSemiProductID
		                                            inner join ICProducts on ICProducts.ICProductID=PPProductPlnRoutingItems.FK_ICProductID
		                                            inner join ICProductProductionUOMs on ICProductProductionUOMs.FK_ICProductID=PPProductPlnRoutingItems.FK_ICProductID
                                                    inner join PPProductPlnItems on PPProductPlnItems.PPProductPlnItemID=PPProductPlnRoutingItems.FK_PPProductPlnItemID
                                            where PPProductPlnRoutingItems.AAStatus='Alive' and ARSOs.AAStatus='Alive'
                                            AND PPPhaseCfgs.AAStatus='Alive' AND FG.AAStatus='Alive' AND Semi.AAStatus='Alive'
                                            AND ICProducts.AAStatus='Alive' AND ICProductProductionUOMs.AAStatus='Alive'
                                            AND PPProductPlnItems.AAStatus='Alive'
                                            AND PPProductPlnRoutingItemTypeCombo='{1}' AND PPProductPlnRoutingItems.FK_PPProductPlnID={0}
                                            Order by PPProductPlnItems.PPProductPlnItemPriority,ARSOs.ARSONo
                                            ,FG.ICProductNo,Semi.ICProductNo,ICProducts.ICProductNo,PPPhaseCfgs.PPPhaseCfgNo"
                            , iPPProductPlnID, strType);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.07.11
        /// Truy van du lieu BTP theo LSX tong va loai LSX tong.
        /// </summary>
        public DataSet GetAllDataSemiProductByPPProductPlnAndType(int iPPProductPlnID, string strType)
        {
            string strQuery = string.Format(@"Select  ARSOs.ARSONo,PPPhaseCfgs.PPPhaseCfgNo,FG.ICProductNo as ICFGProductNo
		                                            ,ICProducts.ICProductNo as ICProductNo
		                                            ,ICProductProductionUOMs.ICProductProductionUOMFactor as PPProductPlnRoutingItemProductionFactorQty
		                                            ,PPProductPlnRoutingItems.* from PPProductPlnRoutingItems 
		                                            inner join ARSOs on PPProductPlnRoutingItems.FK_ARSOID=ARSOs.ARSOID
		                                            inner join PPPhaseCfgs on PPPhaseCfgs.PPPhaseCfgID=PPProductPlnRoutingItems.FK_PPPhaseCfgID
		                                            inner join ICProducts as FG on FG.ICProductID=PPProductPlnRoutingItems.FK_ICFGProductID		                                          
		                                            inner join ICProducts on ICProducts.ICProductID=PPProductPlnRoutingItems.FK_ICProductID
		                                            inner join ICProductProductionUOMs on ICProductProductionUOMs.FK_ICProductID=PPProductPlnRoutingItems.FK_ICProductID
                                            where PPProductPlnRoutingItems.AAStatus='Alive' and ARSOs.AAStatus='Alive'
                                            AND PPPhaseCfgs.AAStatus='Alive' AND FG.AAStatus='Alive'
                                            AND ICProducts.AAStatus='Alive' AND ICProductProductionUOMs.AAStatus='Alive'
                                            AND PPProductPlnRoutingItemTypeCombo='{1}' AND PPProductPlnRoutingItems.FK_PPProductPlnID={0}
                                            Order by PPProductPlnRoutingItems.PPProductPlnRoutingItemID,PPProductPlnRoutingItems.PPProductPlnRoutingItemPriority,ARSOs.ARSONo
                                            ,FG.ICProductNo,ICProducts.ICProductNo,PPPhaseCfgs.PPPhaseCfgNo"
                            , iPPProductPlnID, strType);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetProductPlnRoutingItemByProductPlnAndType(int iPPProductPlnID, string strType)
        {
            string strQuery = string.Format(@"Select * from PPProductPlnRoutingItems where AAStatus='Alive' AND FK_PPProductPlnID={0} AND PPProductPlnROutingItemTypeCombo='{1}'"
                                , iPPProductPlnID, strType);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.07.11
        /// Lay Danh sach NVL và số lượng cần dùng cho từng sản phẩm theo công đoạn
        /// Số lượng trong định mức trả về vào PPProductPlnRoutingItemQty.
        /// </summary>
        public DataSet GetAllMaterialInConfigByProductPln(int iPPProductPlnID)
        {
            string strQuery = string.Format(@"select PPNormRMs.PPNormRMQty as PPProductPlnRoutingItemQty,
                                                                PPNormRMs.FK_ICProductID as FK_ICProductID ,PPProductPlnRoutingItems.PPProductPlnRoutingItemID,PPProductPlnRoutingItems.FK_PPPhaseCfgID
                                                                from PPProductPlnRoutingItems
			                                                                inner join PPNorms on PPProductPlnRoutingItems.FK_ICProductID=PPNorms.FK_ICProductID
			                                                                inner join PPNormRMs on PPNormRMs.FK_PPNormID=PPNorms.PPNormID
							                                                                     AND PPNormRMs.FK_PPPhaseCfgID=PPProductPlnRoutingItems.FK_PPPhaseCfgID
			                                                                inner join ICProducts on PPNormRMs.FK_ICProductID=ICProducts.ICProductID
			                                                                inner join PPProductionEstLimitedRMs on (PPProductionEstLimitedRMs.FK_ICProductGroupID=ICProducts.FK_ICProductGroupID or
													                                                                 PPProductionEstLimitedRMs.FK_ICProductGroupID=0)
											                                                                     And (PPProductionEstLimitedRMs.FK_ICProductTypeID=ICProducts.FK_ICProductTypeID or
											                                                                      PPProductionEstLimitedRMs.FK_ICProductTypeID=0)
                                                                where  PPProductPlnRoutingItems.AAStatus='Alive' AND PPNorms.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                                AND PPProductionEstLimitedRMs.AAStatus='Alive'
                                                                AND PPProductPlnRoutingItems.FK_PPProductPlnID={0}
                                                                order by PPProductPlnRoutingItemID"
                            , iPPProductPlnID);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.07.11
        /// Lay Danh sach NVL và số lượng cần dùng cho từng thành phẩm của sản phẩm theo công đoạn
        /// Số lượng trong định mức trả về vào PPProductPlnRoutingItemQty.
        /// </summary>
        public DataSet GetAllMaterialInConfigAndFGByProductPln(int iPPProductPlnID)
        {
            string strQuery = string.Format(@"select PPNormRMs.PPNormRMQty as PPProductPlnRoutingItemQty,
                                                PPNormRMs.FK_ICProductID as FK_ICProductID ,PPProductPlnRoutingItems.FK_PPPhaseCfgID,PPProductPlnRoutingItems.FK_ICFGProductID,PPProductPlnRoutingItems.FK_ARSOID
                                                from 
                                                 (select Distinct FK_ICFGProductID,FK_PPPhaseCfgID,FK_ARSOID,PPProductPlnRoutingItemParentProductQty from PPProductPlnRoutingItems
			                                                where  PPProductPlnRoutingItems.AAStatus='Alive' AND PPProductPlnRoutingItems.FK_PPProductPlnID={0}) 
                                                 as PPProductPlnRoutingItems
			                                                inner join PPNorms on PPProductPlnRoutingItems.FK_ICFGProductID=PPNorms.FK_ICProductID
			                                                inner join PPNormRMs on PPNormRMs.FK_PPNormID=PPNorms.PPNormID
							                                                     AND PPNormRMs.FK_PPPhaseCfgID=PPProductPlnRoutingItems.FK_PPPhaseCfgID
			                                                inner join ICProducts on PPNormRMs.FK_ICProductID=ICProducts.ICProductID
			                                                inner join PPProductionEstLimitedRMs on (PPProductionEstLimitedRMs.FK_ICProductGroupID=ICProducts.FK_ICProductGroupID or
													                                                 PPProductionEstLimitedRMs.FK_ICProductGroupID=0)
											                                                     And (PPProductionEstLimitedRMs.FK_ICProductTypeID=ICProducts.FK_ICProductTypeID or
											                                                      PPProductionEstLimitedRMs.FK_ICProductTypeID=0)
                                                where  PPNorms.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                AND PPProductionEstLimitedRMs.AAStatus='Alive'"
                            , iPPProductPlnID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataBySOFGSemiProductAndProductPln(int iARSOID, int iFGProductID, int iSemiProductID, int iProductID,int iProductPlnID)
        {
            string strQuery = string.Format(@"select * from PPProductPlnRoutingItems where AAStatus='Alive' AND FK_PPProductPlnID={0} AND FK_ARSOID={1}
                                                               AND FK_ICFGProductID={2} AND FK_ICSemiProductID={3} AND FK_ICProductID={4}"
                                        , iProductPlnID, iARSOID, iFGProductID, iSemiProductID, iProductID);
            return dal.GetDataSet(strQuery);
        }
	}
	#endregion
}