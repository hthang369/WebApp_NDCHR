using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPCostingNorms
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:PPCostingNormsController
	//Created Date:Tuesday, September 20, 2016
	//-----------------------------------------------------------
	
	public class PPCostingNormsController:BaseBusinessController
	{
		public PPCostingNormsController()
		{
			dal= new DALBaseProvider("PPCostingNorms",typeof(PPCostingNormsInfo));
		}
        public DataSet GetCostingNormByProductANDRevisionByEdit(int iICProductID, PPCostingNormsInfo objPPCostingNormsInfo_Old)
        {
            string strQuery = string.Format(@"    SELECT    *
                                                  FROM      dbo.PPCostingNorms
                                                  WHERE     AAStatus = 'Alive'
                                                            AND FK_ICProductID = {0}
                                                            AND PPCostingNormID NOT IN ( SELECT    PPCostingNormID
								                                                  FROM      dbo.PPCostingNorms
								                                                  WHERE     AAStatus = 'Alive' 
											                                                AND FK_ICProductID = {0}
											                                                AND PPCostingNormRevision = '{1}'
								)
            ", iICProductID, objPPCostingNormsInfo_Old.PPCostingNormRevision);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }
        public PPCostingNormsInfo GetCostingNormByProductANDRevision(int iICProductID, String strRevision)
        {
            string strQuery = string.Format(@"  SELECT * FROM dbo.PPCostingNorms
                                                WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPCostingNormRevision LIKE '{1}'
                                                ORDER BY PPCostingNormActiveCheck DESC", iICProductID, strRevision);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPCostingNormsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }
        public DataSet GetNormByProduct(int iICProductID)
        {
            string strQuery = string.Format(@"  
                                            SELECT  *
                                            FROM    dbo.PPCostingNorms
                                                    INNER JOIN dbo.PPCostingNormProducts ON PPCostingNormProducts.FK_PPCostingNormID = PPCostingNorms.PPCostingNormID
                                                                                            AND PPCostingNormProducts.FK_ICProductID = '{0}'
                                            WHERE   PPCostingNorms.AAStatus = 'Alive'
                                    ", iICProductID);
            return dal.GetDataSet(strQuery);
        }
       public PPCostingNormProductsInfo GetCostingNormProductBy_RecentDayANDProduct(int iProductID,DateTime dt)
        {
            string strQuery = string.Format(@"
                                            SELECT dbo.PPCostingNormProducts.*
                                            FROM    dbo.PPCostingNorms
                                                    INNER JOIN dbo.PPCostingNormProducts ON PPCostingNormProducts.FK_PPCostingNormID = PPCostingNorms.PPCostingNormID
                                                                                            AND PPCostingNormProducts.FK_ICProductID = '{0}'
                                                                                            AND PPCostingNormProducts.AAStatus='Alive'
                                            WHERE   PPCostingNorms.AAStatus = 'Alive'
                                                    AND '{1}' BETWEEN CONVERT(VARCHAR(20), PPCostingNormApplyFromDate, 112)
                                                              AND     CONVERT(VARCHAR(20), PPCostingNormApplyToDate, 112)
                                            ORDER BY PPCostingNormApplyToDate ASC ,
                                                    PPCostingNormID DESC
                            ", iProductID, dt.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (PPCostingNormProductsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            
            return null;
        }
        public DataSet GetAllProductInCostingNormRM()
        {
            //Lấy ds các NVL có định mức 
            string strQuery = string.Format(@"SELECT  *
                                            FROM    dbo.ICProducts
                                            WHERE   ICProductID IN (
                                                                   SELECT 
                                                                            PPCostingNormProducts.FK_ICProductID
                                                                    FROM    dbo.PPCostingNorms
                                                                            INNER JOIN dbo.PPCostingNormProducts ON PPCostingNormProducts.FK_PPCostingNormID = PPCostingNorms.PPCostingNormID
                                                                                                                    AND PPCostingNormProducts.AAStatus='Alive'
                                                                    WHERE   PPCostingNorms.AAStatus = 'Alive'       
                                                                     ) 
                                    ");
            return GetDataSet(strQuery);
        }

    }
	#endregion
}