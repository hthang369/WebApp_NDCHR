using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPProductionOrdrEstFGs
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:PPProductionOrdrEstFGsController
	//Created Date:Wednesday, May 7, 2014
	//-----------------------------------------------------------
	
	public class PPProductionOrdrEstFGsController:BaseBusinessController
	{
		public PPProductionOrdrEstFGsController()
		{
			dal= new DALBaseProvider("PPProductionOrdrEstFGs",typeof(PPProductionOrdrEstFGsInfo));
		}

        public double GetSUMOrdrQtyByProductPlnProductStockSOInRange(int ProductPlanID, int ProductID, int iPhaseCfgID, int iSOID, DateTime fromDate, DateTime ToDate)
        {
            string strQueryDateProduction = DALUtil.GenerateBeetween("PPProductionOrdrDate", fromDate, ToDate);
            String strQuery = String.Format(@"SELECT SUM(PPProductionOrdrEstFGQty) FROM PPProductionOrdrEstFGs WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND  FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND {4}) 
                                                AND FK_PPWOID IN (SELECT PPWOID FROM PPWOs WHERE AAStatus='Alive' AND FK_PPProductPlnID ={1} AND FK_ARSOID={3} ) 
                                                AND FK_PPPhaseCfgID={2}", ProductID, ProductPlanID, iPhaseCfgID, iSOID, strQueryDateProduction);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Lấy tổng số lượng còn lại theo sản phẩm và thời gian dự kiến hoàn thành
        /// </summary>
        /// <param name="ProductID"></param>
        /// <param name="fromDate"></param>
        /// <param name="ToDate"></param>
        /// <returns></returns>
        public double GetSUMOrdrRQtyByProductEstEndDateInRange(int ProductID,DateTime fromDate, DateTime ToDate)
        {
            string strQueryDateProduction = DALUtil.GenerateBeetween("PPProductionOrdrEstEndDate", fromDate, ToDate);
            String strQuery = String.Format(@"SELECT SUM(PPProductionOrdrEstFGRQty) FROM PPProductionOrdrEstFGs WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPProductionOrdrEstFGRQty>0
                                                AND  FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND {1}) 
                                                ", ProductID, strQueryDateProduction);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Lấy Item còn tổng số lượng còn lại theo sản phẩm và thời gian dự kiến hoàn thành
        /// </summary>
        /// <param name="ProductID"></param>
        /// <param name="fromDate"></param>
        /// <param name="ToDate"></param>
        /// <returns></returns>
        public DataSet GetAllDataByProductEstEndDateInRange(int ProductID, DateTime fromDate, DateTime ToDate)
        {
            string strQueryDateProduction = DALUtil.GenerateBeetween("PPProductionOrdrEstEndDate", fromDate, ToDate);
            String strQuery = String.Format(@"SELECT * FROM PPProductionOrdrEstFGs WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPProductionOrdrEstFGRQty>0
                                                AND  FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND {1}) 
                                                ", ProductID, strQueryDateProduction);
            return dal.GetDataSet(strQuery);
        }

        #region Lấy số lượng dự tính sản xuất của Phiếu Giao Việc theo LSX, Công Đoạn và Phân xưởng -- Vinh -- 2014.08.25

        public double LaySoLuongTheoLSXVaCongDoanVaPhanXuong(int iPPWOID, int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID)
        {
            String str = String.Format(@"SELECT SUM(PPProductionOrdrEstFGQty) FROM dbo.PPProductionOrdrEstFGs
                                        WHERE AAStatus = 'Alive'
                                        AND FK_ICProductID = {0}
                                        AND FK_PPProductionOrdrID IN (
								                                        SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                        WHERE AAStatus = 'Alive'
								                                        AND FK_PPWOID = {1}
								                                        AND FK_PPPhaseCfgID = {2}
								                                        AND FK_PPWorkCenterID = {3}
							                                         )"
                                       , iICProductID, iPPWOID, iPPPhaseCfgID, iPPWorkCenterID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        #endregion
        //NhamNDH add -13/12/2016- Lấy số lượng
        #region Lấy số lượng dự tính sản xuất của Phiếu Giao Việc theo Công Đoạn và Phân xưởng và Ngày tạo phiếu -- Vinh -- 2014.08.25

        public double LaySoLuongTheoCongDoanVaPhanXuongVaNgay(int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dt)
        {
            string str = GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(iICProductID, iPPPhaseCfgID, iPPWorkCenterID, ref dt, "SUM(PPProductionOrdrEstFGQty)");

            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public DataSet LayTheoCongDoanVaPhanXuongVaNgay(int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dt)
        {
            string str = GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(iICProductID, iPPPhaseCfgID, iPPWorkCenterID, ref dt, "*");
            return dal.GetDataSet(str);
        }

        private String GenerateQueryLayTheoCongDoanVaPhanXuongVaNgay(int iICProductID, int iPPPhaseCfgID, int iPPWorkCenterID, ref DateTime dt, string strSelectCon)
        {
            String str = String.Format(@"SELECT {4} FROM dbo.PPProductionOrdrEstFGs
                                        WHERE AAStatus = 'Alive'
                                        AND FK_ICProductID = {0}
                                        AND FK_PPProductionOrdrID IN (
								                                        SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                        WHERE AAStatus = 'Alive'
								                                        AND FK_PPPhaseCfgID = {1}
								                                        AND FK_PPWorkCenterID = {2}
                                                                        AND
                                                                        (
	                                                                        (
		                                                                        PPProductionOrdrEstEndDate IS NULL
		                                                                        AND
		                                                                        CONVERT(VARCHAR, PPProductionOrdrDate, 112) = '{3}'
	                                                                        )
	                                                                        OR
	                                                                        CONVERT(VARCHAR, PPProductionOrdrEstEndDate, 112) = '{3}'
                                                                        )
							                                         )"
                                               , iICProductID, iPPPhaseCfgID, iPPWorkCenterID, dt.ToString("yyyyMMdd"), strSelectCon);
            return str;
        }

        #endregion

        #region Get Data By Product SO EstEndDate

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Lấy tổng số lượng còn lại theo sản phẩm, đơn hàng và thời gian dự kiến hoàn thành
        /// </summary>
        /// <param name="ProductID"></param>
        /// <param name="fromDate"></param>
        /// <param name="ToDate"></param>
        /// <returns></returns>
        public double GetSUMOrdrRQtyByProductSOAndEstEndDateInRange(int ProductID,int iARSOID, DateTime fromDate, DateTime ToDate)
        {
            String strQuery = GenerateQueryByProductSOAndEstEndDateInRange(ProductID, iARSOID, fromDate, ToDate, "SUM(PPProductionOrdrEstFGRQty)");
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Lấy Item còn tổng số lượng còn lại theo sản phẩm, đơn hàng và thời gian dự kiến hoàn thành
        /// </summary>
        /// <param name="ProductID"></param>
        /// <param name="fromDate"></param>
        /// <param name="ToDate"></param>
        /// <returns></returns>
        public DataSet GetAllDataByProductSOAndEstEndDateInRange(int ProductID,int iARSOID, DateTime fromDate, DateTime ToDate)
        {
            String strQuery = GenerateQueryByProductSOAndEstEndDateInRange(ProductID, iARSOID, fromDate, ToDate, "*");
            return dal.GetDataSet(strQuery);
        }

        private string GenerateQueryByProductSOAndEstEndDateInRange(int ProductID, int iARSOID, DateTime fromDate, DateTime ToDate, string strSelect)
        {
            string strQueryDateProduction = DALUtil.GenerateBeetween("PPProductionOrdrEstEndDate", fromDate, ToDate);
            String strQuery = String.Format(@"SELECT {3} FROM PPProductionOrdrEstFGs WHERE AAStatus = 'Alive'
                                                AND FK_ICProductID = {0}
                                                AND PPProductionOrdrEstFGRQty>0
                                                AND  FK_PPProductionOrdrID IN (SELECT PPProductionOrdrID FROM PPProductionOrdrs WHERE AAStatus='Alive' AND {1}) 
                                                AND FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_ARSOID={2} or {2}=0)
                                                ", ProductID, strQueryDateProduction, iARSOID, strSelect);
            return strQuery;
        }

        #endregion

        public DataSet GetAllDataInMonth(DateTime dt)
        {
            string strQuery = string.Format(@"
                        SELECT  *
                        FROM    dbo.PPProductionOrdrEstFGs
                        WHERE   FK_PPProductionOrdrID IN (
                                                        SELECT  PPProductionOrdrID
                                                        FROM    dbo.PPProductionOrdrs
                                                        WHERE   CONVERT(VARCHAR(20), MONTH(PPProductionOrdrDate)) = '{0}'
                                                                AND AAStatus = 'Alive' 
								                            )
                        AND AAStatus = 'Alive'
                        AND PPProductionOrdrEstFGQty > 0
                            ", dt.Month);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataInPeriod(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"
                        SELECT  *
                        FROM    dbo.PPProductionOrdrEstFGs
                        WHERE   FK_PPProductionOrdrID IN (
                                                        SELECT  PPProductionOrdrID
                                                        FROM    dbo.PPProductionOrdrs
                                                        WHERE   MONTH(PPProductionOrdrDate) = '{0}'
														        AND YEAR(PPProductionOrdrDate)='{1}'
                                                                AND AAStatus = 'Alive' 
								                            )
                        AND AAStatus = 'Alive'
                        AND PPProductionOrdrEstFGQty > 0
                            ", iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public DataSet GetSumQtyWS()
        {
            string strQuery = string.Format(@"
                                            SELECT
		                                        PPProductionOrdrEstFGs.FK_ICProductID,
		                                        0 AS PPWOEstFGItemQty,
		                                        SUM(PPProductionOrdrEstFGs.PPProductionOrdrEstFGRQty) AS PPProductionOrdrEstFGQty
	                                        FROM PPProductionOrdrEstFGs
		                                        INNER JOIN dbo.PPProductionOrdrs ON PPProductionOrdrs.PPProductionOrdrID = PPProductionOrdrEstFGs.FK_PPProductionOrdrID 
										                                        AND PPProductionOrdrs.AAStatus = 'Alive'
	                                        WHERE 
		                                        PPProductionOrdrEstFGs.AAStatus = 'Alive'			
		                                        AND PPProductionOrdrEstFGs.PPProductionOrdrEstFGRQty > 0
	                                        GROUP BY PPProductionOrdrEstFGs.FK_ICProductID");

            return GetDataSet(strQuery);
        }
        // NhamNDH add -25/11/2016- Move Lệnh sản xuất từ CHF
        public DataSet GetAllDataNotComplete(int iPPWOID)
        {
            string strQuery = string.Format(@"SELECT  *
                                            FROM    dbo.PPProductionOrdrEstFGs
                                                    INNER JOIN dbo.PPProductionOrdrs ON PPProductionOrdrs.PPProductionOrdrID = PPProductionOrdrEstFGs.FK_PPProductionOrdrID
                                                                                        AND PPProductionOrdrs.AAStatus = PPProductionOrdrEstFGs.AAStatus
                                                                                        AND PPProductionOrdrs.AAStatus = 'Alive'
                                                                                        AND PPProductionOrdrs.FK_PPWOID = {0}
                                            WHERE   PPProductionOrdrEstFGs.PPProductionOrdrEstFGRQty > 0", iPPWOID);
            return GetDataSet(strQuery);
        }
        // NhamNDH add -28/11/2016- Move Phiếu sản xuất từ CHF
        #region Lấy số lượng dự tính sản xuất của Phiếu Giao Việc theo LSX, Công Đoạn và Phân xưởng -- Vinh -- 2014.08.25

        public double LaySoLuongTheoLSXVaCongDoanVaPhanXuong(int iPPWOID, int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"SELECT SUM(PPProductionOrdrEstFGQty) FROM dbo.PPProductionOrdrEstFGs
                                        WHERE AAStatus = 'Alive'
                                        AND FK_ICProductID = {0}
                                        AND FK_PPProductionOrdrID IN (
								                                        SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                        WHERE AAStatus = 'Alive'
								                                        AND FK_PPWOID = {1}
								                                        AND FK_PPPhaseCfgID = {2}
								                                        AND FK_PPWorkCenterID = {3}
                                                                        AND CONVERT(VARCHAR, PPProductionOrdrDate, 112) >= '{4}'
                                                                        AND CONVERT(VARCHAR, PPProductionOrdrDate, 112) <= '{5}' 
							                                         )"
                                       , iICProductID, iPPWOID, iPPPhaseCfgID, iPPWorkCenterID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        #endregion
        // NhamNDH add -08/12/2016- Lấy số lượng dự tính sản xuất của Phiếu Giao Việc theo LSX, Công Đoạn và Phân xưởng SO
        public double LaySoLuongTheoLSXVaCongDoanVaPhanXuongSO(int iARShpPlanItemID, int iARSOItemID, int iPPWOID, int iPPPhaseCfgID, int iPPWorkCenterID, int iICProductID, DateTime dtFrom, DateTime dtTo)
        {
            String str = String.Format(@"SELECT SUM(PPProductionOrdrEstFGQty) FROM dbo.PPProductionOrdrEstFGs
                                        WHERE AAStatus = 'Alive'
                                        AND FK_ICProductID = {0}
                                        AND FK_ARSOItemID = {6}
                                        AND FK_ARShpPlanItemID = {7}
                                        AND FK_PPProductionOrdrID IN (
								                                        SELECT PPProductionOrdrID FROM dbo.PPProductionOrdrs
								                                        WHERE AAStatus = 'Alive'
								                                        AND FK_PPWOID = {1}
								                                        AND FK_PPPhaseCfgID = {2}
								                                        AND FK_PPWorkCenterID = {3}
                                                                        AND CONVERT(VARCHAR, PPProductionOrdrDate, 112) >= '{4}'
                                                                        AND CONVERT(VARCHAR, PPProductionOrdrDate, 112) <= '{5}' 
							                                         )"
                                       , iICProductID, iPPWOID, iPPPhaseCfgID, iPPWorkCenterID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"), iARSOItemID, iARShpPlanItemID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        // NhamNDH add -28/11/2016- Move Phiếu sản xuất từ CHF
        public DataSet GetDataByLotNo(string strlotNo)
        {
            string strQuery = string.Format(@"SELECT TOP 1 PPProductionOrdrEstFGLotNo
                                          FROM dbo.PPProductionOrdrEstFGs
                                          WHERE AAStatus = 'Alive'  
                                                AND PPProductionOrdrEstFGLotNo LIKE '{0}%'   
                                                ORDER BY PPProductionOrdrEstFGLotNo DESC", strlotNo);

            return GetDataSet(strQuery);
        }
        // NhamNDH add -28/11/2016- Move Phiếu sản xuất từ CHF
        public DataSet GetAllDataNotCompleteByProductionOrdr(int iPPProductionOrdrID)
        {
            string strQuery = string.Format(@"SELECT  *
                                                FROM    dbo.PPProductionOrdrEstFGs
                                                WHERE   AAStatus = 'Alive'
                                                        AND FK_PPProductionOrdrID = {0}
                                                        AND PPProductionOrdrEstFGs.PPProductionOrdrEstFGRQty > 0", iPPProductionOrdrID);
            return GetDataSet(strQuery);
        }
        public DataSet GetallDataByPPProductionOrdrParentID(int iPPProductionOrdrID)
        {
            string strQuery = string.Format(@"  SELECT PPProductionOrdrEstFGs.*
                                                FROM dbo.PPProductionOrdrs
                                                INNER JOIN dbo.PPProductionOrdrEstFGs ON PPProductionOrdrEstFGs.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID AND PPProductionOrdrEstFGs.AAStatus ='Alive'
                                                WHERE PPProductionOrdrs.FK_PPProductionOrdrParentID = {0}
                                                AND PPProductionOrdrs.AAStatus = 'Alive'", iPPProductionOrdrID);
            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataLastPhaseCfgByPPProductionOrdrID(int iPPProductionOrdrID)
        {
            string strQuery = string.Format(@"  IF OBJECT_ID('tempdb..#PPRoutingOperations') IS NOT NULL
                                                    DROP TABLE #PPRoutingOperations;

                                                SELECT PPRoutingOperations.*
                                                INTO #PPRoutingOperations
                                                FROM PPRoutingOperations
                                                    INNER JOIN dbo.PPRoutings
                                                        ON PPRoutings.PPRoutingID = PPRoutingOperations.FK_PPRoutingID
                                                           AND PPRoutings.AAStatus = 'Alive'
                                                           AND PPRoutings.PPRoutingActiveCheck = 1
                                                    INNER JOIN
                                                     (
                                                         SELECT MAX(PPRoutingOperations.PPRoutingOperationSortOrder) AS SortOrder,
                                                                PPRoutingOperations.FK_PPRoutingID
                                                         FROM dbo.PPRoutings
                                                             INNER JOIN dbo.PPRoutingOperations
                                                                 ON PPRoutingOperations.FK_PPRoutingID = PPRoutings.PPRoutingID
                                                                    AND PPRoutingOperations.AAStatus = 'Alive'
                                                         WHERE dbo.PPRoutings.AAStatus = 'Alive'
                                                               AND PPRoutings.PPRoutingActiveCheck = 1
                                                         GROUP BY PPRoutingOperations.FK_PPRoutingID
                                                     ) AS MaxPPPhaseCfg
                                                        ON MaxPPPhaseCfg.FK_PPRoutingID = PPRoutings.PPRoutingID
                                                           AND MaxPPPhaseCfg.SortOrder = PPRoutingOperations.PPRoutingOperationSortOrder
                                                WHERE PPRoutingOperations.AAStatus = 'Alive';
                                                -----------------------------	

                                                SELECT PPProductionOrdrEstFGs.*
                                                FROM dbo.PPProductionOrdrs
                                                    INNER JOIN dbo.PPProductionOrdrEstFGs
                                                        ON PPProductionOrdrEstFGs.FK_PPProductionOrdrID = PPProductionOrdrs.PPProductionOrdrID
                                                           AND PPProductionOrdrEstFGs.AAStatus = 'Alive'
                                                    INNER JOIN #PPRoutingOperations
                                                        ON #PPRoutingOperations.FK_PPRoutingID = PPProductionOrdrEstFGs.FK_PPRoutingID
                                                           AND #PPRoutingOperations.FK_PPPhaseCfgID = PPProductionOrdrEstFGs.FK_PPPhaseCfgID
                                                WHERE PPProductionOrdrs.PPProductionOrdrID = {0}
                                                      AND PPProductionOrdrs.AAStatus = 'Alive';", iPPProductionOrdrID);
            return GetDataSet(strQuery);
        }
        //
    }
    #endregion
}