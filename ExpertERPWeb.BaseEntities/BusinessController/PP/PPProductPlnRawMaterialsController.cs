using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region PPProductPlnRawMaterials
	//-----------------------------------------------------------
	//Generated By: Expert Studio
	//Class:PPProductPlnRawMaterialsController
	//Created Date:02 Tháng Bảy 2013
	//-----------------------------------------------------------
	
	public class PPProductPlnRawMaterialsController:BaseBusinessController
	{
		public PPProductPlnRawMaterialsController()
		{
			dal= new DALBaseProvider("PPProductPlnRawMaterials",typeof(PPProductPlnRawMaterialsInfo));
		}

        /// <summary>
        /// Viet Nguyen 2013.06.27
        /// Lấy Tổng NVL dung trong KHSX chi tiết.
        /// strFieldProduct: Sẽ tính theo field của sản phẩm nào trong KHSX chi tiết
        /// </summary>
        public DataSet GetMaterialByProductPln(int iPPProductPlnID, string strFieldProduct)
        {
            string strQuery = string.Format(@"select PPProductPlnItemDetails.FK_PPProductPlnID,PPNormRMs.FK_ICProductID, SUM(PPProductPlnItemDetails.PPProductPlnItemDetailQty*PPNormRMQty) as PPProductPlnRawMaterialQty
                                                        ,ICProducts.ICProductStockMin as PPProductPlnRawMaterialMinStockQty
                                                        from 
                                                        dbo.PPProductPlnItemDetails
                                                        inner join PPNorms on PPProductPlnItemDetails.{1}=PPNorms.FK_ICProductID
                                                        inner join PPNormRMs on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
					                                                            AND PPNormRMs.FK_PPPhaseCfgID=PPProductPlnItemDetails.FK_PPPhaseCfgID				
                                                        inner join ICProducts on ICProducts.ICProductID=PPNormRMS.FK_ICProductID
                                                        inner join PPSubMaterialGroups on ICProducts.FK_ICProductGroupID=PPSubMaterialGroups.FK_ICProductGroupID
                                                        where   PPProductPlnItemDetails.AAStatus='Alive'
                                                        AND ICProducts.AAStatus='Alive' AND PPNorms.AAStatus='Alive' 
                                                        AND PPSubMaterialGroups.AAStatus='Alive'
                                                        AND PPProductPlnItemDetails.FK_PPProductPlnID={0}
                                                        group by PPProductPlnItemDetails.FK_PPProductPlnID,PPNormRMs.FK_ICProductID,ICProducts.ICProductStockMin
                                                        Having SUM(PPProductPlnItemDetails.PPProductPlnItemDetailQty*PPNormRMQty) > 0", iPPProductPlnID, strFieldProduct);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.06.27
        /// Lấy  NVL dung trong KHSX chi tiết theo thành phẩm và ngày
        /// strFieldProduct: Sẽ tính theo field của sản phẩm nào trong KHSX chi tiết
        /// </summary>
        public DataSet GetMaterialByProductPlnAndDate(int iPPProductPlnID, string strFieldProduct)
        {
            string strQuery = string.Format(@"select PPProductPlnItemDetails.FK_ARSOID,PPProductPlnItemDetails.FK_PPPhaseCfgID,PPProductPlnItemDetails.FK_PPProductPlnID
                                                ,PPProductPlnItemDetails.FK_PPProductPlnItemID,PPProductPlnItemDetails.PPProductPlnItemDetailID as FK_PPProductPlnItemDetailID
                                                ,PPNormRMs.FK_ICProductID,PPProductPlnItemDetails.PPProductPlnItemDetailDate as  PPProductPlnRawMaterialDate
                                                ,PPProductPlnItemDetails.{1} as FK_ICParentProductID
                                                , SUM(PPProductPlnItemDetails.PPProductPlnItemDetailQty*PPNormRMQty) as  PPProductPlnRawMaterialQty
                                                from 
                                                dbo.PPProductPlnItemDetails
                                                inner join PPNorms on PPProductPlnItemDetails.{1}=PPNorms.FK_ICProductID
                                                inner join PPNormRMs on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
					                                                    AND PPNormRMs.FK_PPPhaseCfgID=PPProductPlnItemDetails.FK_PPPhaseCfgID				
                                                inner join ICProducts on ICProducts.ICProductID=PPNormRMS.FK_ICProductID
                                                inner join PPSubMaterialGroups on ICProducts.FK_ICProductGroupID=PPSubMaterialGroups.FK_ICProductGroupID
                                                inner join ICProducts as ProductParent on ProductParent.ICProductID=PPProductPlnItemDetails.{1}
                                                where   PPProductPlnItemDetails.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive' AND PPNorms.AAStatus='Alive' 
                                                AND PPSubMaterialGroups.AAStatus='Alive' AND ProductParent.AAStatus='Alive'
                                                AND PPProductPlnItemDetails.FK_PPProductPlnID={0}
                                                group by PPProductPlnItemDetails.FK_ARSOID,PPProductPlnItemDetails.FK_PPPhaseCfgID,PPProductPlnItemDetails.FK_PPProductPlnID
                                                ,PPProductPlnItemDetails.FK_PPProductPlnItemID,PPProductPlnItemDetails.PPProductPlnItemDetailID
                                                ,PPNormRMs.FK_ICProductID,PPProductPlnItemDetails.PPProductPlnItemDetailDate,PPProductPlnItemDetails.{1}
                                                Having SUM(PPProductPlnItemDetails.PPProductPlnItemDetailQty*PPNormRMQty) > 0"
                                                , iPPProductPlnID, strFieldProduct);
            return dal.GetDataSet(strQuery);
        }

        /// <summary>
        /// Viet Nguyen 2013.06.27
        /// Lấy Tổng NVL dung trong KHSX chi tiết va KHSX có trạng thái Reserved=True, k lấy NVL của kế hoạch: iPPExceptProductPlnID
        /// strFieldProduct: Sẽ tính theo field của sản phẩm nào trong KHSX chi tiết
        /// </summary>
        public double GetMaterialByProductPlnAndReservedMaterialExceptProductPln(int iPPProductPlnID, int iMaterialProductID, int iPPExceptProductPlnID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductPlnRawMaterials.PPProductPlnRawMaterialDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"select SUM(PPProductPlnRawMaterialQty)
                                                        from 
                                                        dbo.PPProductPlnRawMaterials
                                                        where   AAStatus='Alive'
                                                        AND FK_ICProductID={1}
                                                        AND (FK_PPProductPlnID={0} OR {0}=0)
                                                        AND FK_PPProductPlnID<>{2}
                                                        AND {3}
                                                        AND FK_PPProductPlnID in (select PPProductPlnID from PPProductPlns where AAStatus='Alive' 
							                                                --AND PPProductPlnIsReservedMaterial=1
                                                                            AND PPProductPlnStatusCombo not like 'Complete')"
                                                    , iPPProductPlnID, iMaterialProductID, iPPExceptProductPlnID, strQueryDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllDataByProductPlnAndType(int iPPProductPlnID,string strRawMaterialType)
        {
            string strQuery = string.Format(@"Select * from PPProductPlnRawMaterials where AAStatus='Alive' 
                                    AND (FK_PPProductPlnID={0} or {0}=0) AND (PPProductPlnRawMaterialTypeCombo='{1}' or '{1}'='')"
                                    , iPPProductPlnID, strRawMaterialType);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataByProductPlnAndReservedMaterialExceptProductPln(int iPPProductPlnID, int iMaterialProductID, int iPPExceptProductPlnID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDate = DALUtil.GenerateBeetween("PPProductPlnRawMaterials.PPProductPlnRawMaterialDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"select *
                                                        from 
                                                        dbo.PPProductPlnRawMaterials
                                                        where   AAStatus='Alive'
                                                        AND (FK_ICProductID={1} or {1}=0)
                                                        AND (FK_PPProductPlnID={0} OR {0}=0)
                                                        AND FK_PPProductPlnID<>{2}
                                                        AND {3}
                                                        AND FK_PPProductPlnID in (select PPProductPlnID from PPProductPlns where AAStatus='Alive' 
							                                                AND PPProductPlnIsReservedMaterial=1 AND PPProductPlnStatusCombo not like 'Complete')"
                                                    , iPPProductPlnID, iMaterialProductID, iPPExceptProductPlnID, strQueryDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataByProductPlnTypeInRange(int iPPProductPlnID, string strType, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQueryDateTime = DALUtil.GenerateBeetween("PPProductPlnRawMaterialDate",dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select * from PPProductPlnRawMaterials where AAStatus='Alive' 
                                                            AND (PPProductPlnRawMaterialTypeCombo='{1}' or '{1}'='')
                                                            AND (FK_PPProductPlnID={0} or {0}=0) AND {2}"
                                                , iPPProductPlnID, strType, strQueryDateTime);
            return dal.GetDataSet(strQuery);
        }
	}
	#endregion
}