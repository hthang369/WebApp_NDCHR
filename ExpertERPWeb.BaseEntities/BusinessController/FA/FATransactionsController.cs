using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;


namespace ExpertERP.BusinessEntities
{
	#region FATransactions
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:FATransactionsController
	//Created Date:Sunday, April 08, 2007
	//-----------------------------------------------------------
	
	public class FATransactionsController:BaseBusinessController
	{
        #region SP for Transactions of Proposal
        private readonly string spGetFATransactionsByFAProposalItemID =
                                "FATransactions_SelectByFAProposalItemID";

        private readonly string spGetFATransactionsByFAProposalID =
                                "FATransactions_SelectByFAProposalID";

        private readonly string spDeleteFATransactionsByFAProposalItemID =
                                "FATransactions_DeleteByFAProposalItemID";

        private readonly string spDeleteFATransactionsByFAProposalID =
                                "FATransactions_DeleteByFAProposalID";
        #endregion

        #region SP for Transactions of SellOrder
        private readonly string spGetFATransactionsByFASellOrderItemID =
                                "FATransactions_SelectByFASellOrderItemID";

        private readonly string spGetFATransactionsByFASellOrderItemIDAndFAProductSerieName =
                                "FATransactions_SelectByFASellOrderItemIDAndMAProductSerieName";

        private readonly string spGetFATransactionsByFASellOrderID =
                                "FATransactions_SelectByFASellOrderID";

        private readonly string spDeleteFATransactionsByFASellOrderItemID =
                                "FATransactions_DeleteByFASellOrderItemID";

        private readonly string spDeleteFATransactionsByFASellOrderID =
                                "FATransactions_DeleteByFASellOrderID";
        #endregion

        #region SP for Transactions of Commission
        private readonly string spGetFATransactionsByFACommissionItemID =
                                "FATransactions_SelectByFACommissionItemID";

        private readonly string spGetFATransactionsByFACommissionID =
                                "FATransactions_SelectByFACommissionID";

        private readonly string spDeleteFATransactionsByFACommissionItemID =
                                "FATransactions_DeleteByFACommissionItemID";

        private readonly string spDeleteFATransactionsByFACommissionID =
                                "FATransactions_DeleteByFACommissionID";
        #endregion

        #region SP for Transaction of Shipment
        private readonly string spGetFATransactionsByFAShipmentItemID =
                                "FATransactions_SelectByFAShipmentItemID";

        private readonly string spGetFATransactionsByFAShipmentID =
                                "FATransactions_SelectByFAShipmentID";

        private readonly string spGetFATransactionsByFAShipmentIDAndMAProductIDAndMAProductSerieName =
                                "FATransactions_SelectByFAShipmentIDAndMAProductIDAndMAProductSerieName";

        private readonly string spDeleteFATransactionsByFAShipmentItemID =
                                "FATransactions_DeleteByFAShipmentItemID";

        private readonly string spDeleteFATransactionsByFAShipmentID =
                                "FATransactions_DeleteByFAShipmentID";
        #endregion

        #region SP for Transaction of Invoice
        private readonly string spGetFATransactionsByFAInvoiceItemID =
                                "FATransactions_SelectByFAInvoiceItemID";

        private readonly string spGetFATransactionsByFAInvoiceID =
                                "FATransactions_SelectByFAInvoiceID";

        private readonly string spDeleteFATransactionsByFAInvoiceItemID =
                                "FATransactions_DeleteByFAInvoiceItemID";

        private readonly string spDeleteFATransactionsByFAInvoiceID =
                                "FATransactions_DeleteByFAInvoiceID";

        #endregion

        #region SP for Transaction of PurchaseOrder
        private readonly string spGetFATransactionsByFAPurchaseOrderItemID =
                                "FATransactions_SelectByFAPurchaseOrderItemID";

        private readonly string spGetFATransactionsByFAPurchaseOrderID =
                                "FATransactions_SelectByFAPurchaseOrderID";

        private readonly string spDeleteFATransactionsByFAPurchaseOrderItemID =
                                "FATransactions_DeleteByFAPurchaseOrderItemID";

        private readonly string spDeleteFATransactionsByFAPurchaseOrderID =
                                "FATransactions_DeleteByFAPurchaseOrderID";
        #endregion

        #region SP for Transaction of Receipt
        private readonly string spGetFATransactionsByFAReceiptItemID =
                               "FATransactions_SelectByFAReceiptItemID";

        private readonly string spGetFATransactionsByFAReceiptID =
                                "FATransactions_SelectByFAReceiptID";

        private readonly string spGetFATransactionsByFAReceiptIDAndMAProductIDAndMAProductSerieName =
                                "FATransactions_SelectByFAReceiptIDAndMAProductIDAndMAProductSerieName";

        private readonly string spDeleteFATransactionsByFAReceiptItemID =
                                "FATransactions_DeleteByFAReceiptItemID";

        private readonly string spDeleteFATransactionsByFAReceiptID =
                                "FATransactions_DeleteByFAReceiptID";
        #endregion

        #region SP for Transactions of SellReturn
        private readonly string spGetFATransactionsByFASellReturnItemID =
                                "FATransactions_SelectByFASellReturnItemID";

        private readonly string spGetFATransactionsByFASellReturnID =
                                "FATransactions_SelectByFASellReturnID";

        private readonly string spDeleteFATransactionsByFASellReturnItemID =
                                "FATransactions_DeleteByFASellReturnItemID";

        private readonly string spDeleteFATransactionsByFASellReturnID =
                                "FATransactions_DeleteByFASellReturnID";
        #endregion

        #region SP for Transactions of CreditNote
        private readonly string spGetFATransactionsByFACreditNoteItemID =
                                "FATransactions_SelectByFACreditNoteItemID";

        private readonly string spGetFATransactionsByFACreditNoteID =
                                "FATransactions_SelectByFACreditNoteID";

        private readonly string spDeleteFATransactionsByFACreditNoteItemID =
                                "FATransactions_DeleteByFACreditNoteItemID";

        private readonly string spDeleteFATransactionsByFACreditNoteID =
                                "FATransactions_DeleteByFACreditNoteID";
        #endregion

        #region SP for Transactions of Transfer        
        #region SP for Transactions of TransferStockIn
        private readonly string spGetFATransactionsByFATransferStockInItemID =
                                "FATransactions_SelectByFATransferStockInItemID";

        //private readonly string spGetFATransactionsByFATransferStockInID =
        //                        "FATransactions_SelectByFATransferStockInID";

        private readonly string spDeleteFATransactionsByFATransferStockInItemID =
                                "FATransactions_DeleteByFATransferStockInItemID";

        private readonly string spDeleteFATransactionTransferStockInItemsByFATransferID =
                                "FATransactions_DeleteFATransactionTransferStockInItemsByFATransferID";
        #endregion

        #region SP for Transactions of TransferStockOut
        private readonly string spGetFATransactionsByFATransferStockOutItemID =
                                "FATransactions_SelectByFATransferStockOutItemID";

        //private readonly string spGetFATransactionsByFATransferStockOutID =
        //                        "FATransactions_SelectByFATransferStockOutID";

        private readonly string spDeleteFATransactionsByFATransferStockOutItemID =
                                "FATransactions_DeleteByFATransferStockOutItemID";

        private readonly string spDeleteFATransactionTransferStockOutItemsByFATransferID =
                                "FATransactions_DeleteFATransactionTransferStockOutItemsByFATransferID";
        #endregion
        #endregion

        #region SP for Transactions of Zerlegung
        private readonly string spGetFATransactionsByFAZerlegungItemID =
                                "FATransactions_SelectByFAZerlegungItemID";

        private readonly string spGetFATransactionsZerlegungsByFAZerlegungID =
                                "FATransactions_SelectFATransactionZerlegungsByFAZerlegungID";

        private readonly string spDeleteFATransactionsByFAZerlegungItemID =
                                "FATransactions_DeleteByFAZerlegungItemID";

        private readonly string spDeleteFATransactionZerlegungsByFAZerlegungID =
                                "FATransactions_DeleteFATransactionZerlegungsByFAZerlegungID";
        #endregion

        #region SP for Transactions of Rezeptur
        private readonly string spGetFATransactionsByFARezepturMaterialID =
                                "FATransactions_SelectByFARezepturMaterialID";

        private readonly string spGetFATransactionsByFARezepturGewuerzID =
                                "FATransactions_SelectByFARezepturGewuerzID";

        private readonly string spGetFATransctionsByFARezepturHilfeID =
                                "FATransactions_SelectByFARezepturHilfeID";

        private readonly string spGetFATransactionRezeptursByFARezepturID =
                                "FATransactions_SelectFATransactionRezeptursByFARezepturID";

        private readonly string spDeleteFATransactionRezeptursByFARezepturID =
                                "FATransactions_DeleteFATransactionRezeptursByFARezepturID";
        private readonly string spDeleteFATransactionDarmsByFARezepturID =
                                "FATransactions_DeleteFATransactionDarmsByFARezepturID";

        private readonly string spDeleteFATransactionsByFARezepturMaterialID =
                                "FATransactions_DeleteByFARezepturMaterialID";
        private readonly string spDeleteFATransactionsByFARezepturGewuerzID =
                                "FATransactions_DeleteByFARezepturGewuerzID";
        private readonly string spDeleteFATransactionsByFARezepturHilfeID =
                                "FATransactions_DeleteByFARezepturHilfeID";
        
        #endregion

        private readonly string spGetTotalOrderedQuantityOfSerieNumberFromProposalItem =
                                "FATransactions_GetTotalOrderedQuantityOfSerieNumberFromProposalItem";

        private readonly string spGetTotalShippedQuantityOfSerieNumberFromSellOrderItem =
                                "FATransactions_GetTotalShippedQuantityOfSerieNumberFromSellOrderItem";

        private readonly string spGetTotalInvoicedQuantityOfSerieNumberFromShipmentItem =
                                "FATransactions_GetTotalInvoicedQuantityOfSerieNumberFromShipmentItem";
        private readonly string spGetTotalReceivedQuantityOfSerieNumberFromPurchaseOrderItem =
                                "FATransactions_GetTotalReceivedQuantityOfSerieNumberFromPurchaseOrderItem";

        private readonly string spGetTotalCreditNotedQuantityOfSerieNumberFromSellReturnItem =
                                "FATransactions_GetTotalCreditNotedQuantityOfSerieNumberFromSellReturnItem";

        private readonly string spGetTotalReceivedQuantityOfSerieNumberFromSellReturnItem =
                                "FATransactions_GetTotalReceivedQuantityOfSerieNumberFromSellReturnItem";

        private readonly string spGetTotalSellReturnedQuantityOfSerieNumberFromInvoiceItem =
                                "FATransactions_GetTotalSellReturnedQuantityOfSerieNumberFromInvoiceItem";

		public FATransactionsController()
		{
			dal= new DALBaseProvider("FATransactions",typeof(FATransactionsInfo));
        }

        #region Functions for Transaction of Proposal
        public DataSet GetFATransactionsByFAProposalItemID(int iFAProposalItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAProposalItemID, iFAProposalItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFAProposalItemID(int iFAProposalItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFAProposalItemID, iFAProposalItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFAProposalID(int iFAProposalID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAProposalID, iFAProposalID);
        }

        public void DeleteFATransactionsByFAProposalItemID(int iFAProposalItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAProposalItemID, iFAProposalItemID);
        }

        public void DeleteFATransactionsByFAProposalID(int iFAProposalID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAProposalID, iFAProposalID);
        }
        #endregion

        #region Functions for Transaction of SellOrder
        public DataSet GetFATransactionsByFASellOrderItemID(int iFASellOrderItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFASellOrderItemID, iFASellOrderItemID);
        }

        public FATransactionsInfo GetFATransactionsByFASellOrderItemIDAndFAProductSerieName(int iFASellOrderItemID, String strFAProductSerieName)
        {
            return (FATransactionsInfo)dal.GetDataObject(
                                                spGetFATransactionsByFASellOrderItemIDAndFAProductSerieName,
                                                iFASellOrderItemID, strFAProductSerieName);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFASellOrderItemID(int iFASellOrderItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFASellOrderItemID, iFASellOrderItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFASellOrderID(int iFASellOrderID)
        {
            return dal.GetDataSet(spGetFATransactionsByFASellOrderID, iFASellOrderID);
        }

        public void DeleteFATransactionsByFASellOrderItemID(int iFASellOrderItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFASellOrderItemID, iFASellOrderItemID);
        }

        public void DeleteFATransactionsByFASellOrderID(int iFASellOrderID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFASellOrderID, iFASellOrderID);
        }
        #endregion

        #region Functions for Transaction of Commission
        public DataSet GetFATransactionsByFACommissionItemID(int iFACommissionItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFACommissionItemID, iFACommissionItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFACommissionItemID(int iFACommissionItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFACommissionItemID, iFACommissionItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFACommissionID(int iFACommissionID)
        {
            return dal.GetDataSet(spGetFATransactionsByFACommissionID, iFACommissionID);
        }

        public void DeleteFATransactionsByFACommissionItemID(int iFACommissionItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFACommissionItemID, iFACommissionItemID);
        }

        public void DeleteFATransactionsByFACommissionID(int iFACommissionID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFACommissionID, iFACommissionID);
        }
        #endregion

        #region Functions for Transactions of Shipment
        public DataSet GetFATransactionsByFAShipmentItemID(int iFAShipmentItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAShipmentItemID, iFAShipmentItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFAShipmentItemID(int iFAShipmentItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFAShipmentItemID, iFAShipmentItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFAShipmentID(int iFAShipmentID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAShipmentID, iFAShipmentID);
        }

        public DataSet GetFATransactionsByFAShipmentIDAndMAProductIDAndMAProductSerieName(
                            int iFAShipmentID, int iMAProductID, String strMAProductSerieName)
        {
            return dal.GetDataSet(
                        spGetFATransactionsByFAShipmentIDAndMAProductIDAndMAProductSerieName,
                        iFAShipmentID, iMAProductID, strMAProductSerieName);
        }

        public void DeleteFATransactionsByFAShipmentItemID(int iFAShipmentItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAShipmentItemID, iFAShipmentItemID);
        }

        public void DeleteFATransactionsByFAShipmentID(int iFAShipmentID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAShipmentID, iFAShipmentID);
        }
        #endregion

        #region Functions for Transactions of Invoice
        public DataSet GetFATransactionsByFAInvoiceItemID(int iFAInvoiceItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAInvoiceItemID, iFAInvoiceItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFAInvoiceItemID(int iFAInvoiceItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFAInvoiceItemID, iFAInvoiceItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFAInvoiceID(int iFAInvoiceID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAInvoiceID, iFAInvoiceID);
        }

        public void DeleteFATransactionsByFAInvoiceItemID(int iFAInvoiceItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAInvoiceItemID, iFAInvoiceItemID);
        }

        public void DeleteFATransactionsByFAInvoiceID(int iFAInvoiceID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAInvoiceID, iFAInvoiceID);
        }
        #endregion

        #region Functions for Transactions of PurchaseOrder
        public DataSet GetFATransactionsByFAPurchaseOrderItemID(int iFAPurchaseOrderItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAPurchaseOrderItemID, iFAPurchaseOrderItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFAPurchaseOrderItemID(int iFAPurchaseOrderItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = GetFATransactionsByFAPurchaseOrderItemID(iFAPurchaseOrderItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowTransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowTransaction);
                    objFATransactionsInfo.Position = lstFATransactions.Count;
                    lstFATransactions.Add(objFATransactionsInfo);
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFAPurchaseOrderID(int iFAPurchaseOrderID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAPurchaseOrderID,iFAPurchaseOrderID);
        }

        public void DeleteFATransactionsByFAPurchaseOrderItemID(int iFAPurchaseOrderItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAPurchaseOrderItemID, iFAPurchaseOrderItemID);
        }

        public void DeleteFATransactionsByFAPurchaseOrderID(int iFAPurchaseOrderID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAPurchaseOrderID, iFAPurchaseOrderID);
        }
        #endregion

        #region Functions for Transactions of Receipt
        public DataSet GetFATransactionsByFAReceiptItemID(int iFAReceiptItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAReceiptItemID, iFAReceiptItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFAReceiptItemID(int iFAReceiptItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFAReceiptItemID, iFAReceiptItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFAReceiptID(int iFAReceiptID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAReceiptID, iFAReceiptID);
        }

        public DataSet GetFATransactionsByFAReceiptIDAndMAProductIDAndMAProductSerieName(
                            int iFAReceiptID, int iMAProductID, String strMAProductSerieName)
        {
            return dal.GetDataSet(
                        spGetFATransactionsByFAReceiptIDAndMAProductIDAndMAProductSerieName,
                        iFAReceiptID, iMAProductID, strMAProductSerieName);
        }

        public void DeleteFATransactionsByFAReceiptItemID(int iFAReceiptItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAReceiptItemID, iFAReceiptItemID);
        }

        public void DeleteFATransactionsByFAReceiptID(int iFAReceiptID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAReceiptID, iFAReceiptID);
        }
        #endregion

        #region Functions for Transaction of SellReturn
        public DataSet GetFATransactionsByFASellReturnItemID(int iFASellReturnItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFASellReturnItemID, iFASellReturnItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFASellReturnItemID(int iFASellReturnItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFASellReturnItemID, iFASellReturnItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFASellReturnID(int iFASellReturnID)
        {
            return dal.GetDataSet(spGetFATransactionsByFASellReturnID, iFASellReturnID);
        }

        public void DeleteFATransactionsByFASellReturnItemID(int iFASellReturnItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFASellReturnItemID, iFASellReturnItemID);
        }

        public void DeleteFATransactionsByFASellReturnID(int iFASellReturnID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFASellReturnID, iFASellReturnID);
        }
        #endregion

        #region Functions for Transaction of CreditNote
        public DataSet GetFATransactionsByFACreditNoteItemID(int iFACreditNoteItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFACreditNoteItemID, iFACreditNoteItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFACreditNoteItemID(int iFACreditNoteItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFACreditNoteItemID, iFACreditNoteItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        public DataSet GetFATransactionsByFACreditNoteID(int iFACreditNoteID)
        {
            return dal.GetDataSet(spGetFATransactionsByFACreditNoteID, iFACreditNoteID);
        }

        public void DeleteFATransactionsByFACreditNoteItemID(int iFACreditNoteItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFACreditNoteItemID, iFACreditNoteItemID);
        }

        public void DeleteFATransactionsByFACreditNoteID(int iFACreditNoteID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFACreditNoteID, iFACreditNoteID);
        }
        #endregion

        #region Functions for Transaction of TransferStockIn
        public DataSet GetFATransactionsByFATransferStockInItemID(int iFATransferStockInItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFATransferStockInItemID, iFATransferStockInItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFATransferStockInItemID(int iFATransferStockInItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFATransferStockInItemID, iFATransferStockInItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        //public DataSet GetFATransactionsByFATransferStockInID(int iFATransferStockInID)
        //{
        //    return dal.GetDataSet(spGetFATransactionsByFATransferStockInID, iFATransferStockInID);
        //}

        public void DeleteFATransactionsByFATransferStockInItemID(int iFATransferStockInItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFATransferStockInItemID, iFATransferStockInItemID);
        }

        public void DeleteFATransactionsTransferStockInByFATransferID(int iFATransferID)
        {
            dal.GetDataSet(spDeleteFATransactionTransferStockInItemsByFATransferID, iFATransferID);
        }
        #endregion

        #region Functions for Transaction of TransferStockOut
        public DataSet GetFATransactionsByFATransferStockOutItemID(int iFATransferStockOutItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFATransferStockOutItemID, iFATransferStockOutItemID);
        }

        public List<FATransactionsInfo> GetFATransactionsListByFATransferStockOutItemID(int iFATransferStockOutItemID)
        {
            List<FATransactionsInfo> lstFATransactions = new List<FATransactionsInfo>();
            DataSet ds = dal.GetDataSet(spGetFATransactionsByFATransferStockOutItemID, iFATransferStockOutItemID);
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow rowFATransaction in ds.Tables[0].Rows)
                {
                    FATransactionsInfo objFATransactionsInfo = (FATransactionsInfo)GetObjectFromDataRow(rowFATransaction);
                    if (objFATransactionsInfo != null)
                    {
                        objFATransactionsInfo.Position = lstFATransactions.Count;
                        lstFATransactions.Add(objFATransactionsInfo);
                    }
                }
            }
            return lstFATransactions;
        }

        //public DataSet GetFATransactionsByFATransferStockOutID(int iFATransferStockOutID)
        //{
        //    return dal.GetDataSet(spGetFATransactionsByFATransferStockOutID, iFATransferStockOutID);
        //}

        public void DeleteFATransactionsByFATransferStockOutItemID(int iFATransferStockOutItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFATransferStockOutItemID, iFATransferStockOutItemID);
        }

        public void DeleteFATransactionsTransferStockOutItemsByFATransferID(int iFATransferID)
        {
            dal.GetDataSet(spDeleteFATransactionTransferStockOutItemsByFATransferID, iFATransferID);
        }
        #endregion

        #region Functions for Transaction of Zerlegung
        public DataSet GetFATransactionsByFAZerlegungItemID(int iFAZerlegungItemID)
        {
            return dal.GetDataSet(spGetFATransactionsByFAZerlegungItemID, iFAZerlegungItemID);
        }

        public DataSet GetFATransactionZerlegungsByFAZerlegungID(int iFAZerlegungID)
        {
            return dal.GetDataSet(spGetFATransactionsZerlegungsByFAZerlegungID, iFAZerlegungID);
        }

        public void DeleteFATransactionsByFAZerlegungItemID(int iFAZerlegungItemID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFAZerlegungItemID, iFAZerlegungItemID);
        }

        public void DeleteFATransactionZerlegungsByFAZerlegungID(int iFAZerlegungID)
        {
            dal.GetDataSet(spDeleteFATransactionZerlegungsByFAZerlegungID, iFAZerlegungID);
        }

        #endregion

        #region Functions for Transaction of Rezeptur
        public DataSet GetFATransactionsByFARezepturMaterialID(int iFARezepturMaterialID)
        {
            return dal.GetDataSet(spGetFATransactionsByFARezepturMaterialID, iFARezepturMaterialID);
        }

        public DataSet GetFATransactionsByFARezepturGewuerzID(int iFARezepturGewuerzID)
        {
            return dal.GetDataSet(spGetFATransactionsByFARezepturGewuerzID, iFARezepturGewuerzID);
        }

        public DataSet GetFATransactionsByFARezepturHilfeID(int iFARezepturHilfeID)
        {
            return dal.GetDataSet(spGetFATransctionsByFARezepturHilfeID, iFARezepturHilfeID);
        }

        public DataSet GetFATransactionRezeptursByFARezepturID(int iFARezepturID)
        {
            return dal.GetDataSet(spGetFATransactionRezeptursByFARezepturID, iFARezepturID);
        }

        public void DeleteFATransactionRezeptursByFARezepturID(int iFARezepturID)
        {
            dal.GetDataSet(spDeleteFATransactionRezeptursByFARezepturID, iFARezepturID);
        }

        public void DeleteFATransactionDarmsByFARezepturID(int iFARezpeturID)
        {
            dal.GetDataSet(spDeleteFATransactionDarmsByFARezepturID, iFARezpeturID);
        }

        public void DeleteFATransactionsByFARezepturMaterialID(int iFARezepturMaterialID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFARezepturMaterialID, iFARezepturMaterialID);
        }

        public void DeleteFATransactionsByFARezepturGewuerzID(int iFARezepturGewuerzID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFARezepturGewuerzID, iFARezepturGewuerzID);
        }

        

        public void DeleteFATransactionsByFARezepturHilfeID(int iFARezepturHilfeID)
        {
            dal.GetDataSet(spDeleteFATransactionsByFARezepturHilfeID,iFARezepturHilfeID);
        }
        #endregion

        #region Get Total Quantity functions

        public double GetTotalOrderedQuantityOfSerieNumberFromProposalItem(String strFAProductSerieName, int iFAProposalItemID)
        {
            double dbTotalOrderedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalOrderedQuantityOfSerieNumberFromProposalItem, strFAProductSerieName, iFAProposalItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalOrderedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalOrderedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalShippedQuantityOfSerieNumberFromSellOrderItem(String strFAProductSerieName, int iFASellOrderItemID)
        {
            double dbTotalShippedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalShippedQuantityOfSerieNumberFromSellOrderItem, strFAProductSerieName, iFASellOrderItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalShippedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalShippedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }


        public double GetTotalInvoicedQuantityOfSerieNumberFromShipmentItem(String strFAProductSerieName, int iFAShipmentItemID)
        {
            double dbTotalInvoicedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalInvoicedQuantityOfSerieNumberFromShipmentItem, strFAProductSerieName, iFAShipmentItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalInvoicedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalInvoicedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalReceivedQuantityOfSerieNumberFromPurchaseOrderItem(String strFAProductSerieName, int iFAPurchaseOrderItemID)
        {
            double dbTotalReceivedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalReceivedQuantityOfSerieNumberFromPurchaseOrderItem, strFAProductSerieName, iFAPurchaseOrderItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalReceivedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalReceivedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalCreditNotedQuantityOfSerieNumberFromSellReturnItem(String strFAProductSerieName, int iFASellReturnItemID)
        {
            double dbTotalCreditNotedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalCreditNotedQuantityOfSerieNumberFromSellReturnItem, strFAProductSerieName, iFASellReturnItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalCreditNotedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalCreditNotedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalReceivedQuantityOfSerieNumberFromSellReturnItem(String strFAProductSerieName, int iFASellReturnItemID)
        {
            double dbTotalReceivedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalReceivedQuantityOfSerieNumberFromSellReturnItem, strFAProductSerieName, iFASellReturnItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalReceivedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalReceivedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        public double GetTotalSellReturnedQuantityOfSerieNumberFromInvoiceItem(String strFAProductSerieName, int iFAInvoiceItemID)
        {
            double dbTotalSellReturnedQuantity = 0;
            try
            {
                DataSet ds = dal.GetDataSet(spGetTotalSellReturnedQuantityOfSerieNumberFromInvoiceItem, strFAProductSerieName, iFAInvoiceItemID);
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dbTotalSellReturnedQuantity += Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                    }
                }

                return dbTotalSellReturnedQuantity;
            }
            catch (Exception)
            {
                return 0;
            }
        }
        #endregion
    }
	#endregion
}