using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region FAAssetUpgradeItems
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:FAAssetUpgradeItemsController
	//Created Date:04 Tháng Giêng 2012
	//-----------------------------------------------------------
	
	public class FAAssetUpgradeItemsController:BaseBusinessController
	{
		public FAAssetUpgradeItemsController()
		{
			dal= new DALBaseProvider("FAAssetUpgradeItems",typeof(FAAssetUpgradeItemsInfo));
		}

        #region Get Amt And Life By FAAssets --Vinh --26/11/2012
        public double GetAmtByFAAset(int iAssetID)
        {
            return GetAmtByFAAset(iAssetID, DateTime.MaxValue);
        }
        public double GetAmtByFAAset(int iAssetID,DateTime dtTo)
        {
            return GetSumColByFAAset(iAssetID, dtTo, "FAAssetUpgradeItemUnitPrice");
        }
        public double GetLifeByFAAset(int iAssetID)
        {
            return GetLifeByFAAset(iAssetID, DateTime.MaxValue);
        }
        public double GetLifeByFAAset(int iAssetID, DateTime dtTo)
        {
            return GetSumColByFAAset(iAssetID, dtTo, "FAAssetUpgradeItemMonthQty");
        }
        public double GetSumColByFAAset(int iAssetID,DateTime dtTo, string sColSum, int iHomeCurrency = 0)
        {
            String str = String.Format(@"SELECT SUM({1}) 
FROM FAAssetUpgradeItems a
INNER JOIN FAAssetUpgrades b ON a.AAStatus='Alive' AND b.AAStatus='Alive' AND a.FK_FAAssetUpgradeID = b.FAAssetUpgradeID
    AND FK_FAAssetID={0}
", iAssetID, sColSum);
            if (dtTo < DateTime.MaxValue & dtTo > DateTime.MinValue)
            {
                str += string.Format(@" AND FAAssetUpgradeDate <= '{0}'", dtTo.ToString("yyyyMMdd"));
            }
            if (iHomeCurrency > 0)
                str += string.Format(@" AND b.FK_GECurrencyID <> {0}", iHomeCurrency);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        public DataSet GetAllDataByAsset(int iFAAssetID)
        {
            string strQuery = string.Format(@"SELECT  FAAssetUpgradeItems.*
                                    FROM    dbo.FAAssetUpgradeItems
                                            INNER JOIN dbo.FAAssetUpgrades ON dbo.FAAssetUpgradeItems.FK_FAAssetUpgradeID = dbo.FAAssetUpgrades.FAAssetUpgradeID
                                          AND dbo.FAAssetUpgradeItems.AAStatus = 'Alive'
                                          AND dbo.FAAssetUpgrades.AAStatus = 'Alive'
                                          AND FK_FAAssetID = {0}", iFAAssetID);
            return GetDataSet(strQuery);
        }

        #endregion
        
    }
	#endregion
}