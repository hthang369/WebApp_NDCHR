using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ViewDocuments
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ViewDocumentsController
	//Created Date:02 Tháng Tám 2012
	//-----------------------------------------------------------
    public enum TransferAccountingDataType
    {
        Shipment = 0,
        Receipt = 1,
        Transfer = 2,
        ShpEquipment =3,
        PInvoice = 4,
        Invoice = 5,
        Voucher=6,
        InPmt=7,
        OutPmt=8,
        AssetDepr=9,
        ProductionOrdr=10,
        ConvertProduct=11,
        EmployeeContract = 12,
        EmployeeInsurance = 13,
        BonusAllowance = 14,
        RMShipment = 15,
        PO=16
    }

    
	public class ViewDocumentsController:BaseBusinessController
	{
        public static readonly String strDocumentTypeShipment = "Shipment";
        public static readonly String strDocumentTypeRMShipment = "RMShipment";
        public static readonly String strDocumentTypePO = "PO";
        public static readonly String strDocumentTypeReceipt = "Receipt";
        public static readonly String strDocumentTypeTransfer = "Transfer";
        public static readonly String strDocumentTypeShpEquipment = "ShpEquipment";
        public static readonly String strDocumentTypePInvoice = "PInvoice";
        public static readonly String strDocumentTypeInvoice = "Invoice";
        public static readonly String strDocumentTypeVoucher = "Voucher";
        public static readonly String strDocumentTypeInPmt = "InPmt";
        public static readonly String strDocumentTypeOutPmt = "OutPmt";
        public static readonly String strDocumentTypeAssetDepr = "AssetDepr";
        public static readonly String strDocumentTypeProductionOrdr = "ProductionOrdr";
        public static readonly String strDocumentTypeConvertProduct = "ConvertProduct";
        public static readonly String strDocumentTypeEmployeeContract = "EmployeeContract";
        public static readonly String strDocumentTypeEmployeeInsurance = "EmployeeIns";
        public static readonly String strDocumentTypeBonusAllowance = "BonusAllowance";

		public ViewDocumentsController()
		{
			dal= new DALBaseProvider("ViewDocuments",typeof(ViewDocumentsInfo));
		}

        public DataSet GetDataByTypeInRange(TransferAccountingDataType transferAccountingDataType, DateTime dtFrom, DateTime dtTo, String cstShipmentSubTypeNormal, String cstShipmentSubTypeProduction, String cstShipmentSubTypeUse, String strVoucherTypeInPmt, String strVoucherTypeOutPmt, String strVoucher, int iFromStockID,int iToStockID,int iCustomerID,int iSupplierID)
        {
            String strTable = String.Empty;
            String strType = String.Empty;
            String strValueType = String.Empty;
            switch (transferAccountingDataType)
            {
                case TransferAccountingDataType.Shipment:
                    strTable = "ICShipments";
                    strValueType = strDocumentTypeShipment;
                    strType = String.Format(" ICShipmentSubType = '{0}' AND (FK_ARCustomerID={1} OR 0={1})", cstShipmentSubTypeNormal,iCustomerID);
                    break;
                case TransferAccountingDataType.Receipt:
                    strTable = "ICReceipts";
                    strValueType = strDocumentTypeReceipt;
                    strType = String.Format(" (FK_APSupplierID={0} OR 0={0})",  iSupplierID);
                    break;
                case TransferAccountingDataType.Transfer:
                    strTable = "ICTransfers";
                    strValueType = strDocumentTypeTransfer;
                    strType = String.Format(" (FK_ICFromStockID = {0} OR  0={0}) AND (FK_ICToStockID = {1} OR 0={1}) ", iFromStockID, iToStockID);
                    break;
                case TransferAccountingDataType.ShpEquipment:
                    strTable = "ICShipments";
                    strType = String.Format(" (ICShipmentSubType = '{0}' OR ICShipmentSubType = '{1}') AND (FK_ARCustomerID={2} OR 0={2})", cstShipmentSubTypeProduction, cstShipmentSubTypeUse,iCustomerID);
                    strValueType = strDocumentTypeShpEquipment;
                    break;
                case TransferAccountingDataType.PInvoice:
                    strTable = "APPInvoices";
                    strValueType = strDocumentTypePInvoice;
                    strType = String.Format(" (FK_APSupplierID={0} OR 0={0})", iSupplierID);
                    break;
                case TransferAccountingDataType.Invoice:
                    strTable = "ARInvoices";
                    strValueType = strDocumentTypeInvoice;
                    strType = String.Format(" (FK_ARCustomerID={0} OR 0={0})", iCustomerID);
                    break;
                case TransferAccountingDataType.Voucher:
                    strTable = "GLVouchers";
                    strType = String.Format("GLVoucherTypeCombo = '{0}' AND (FK_ARCustomerID={1} OR 0={1}) AND (FK_APSupplierID={2} OR 0={2})", strVoucher,iCustomerID,iSupplierID);
                    strValueType = strDocumentTypeVoucher;
                    break;
                case TransferAccountingDataType.InPmt:
                    strTable = "GLVouchers";
                    strType = String.Format("GLVoucherTypeCombo = '{0}' AND (FK_ARCustomerID={1} OR 0={1}) ", strVoucherTypeInPmt,iCustomerID);
                    strValueType = strDocumentTypeInPmt;
                    break;
                case TransferAccountingDataType.OutPmt:
                    strTable = "GLVouchers";
                    strType = String.Format("GLVoucherTypeCombo = '{0}' AND (FK_APSupplierID={1} OR 0={1}) ", strVoucherTypeOutPmt,iSupplierID);
                    strValueType = strDocumentTypeOutPmt;
                    break;
                case TransferAccountingDataType.AssetDepr:
                    strTable = "FAAssetDeprs";
                    strValueType = strDocumentTypeAssetDepr;
                    break;
                case TransferAccountingDataType.ProductionOrdr:
                    strTable = "PPProductionOrdrs";
                    strValueType = strDocumentTypeProductionOrdr;
                    strType = String.Format("(FK_ICFromStockID = {0} OR  0={0}) AND (FK_ICToStockID = {1} OR 0={1}) AND PPProductionOrdrTypeCombo='{2}' ", iFromStockID, iToStockID, strDocumentTypeProductionOrdr);
                    break;
                case TransferAccountingDataType.EmployeeContract:
                    strTable = "HREmployeeContracts";
                    strValueType = strDocumentTypeEmployeeContract;
                    strType = String.Empty;
                    break;
                case TransferAccountingDataType.BonusAllowance:
                    strTable = "HRBonusAllowances";
                    strValueType = strDocumentTypeBonusAllowance;
                    strType = String.Empty;
                    break;  
                case TransferAccountingDataType.ConvertProduct:
                    strTable = "PPProductionOrdrs";
                    strValueType = strDocumentTypeConvertProduct;
                    strType = String.Format("(FK_ICFromStockID = {0} OR  0={0}) AND (FK_ICToStockID = {1} OR 0={1}) AND PPProductionOrdrTypeCombo='{2}' ", iFromStockID, iToStockID, strDocumentTypeConvertProduct);
                    break;
                case TransferAccountingDataType.RMShipment:
                    strTable = "ICShipments";
                    strValueType = strDocumentTypeRMShipment;
                    strType = String.Format(" (FK_ICStockID={0} OR 0={0}) AND ICShipmentTypeCombo = '{1}'", iFromStockID, cstShipmentSubTypeNormal);
                    break;
                case TransferAccountingDataType.PO:
                    strTable = "APPOs";
                    strValueType = strDocumentTypePO;
                    strType = String.Format(@"( FK_APSupplierID={0} OR 0={0} )",iSupplierID);
                    break;
            }
            String strPrefix = strTable.Remove(strTable.Length - 1);
            String strDate = DALUtil.GenerateBeetween(strPrefix + "Date", dtFrom, dtTo);
//            String strQuery = String.Format(@"SELECT    {2}ID AS ViewDocumentMainObjectID,
//                                                        {2}No AS ViewDocumentNo,
//                                                        {2}Desc AS ViewDocumentDesc,
//                                                        {2}Date AS ViewDocumentDate,
//                                                        AACreatedDate AS ViewDocumentCreateDate,
//                                                        AAUpdatedDate AS ViewDocumentUpdateDate,
//                                                        AACreatedUser AS ViewDocumentCreateUser,
//                                                        AACreatedUser AS ViewDocumentUpdateUser,
//                                                        '{1}' AS ViewDocumentType,
//                                                        '{0}' AS ViewDocumentTableName
//                                                        FROM {0} WHERE AAStatus='Alive'", strTable, strValueType,strPrefix );
            String strQuery = String.Format(@"SELECT   *
                                                        FROM {0} WHERE AAStatus='Alive'", strTable);
            if (strDate != String.Empty)
                strQuery += String.Format(" AND {0}", strDate);

            if (strType != String.Empty)
                strQuery += String.Format(" AND {0}", strType);

            return GetDataSet(strQuery);
        }

        public void UpdateObjectIDByID(string strTableName, int iNewID, int iOldID)
        {
            String strPrefix = strTableName.Remove(strTableName.Length - 1);
            String strQuery = String.Format("UPDATE {0}s SET {0}ID={1} WHERE {0}ID={2}", strPrefix,iOldID, iNewID);
            GetDataSet(strQuery);
        }


        public DataSet GetAllAliveAndDeleteObject(string strTableName)
        {
            String strQuery = String.Format("SELECT * FROM {0} WHERE AAStatus<>'Dummy'",strTableName);
            return GetDataSet(strQuery);
        }

        public void DeleleDocItemByDocID(string strTableName, int iDocID)
        {
            String strPrefix = strTableName.Remove(strTableName.Length - 1);
            String strQuery = String.Format("DELETE {0}Items WHERE FK_{0}ID={1}", strPrefix, iDocID);
            GetDataSet(strQuery);
        }

        public DataSet LayModuleANDDesc()
        {
            String str = String.Format(@"SELECT  STModuleName, STModuleDescriptionDescription
                                        FROM    dbo.STModules
                                        INNER JOIN dbo.STModuleDescriptions ON STModuleDescriptions.STModuleID = STModules.STModuleID
                                        ");
            return dal.GetDataSet(str);
        }

//        public DataSet GetAllPurchaseQuotByProcurementPln(int iProcurementPlnID)
//        {
//            String strQuery = String.Format(@"SELECT  APPurchaseQuotNo AS ViewDocumentNo,
//                                                        APPurchaseQuotDate AS ViewDocumentDate,
//                                                        'PurchaseQuot' AS ViewDocumentType,
//                                                        APPurchaseQuotID AS ViewDocumentMainObjectID,
//                                                        FK_APSupplierID
//                                                        FROM    APPurchaseQuots
//                                                        WHERE   AAStatus = 'Alive'
//                                                                AND FK_APProcurementPlnID = {0}", iProcurementPlnID);
//            return GetDataSet(strQuery);
//        }

//        public DataSet GetAllPOByProcurementPln(int iProcurementPlnID)
//        {
//            String strQuery = String.Format(@"  SELECT  APPONo AS ViewDocumentNo ,
//                                                        APPODate AS ViewDocumentDate ,
//                                                        'PO' AS ViewDocumentType,
//                                                        APPOID AS ViewDocumentMainObjectID,
//                                                        FK_APSupplierID
//                                                FROM    APPOs
//                                                WHERE   APPOID IN (
//                                                        SELECT  DISTINCT
//                                                                APPOID
//                                                        FROM    APPOs
//                                                                INNER JOIN APPOPurchaseQuots ON APPOs.APPOID = APPOPurchaseQuots.FK_APPOID
//                                                                INNER JOIN APPurchaseQuots ON APPurchaseQuots.APPurchaseQuotID = APPOPurchaseQuots.FK_APPurchaseQuotID
//                                                        WHERE   APPOs.AAStatus = 'Alive'
//                                                                AND APPOPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.FK_APProcurementPlnID = {0} )", iProcurementPlnID);
//            return GetDataSet(strQuery);
//        }

//        public DataSet GetAllReceiptByProcurementPln(int iProcurementPlnID)
//        {
//            String strQuery = String.Format(@"  SELECT  ICReceiptNo AS ViewDocumentNo ,
//                                                        ICReceiptDate AS ViewDocumentDate ,
//                                                        'Receipt' AS ViewDocumentType,
//                                                        ICReceiptID AS ViewDocumentMainObjectID,
//                                                        FK_APSupplierID
//                                                FROM    ICReceipts
//                                                WHERE   ICReceiptID IN (
//                                                        SELECT  DISTINCT
//                                                                ICReceiptID
//                                                        FROM    ICReceipts
//                                                                INNER JOIN ICReceiptPOs ON ICReceipts.ICReceiptID = ICReceiptPOs.FK_ICReceiptID
//                                                                INNER JOIN APPOs ON APPOs.APPOID = ICReceiptPOs.FK_APPOID
//                                                                INNER JOIN APPOPurchaseQuots ON APPOPurchaseQuots.FK_APPOID = APPOs.APPOID
//                                                                INNER JOIN APPurchaseQuots ON APPurchaseQuots.APPurchaseQuotID = APPOPurchaseQuots.FK_APPurchaseQuotID
//                                                        WHERE   ICReceipts.AAStatus = 'Alive'
//                                                                AND ICReceiptPOs.AAStatus = 'Alive'
//                                                                AND APPOs.AAStatus = 'Alive'
//                                                                AND APPOPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.FK_APProcurementPlnID = {0} )", iProcurementPlnID);
//            return GetDataSet(strQuery);
//        }

//        public DataSet GetAllQCByProcurementPln(int iProcurementPlnID)
//        {
//            String strQuery = String.Format(@" SELECT  ICQCNo AS ViewDocumentNo ,
//                                                        ICQCDate AS ViewDocumentDate ,
//                                                        'QC' AS ViewDocumentType,
//                                                        ICQCID AS ViewDocumentMainObjectID,
//                                                        FK_APSupplierID
//                                                FROM    ICQCs
//                                                WHERE   ICQCID IN (
//                                                        SELECT  DISTINCT
//                                                                ICQCID
//                                                        FROM    ICQCs
//                                                                INNER JOIN ICQCItems ON ICQCs.ICQCID = ICQCItems.FK_ICQCID
//                                                                INNER JOIN ICQCItemReceiptItems ON ICQCItems.ICQCItemID = ICQCItemReceiptItems.FK_ICQCItemID
//                                                                INNER JOIN ICReceiptItems ON ICReceiptItems.ICReceiptItemID = ICQCItemReceiptItems.FK_ICReceiptItemID
//                                                                INNER JOIN ICReceipts ON ICReceipts.ICreceiptID = ICReceiptItems.FK_ICReceiptID
//                                                                INNER JOIN ICReceiptPOs ON ICReceipts.ICReceiptID = ICReceiptPOs.FK_ICReceiptID
//                                                                INNER JOIN APPOs ON APPOs.APPOID = ICReceiptPOs.FK_APPOID
//                                                                INNER JOIN APPOPurchaseQuots ON APPOPurchaseQuots.FK_APPOID = APPOs.APPOID
//                                                                INNER JOIN APPurchaseQuots ON APPurchaseQuots.APPurchaseQuotID = APPOPurchaseQuots.FK_APPurchaseQuotID
//                                                        WHERE   ICReceipts.AAStatus = 'Alive'
//                                                                AND ICReceiptPOs.AAStatus = 'Alive'
//                                                                AND APPOs.AAStatus = 'Alive'
//                                                                AND APPOPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.AAStatus = 'Alive'
//                                                                AND APPurchaseQuots.FK_APProcurementPlnID = {0})", iProcurementPlnID);
//            return GetDataSet(strQuery);
        //        }

        #region ProcurementPln

        public List<ViewDocumentsInfo> LayMaChungTuTheoKeHoachMuaHang(int iAPProcurementPlnID)
        {   
            List<ViewDocumentsInfo> lstData = new List<ViewDocumentsInfo>();

            String strWhere = String.Format(@" AND FK_APProcurementPlnID = {0}", iAPProcurementPlnID);
            
            #region Lấy PR
            DataSet ds = dal.GetDataSet(LayQueryPR(strWhere, 0));
            List<BusinessObject> lstView = GetListFromDataset(ds);
            foreach(ViewDocumentsInfo objViewDocumentInfo in lstView)
            {
                lstData.Add(objViewDocumentInfo);
            }
	        #endregion

            #region Lấy RFQ
            ds = dal.GetDataSet(LayQueryRFQ(strWhere, 0));
            lstView = GetListFromDataset(ds);
            foreach (ViewDocumentsInfo objViewDocumentInfo in lstView)
            {
                lstData.Add(objViewDocumentInfo);
            }
            #endregion

            #region Lấy PO
            ds = dal.GetDataSet(LayQueryPO(strWhere, 0));
            lstView = GetListFromDataset(ds);
            foreach (ViewDocumentsInfo objViewDocumentInfo in lstView)
            {
                lstData.Add(objViewDocumentInfo);
            }
            #endregion

            #region Lấy Rcp
            ds = dal.GetDataSet(LayQueryRcp(strWhere, 0));
            lstView = GetListFromDataset(ds);
            foreach (ViewDocumentsInfo objViewDocumentInfo in lstView)
            {
                lstData.Add(objViewDocumentInfo);
            }
            #endregion

            return lstData;
        }

        public String LayQueryPR(String strWhere, int iLevel)
        {
            String strSelect = "DISTINCT APPRItemID";
            if(iLevel == 0)
            {
                strSelect = String.Format(@"DISTINCT APPRNo AS ViewDocumentNo, APPRDate AS ViewDocumentDate,  'PR' AS ViewDocumentType, APPRID AS ViewDocumentMainObjectID, APPRs.FK_APSupplierID");
            }
            else if(iLevel == 1)
            {
                strSelect = "SUM(APPRItemQty) AS Qty";
            }
            String str = String.Format(@"SELECT  {0}
                                        FROM    dbo.APPRItems
                                                INNER JOIN dbo.APPRs ON ( APPRs.APPRID = APPRItems.FK_APPRID
                                                                            AND APPRs.AAStatus = APPRItems.AAStatus
                                                                            AND APPRs.AAStatus = 'Alive'
                                                                        )
                                        WHERE   APPRItems.FK_APProcurementPlnItemID IN (
                                                SELECT  APProcurementPlnItemID
                                                FROM    dbo.APProcurementPlnItems
                                                WHERE   AAStatus = 'Alive' 
		                                        {1})", strSelect, strWhere);

            
            return str;
        }
        public String LayQueryRFQ(String strWhere, int iLevel)
        {
            String strSelect = "DISTINCT APRFQItemID";
            if (iLevel == 0)
            {
                strSelect = String.Format(@"DISTINCT APRFQNo AS ViewDocumentNo, APRFQDate AS ViewDocumentDate,  'RFQ' AS ViewDocumentType, APRFQID AS ViewDocumentMainObjectID, APRFQs.FK_APSupplierID");
            }
            else if (iLevel == 1)
            {
                strSelect = "SUM(APRFQItemQty) AS Qty";
            }
            String str = String.Format(@"SELECT  {0}
                                        FROM    dbo.APRFQItems
                                                INNER JOIN dbo.APRFQs ON ( APRFQs.APRFQID = APRFQItems.FK_APRFQID
                                                                           AND APRFQs.AAStatus = APRFQItems.AAStatus
                                                                           AND APRFQs.AAStatus = 'Alive'
                                                                         )
                                                INNER JOIN dbo.APPRItemRFQs ON ( APPRItemRFQs.FK_APRFQID = APRFQs.APRFQID
                                                                                 AND APPRItemRFQs.FK_APPRItemID = APRFQItems.FK_APPRItemID
										                                         AND APPRItemRFQs.APPRItemRFQQty != 0
                                                                               )
                                                INNER JOIN dbo.APPRItems ON ( APPRItems.APPRItemID = APPRItemRFQs.FK_APPRItemID
                                                                              AND APPRItems.AAStatus = APPRItemRFQs.AAStatus
                                                                              AND APPRItems.AAStatus = APRFQs.AAStatus
                                                                            )
                                        WHERE APRFQItems.FK_APPRItemID IN (
                                        {1}
                                        )", strSelect, LayQueryPR(strWhere, -1));


            return str;
        }
        public String LayQueryPO(String strWhere, int iLevel)
        {
            String strSelect = "DISTINCT APPOItemID";
            if (iLevel == 0)
            {
                strSelect = String.Format(@"DISTINCT APPONo AS ViewDocumentNo, APPODate AS ViewDocumentDate,  'PO' AS ViewDocumentType, APPOID AS ViewDocumentMainObjectID, APPOs.FK_APSupplierID");
            }
            else if (iLevel == 1)
            {
                strSelect = "SUM(APPOItemQty) AS Qty";
            }
            String str = String.Format(@"SELECT  {0}
                                        FROM    dbo.APPOItems
                                                INNER JOIN dbo.APPOs ON ( APPOs.APPOID = APPOItems.FK_APPOID
                                                                          AND APPOs.AAStatus = APPOItems.AAStatus
                                                                          AND APPOs.AAStatus = 'Alive'
                                                                        )
                                        WHERE   APPOItemID IN (
                                                ( SELECT    DISTINCT
                                                            FK_APPOItemID
                                                  FROM      dbo.APPRItemRFQPOItems
                                                  WHERE     AAStatus = 'Alive'
                                                            AND FK_APPRItemRFQID IN (
                                                            SELECT  APPRItemRFQID
                                                            FROM    dbo.APPRItemRFQs
                                                            WHERE   AAStatus = 'Alive'
                                                                    AND FK_APPRItemID IN ( {1} ) )
                                                )
                                                UNION
                                                ( SELECT    FK_APPOItemID
                                                  FROM      dbo.APPRItemPOItems
                                                  WHERE     AAStatus = 'Alive'
                                                            AND FK_APPRItemID IN ( {1} )
                                                ) )", strSelect, LayQueryPR(strWhere, -1));
            return str;
        }
        public String LayQueryRcp(String strWhere, int iLevel)
        {
            String strSelect = "DISTINCT APPOItemID";
            if (iLevel == 0)
            {
                strSelect = String.Format(@" DISTINCT ICReceiptNo AS ViewDocumentNo, ICReceiptDate AS ViewDocumentDate, 'Receipt' AS ViewDocumentType, ICReceiptID AS ViewDocumentMainObjectID, ICReceipts.FK_APSupplierID");
            }
            else if (iLevel == 1)
            {
                strSelect = "SUM(APPOItemQty) AS Qty";
            }
            String str = String.Format(@"SELECT  {0}
                                        FROM    dbo.ICReceiptItems
                                                INNER JOIN dbo.ICReceipts ON ( ICReceipts.ICReceiptID = ICReceiptItems.FK_ICReceiptID
                                                                                AND ICReceipts.AAStatus = ICReceiptItems.AAStatus
                                                                                AND ICReceipts.AAStatus = 'Alive'
                                                                                )
                                        WHERE   ICReceiptItemID IN (
                                                ( SELECT    FK_ICReceiptItemID
                                                    FROM      dbo.ICReceiptItemQCItems
                                                    WHERE     AAStatus = 'Alive'
                                                            AND FK_ICQCItemID IN (
                                                            SELECT  ICQCItemID
                                                            FROM    dbo.ICQCItems
                                                            WHERE   AAStatus = 'Alive'
                                                                    AND ICQCItemID IN (
                                                                    SELECT  FK_ICQCItemID
                                                                    FROM    dbo.ICQCItemPOItems
                                                                    WHERE   AAStatus = 'Alive'
                                                                            AND FK_APPOItemID IN ( {1} ) ) )
                                                )
                                                UNION
                                                ( SELECT    FK_ICReceiptItemID
                                                    FROM      dbo.ICReceiptItemPurchaseOrderItems
                                                    WHERE     AAStatus = 'Alive'
                                                            AND FK_APPOItemID IN ( {1} )
                                                ) )
                                        ", strSelect, LayQueryPO(strWhere, -1));
            return str;
        }

        #endregion
    }
	#endregion
}