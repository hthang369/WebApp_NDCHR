using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
    #region ViewInventoryStatistics
    //-----------------------------------------------------------
    //Generated By: GMC Studio
    //Class:ViewInventoryStatisticsController
    //Created Date:Thursday, October 25, 2012
    //-----------------------------------------------------------

    public enum NXTModule
    {
        Shipment = 0,
        Receipt = 1,
        ProductionOrdrIn = 2,
        ProductionOrdrOut = 3,
        AdjInvIn = 4,
        AdjInvOut = 5,
        TransferIn = 6,
        TransferOut = 7
    }
    public class ViewInventoryStatisticsController : BaseBusinessController
    {
        public ViewInventoryStatisticsController()
        {
            dal = new DALBaseProvider("ViewInventoryStatistics", typeof(ViewInventoryStatisticsInfo));
        }
        public DataSet GetAllDataByProductStockDate(int iProductID, int iStockID, int iStockTypeID, int iProductTypeID, int iProductGroupID, DateTime? dtFrom, DateTime? dtTo, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, String strApprovalStatusApproved, String sStockType = "")
        {
            //String strProduct = String.Format(@" AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True')");
            String strProduct = String.Format(@" SELECT ICProductID ,
        ICProductNo ,
        FK_ICProductGroupID ,
        ICProductName ,
        ICProductGroupName ,
        ICProductLength ,
        ICProductHeight ,
        ICProductWidth ,
        ICProductStkUOM
 INTO   #ICProducts
 FROM   ICProducts a
        LEFT JOIN ICProductGroups b ON b.AAStatus = 'Alive'                                       
                                        AND a.FK_ICProductGroupID = b.ICProductGroupID
WHERE a.AAStatus = 'Alive' AND ICProductIsStkItm = 'True'
");
            String strStockType = String.Format(@" SELECT ICStockID ,
        ICStockNo,
        ICStockName,
        FK_GLInventoryAccountID,
        ICStockSortOrder
 INTO   #ICStocks
 FROM   dbo.ICStocks
 WHERE  AAStatus = 'Alive'
", iStockTypeID);

            if (iStockTypeID > 0)
                strStockType += String.Format(@" AND FK_ICStockTypeID = {0}", iStockTypeID);
            if (iStockID > 0)
                strStockType += String.Format(@" AND ICStockID = {0}", iStockID);
            if (iProductID != 0)
            {
                strProduct += String.Format(@" AND ICProductID={0}", iProductID);
            }

            if (iProductTypeID != 0)
            {
                strProduct += String.Format(@" AND FK_ICProductTypeID = {0}", iProductTypeID);
            }

            if (iProductGroupID != 0)
            {
                strProduct += String.Format(@" AND FK_ICProductGroupID = {0}", iProductGroupID);
            }

            if (iDimension1ID != 0)
            {
                strProduct += String.Format(@" AND (FK_ICProductDimention1ID={0} OR FK_ICProductDimention2ID={0} OR FK_ICProductDimention3ID={0} OR FK_ICProductDimention4ID={0} OR FK_ICProductDimention5ID={0})", iDimension1ID);
            }

            if (iDimension2ID != 0)
            {
                strProduct += String.Format(@" AND (FK_ICProductDimention1ID={0} OR FK_ICProductDimention2ID={0} OR FK_ICProductDimention3ID={0} OR FK_ICProductDimention4ID={0} OR FK_ICProductDimention5ID={0})", iDimension2ID);
            }

            if (iDimension3ID != 0)
            {
                strProduct += String.Format(@" AND (FK_ICProductDimention1ID={0} OR FK_ICProductDimention2ID={0} OR FK_ICProductDimention3ID={0} OR FK_ICProductDimention4ID={0} OR FK_ICProductDimention5ID={0})", iDimension3ID);
            }

            if (iDimension4ID != 0)
            {
                strProduct += String.Format(@" AND (FK_ICProductDimention1ID={0} OR FK_ICProductDimention2ID={0} OR FK_ICProductDimention3ID={0} OR FK_ICProductDimention4ID={0} OR FK_ICProductDimention5ID={0})", iDimension4ID);
            }

            if (iDimension5ID != 0)
            {
                strProduct += String.Format(@" AND (FK_ICProductDimention1ID={0} OR FK_ICProductDimention2ID={0} OR FK_ICProductDimention3ID={0} OR FK_ICProductDimention4ID={0} OR FK_ICProductDimention5ID={0})", iDimension5ID);
            }

            #region Bo
            //            str += String.Format(@"SELECT 
            //		                                FK_ICProductID
            //		                                ,FK_ICProductGroupID
            //		                                ,SUM(ViewInventoryStatisticInQty) AS ViewInventoryStatisticInQty
            //		                                ,SUM(ViewInventoryStatisticInCost) AS ViewInventoryStatisticInCost
            //		                                ,SUM(ViewInventoryStatisticOutQty) AS ViewInventoryStatisticOutQty
            //		                                ,SUM(ViewInventoryStatisticOutCost) AS ViewInventoryStatisticOutCost
            //                                        ,SUM(ViewInventoryStatisticAdjInvIncQty) AS ViewInventoryStatisticAdjInvIncQty
            //                                        ,SUM(ViewInventoryStatisticAdjInvDecQty) AS ViewInventoryStatisticAdjInvDecQty
            //		                                ,FK_ICStockID
            //		                                ,ICStockName
            //                                FROM (
            //                                    --ShipmentItem FK_ICShipmentID
            //                                    SELECT	[ICShipmentItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,0 as ViewInventoryStatisticInQty
            //		                                    ,0 as ViewInventoryStatisticInCost
            //                                            ,([ICShipmentItems].[ICShipmentItemQty]) as ViewInventoryStatisticOutQty
            //		                                    ,([ICShipmentItems].ICShipmentItemCostTot) as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICShipmentItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (	(	(
            //					                                ([ICProducts] LEFT JOIN [ICShipmentItems] ON [ICProducts].[ICProductID] = [ICShipmentItems].[FK_ICProductID])
            //					                                LEFT JOIN [ICStocks] ON [ICShipmentItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //				                                INNER JOIN [ICShipments] ON [ICShipments].[ICShipmentID] = [ICShipmentItems].[FK_ICShipmentID])
            //			                                LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //					
            //                                    WHERE [ICShipmentItems].[AAStatus] = 'Alive' AND [ICShipments].[AAStatus] = 'Alive'
            //                                    AND [ICProducts].[AAStatus] = 'Alive'
            //                                    AND [ICStocks].[AAStatus] = 'Alive'
            //                                    AND [ICShipments].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICShipmentItems].FK_ICStockID={0} OR {0}=0)
            //                                    {1}{2}
            //                                    
            //                                    UNION ALL
            //                                    
            //                                    --ShipmentItem FK_PPProductionOrdrID
            //                                    SELECT	[ICShipmentItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,0 as ViewInventoryStatisticInQty
            //		                                    ,0 as ViewInventoryStatisticInCost
            //                                            ,([ICShipmentItems].[ICShipmentItemQty]) as ViewInventoryStatisticOutQty
            //		                                    ,([ICShipmentItems].ICShipmentItemCostTot) as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICShipmentItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (	(	(
            //					                                ([ICProducts] LEFT JOIN [ICShipmentItems] ON [ICProducts].[ICProductID] = [ICShipmentItems].[FK_ICProductID])
            //					                                LEFT JOIN [ICStocks] ON [ICShipmentItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //				                                INNER JOIN [PPProductionOrdrs] ON [PPProductionOrdrs].[PPProductionOrdrID] = [ICShipmentItems].[FK_PPProductionOrdrID])
            //			                                LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //					
            //                                    WHERE [ICShipmentItems].[AAStatus] = 'Alive' AND [PPProductionOrdrs].[AAStatus] = 'Alive'
            //                                    AND [ICProducts].[AAStatus] = 'Alive'
            //                                    AND [ICStocks].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICShipmentItems].FK_ICStockID={0} OR {0}=0)
            //                                    {1}{4}
            //                                    
            //                                    UNION ALL
            //
            //                                    --ReceiptItem --FK_PPProductionOrdrID
            //                                    Select [ICReceiptItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,[ICReceiptItems].[ICReceiptItemQty] as ViewInventoryStatisticInQty
            //		                                    ,[ICReceiptItems].ICReceiptItemCostTot as ViewInventoryStatisticInCost
            //		                                    ,0 as ViewInventoryStatisticOutQty
            //		                                    ,0 as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty	
            //		                                    ,[ICReceiptItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (((([ICProducts] LEFT JOIN [ICReceiptItems] ON [ICProducts].[ICProductID] = [ICReceiptItems].[FK_ICProductID])
            //					                                    LEFT JOIN [ICStocks] ON [ICReceiptItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //					                                    INNER JOIN [PPProductionOrdrs] ON [PPProductionOrdrs].[PPProductionOrdrID] = [ICReceiptItems].[FK_PPProductionOrdrID])
            //					                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //                                    Where [ICReceiptItems].[AAStatus] = 'Alive' AND [PPProductionOrdrs].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICReceiptItems].FK_ICStockID={0} OR {0}=0)
            //                                    {1}{4}
            //
            //                                    UNION ALL
            //
            //                                    --ReceiptItem --FK_ICReceiptID
            //                                    Select [ICReceiptItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,[ICReceiptItems].[ICReceiptItemQty] as ViewInventoryStatisticInQty
            //		                                    ,[ICReceiptItems].ICReceiptItemCostTot as ViewInventoryStatisticInCost
            //		                                    ,0 as ViewInventoryStatisticOutQty
            //		                                    ,0 as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty	
            //		                                    ,[ICReceiptItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (((([ICProducts] LEFT JOIN [ICReceiptItems] ON [ICProducts].[ICProductID] = [ICReceiptItems].[FK_ICProductID])
            //					                                    LEFT JOIN [ICStocks] ON [ICReceiptItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //					                                    INNER JOIN [ICReceipts] ON [ICReceipts].[ICReceiptID] = [ICReceiptItems].[FK_ICReceiptID])
            //					                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //                                    Where [ICReceiptItems].[AAStatus] = 'Alive' AND [ICReceipts].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    And [ICReceipts].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICReceiptItems].FK_ICStockID={0} OR {0}=0)
            //                                    {1}{3}
            //
            //                                    UNION ALL  
            //
            //                                    --TransferItem --Stock From
            //                                    Select [ICTransferItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,0 as ViewInventoryStatisticInQty
            //		                                    ,0 as ViewInventoryStatisticInCost
            //		                                    ,([ICTransferItems].[ICTransferItemQty]) as ViewInventoryStatisticOutQty
            //		                                    ,([ICTransferItems].ICTransferItemCostTot) as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICTransferItems].[FK_ICFromStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (((([ICProducts] LEFT JOIN [ICTransferItems] ON [ICProducts].[ICProductID] = [ICTransferItems].[FK_ICProductID])
            //				                                    LEFT JOIN [ICStocks] ON [ICTransferItems].[FK_ICFromStockID] = [ICStocks].[ICStockID])
            //				                                    INNER JOIN [ICTransfers] ON [ICTransfers].[ICTransferID] = [ICTransferItems].[FK_ICTransferID])
            //				                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //                                    Where [ICTransferItems].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    And [ICTransfers].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICTransferItems].[FK_ICFromStockID]={0} OR {0}=0)
            //                                    {1}{5}
            //
            //                                    UNION ALL
            //
            //                                    --TransferItem --Stock To
            //                                    Select  [ICTransferItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,[ICTransferItems].[ICTransferItemQty] as ViewInventoryStatisticInQty
            //		                                    ,[ICTransferItems].ICTransferItemCostTot as ViewInventoryStatisticInCost
            //		                                    ,0 as ViewInventoryStatisticOutQty
            //		                                    ,0 as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICTransferItems].[FK_ICToStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //                                    FROM (((([ICProducts] LEFT JOIN [ICTransferItems] ON [ICProducts].[ICProductID] = [ICTransferItems].[FK_ICProductID])
            //				                                    LEFT JOIN [ICStocks] ON [ICTransferItems].[FK_ICToStockID] = [ICStocks].[ICStockID])
            //				                                    INNER JOIN [ICTransfers] ON [ICTransfers].[ICTransferID] = [ICTransferItems].[FK_ICTransferID])
            //				                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //				
            //                                    Where [ICTransferItems].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    And [ICTransfers].[AAStatus] = 'Alive'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICTransferItems].[FK_ICToStockID]={0} OR {0}=0)
            //                                    {1}{5}
            //
            //                                    UNION ALL
            //
            //                                    --AdjInvItem --TypeCombo DecQty                                      
            //                                    Select [ICAdjInvItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,0 as ViewInventoryStatisticInQty
            //		                                    ,0 as ViewInventoryStatisticInCost
            //		                                    ,0 as ViewInventoryStatisticOutQty
            //		                                    ,ICAdjInvItemCostTot as ViewInventoryStatisticOutCost
            //                                            ,0 as ViewInventoryStatisticAdjInvIncQty
            //                                            ,[ICAdjInvItems].[ICAdjInvItemQty] as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICAdjInvItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //
            //                                    FROM (((([ICProducts] LEFT JOIN [ICAdjInvItems] ON [ICProducts].[ICProductID] = [ICAdjInvItems].[FK_ICProductID])
            //				                                    LEFT JOIN [ICStocks] ON [ICAdjInvItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //				                                    INNER JOIN [ICAdjInvs] ON [ICAdjInvs].[ICAdjInvID] = [ICAdjInvItems].[FK_ICAdjInvID])
            //				                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //                                    Where [ICAdjInvItems].[AAStatus] = 'Alive' AND [ICAdjInvs].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    And [ICAdjInvs].[AAStatus] = 'Alive'
            //                                    And [ICAdjInvItems].[ICAdjInvItemTypeCombo] = 'DecQty'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICAdjInvItems].[FK_ICStockID]={0} OR {0}=0)
            //                                    {1}{6}
            //
            //                                    UNION ALL
            //
            //                                    --AdjInvItem --TypeCombo IncQty
            //                                    Select  [ICAdjInvItems].[FK_ICProductID] as FK_ICProductID
            //		                                    ,[ICProducts].[ICProductName] as ICProductName
            //		                                    ,dbo.ICProductGroups.ICProductGroupID as FK_ICProductGroupID
            //		                                    ,dbo.ICProductGroups.ICProductGroupName as ICProductGroupName
            //		                                    ,0 as ViewInventoryStatisticInQty
            //		                                    ,ICAdjInvItemCostTot as ViewInventoryStatisticInCost
            //		                                    ,0 as ViewInventoryStatisticOutQty
            //		                                    ,0 as ViewInventoryStatisticOutCost
            //                                            ,[ICAdjInvItems].[ICAdjInvItemQty] as ViewInventoryStatisticAdjInvIncQty
            //                                            ,0 as ViewInventoryStatisticAdjInvDecQty
            //		                                    ,[ICAdjInvItems].[FK_ICStockID] as FK_ICStockID
            //		                                    ,[ICStocks].[ICStockName] as ICStockName
            //                                    FROM (((([ICProducts] LEFT JOIN [ICAdjInvItems] ON [ICProducts].[ICProductID] = [ICAdjInvItems].[FK_ICProductID])
            //				                                    LEFT JOIN [ICStocks] ON [ICAdjInvItems].[FK_ICStockID] = [ICStocks].[ICStockID])
            //				                                    INNER JOIN [ICAdjInvs] ON [ICAdjInvs].[ICAdjInvID] = [ICAdjInvItems].[FK_ICAdjInvID])
            //				                                    LEFT JOIN [ICProductGroups] ON [ICProducts].FK_ICProductGroupID = [ICProductGroups].ICProductGroupID)
            //                                    Where [ICAdjInvItems].[AAStatus] = 'Alive' AND [ICAdjInvs].[AAStatus] = 'Alive'
            //                                    And [ICProducts].[AAStatus] = 'Alive'
            //                                    And [ICStocks].[AAStatus] = 'Alive'
            //                                    And [ICAdjInvs].[AAStatus] = 'Alive'
            //                                    And [ICAdjInvItems].[ICAdjInvItemTypeCombo] = 'IncQty'
            //                                    AND dbo.ICProductGroups.AAStatus <> 'Delete'
            //                                    AND ([ICAdjInvItems].[FK_ICStockID]={0} OR {0}=0)
            //                                    {1}{6}
            //
            //                                ) AS TB
            //                                WHERE ViewInventoryStatisticInQty!=0 OR ViewInventoryStatisticOutQty!=0 OR ViewInventoryStatisticAdjInvIncQty!=0 OR ViewInventoryStatisticAdjInvDecQty!=0
            //                                GROUP BY FK_ICProductID
            //		                                ,ICProductName
            //		                                ,FK_ICProductGroupID
            //		                                ,ICProductGroupName
            //		                                ,FK_ICStockID
            //		                                ,ICStockName", iStockID, strProduct + strDimention, ConvertDateFromDateToByColumn("ICShipmentDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICReceiptDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("PPProductionOrdrDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICTransferDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICAdjInvDate", dtFrom, dtTo));
            #endregion
            strProduct += " ORDER BY ICProductID";
            strStockType += " ORDER BY ICStockID";
            String str = string.Format(@"{0}
{1}
CREATE UNIQUE INDEX idxICProductID
ON #ICProducts (ICProductID)

CREATE UNIQUE INDEX idxICStockID
ON #ICStocks (ICStockID)
", strProduct, strStockType);

            strProduct = "1=1 ";//String.Format(@" AND FK_ICProductID IN (SELECT ICProductID FROM #ICProducts)");

            String strChungDau = String.Format(@"  SELECT 
	                                                FK_ICProductID,
	                                                FK_ICStockID,
	
	                                                ROUND(SUM(ViewInventoryStatisticBeforeQty), 6) AS ViewInventoryStatisticBeforeQty,
	                                                SUM(ViewInventoryStatisticBeforeCost) AS ViewInventoryStatisticBeforeCost,
	
	                                                ROUND(SUM(ViewInventoryStatisticInQty), 6) AS ViewInventoryStatisticInQty,
	                                                SUM(ViewInventoryStatisticInCost) AS ViewInventoryStatisticInCost,
	                                                ROUND(SUM(ViewInventoryStatisticOutQty), 6) AS ViewInventoryStatisticOutQty,	                                                
	                                                SUM(ViewInventoryStatisticOutCost) AS ViewInventoryStatisticOutCost,

	                                                ROUND(SUM(ViewInventoryStatisticAdjInvIncQty), 6) AS ViewInventoryStatisticAdjInvIncQty,
	                                                ROUND(SUM(ViewInventoryStatisticAdjInvDecQty), 6) AS ViewInventoryStatisticAdjInvDecQty,
	                                                SUM(ViewInventoryStatisticAdjInvIncCost) AS ViewInventoryStatisticAdjInvIncCost,
	                                                SUM(ViewInventoryStatisticAdjInvDecCost) AS ViewInventoryStatisticAdjInvDecCost,
	
	                                                ROUND(SUM(ViewInventoryStatisticBeforeQty+ViewInventoryStatisticInQty-ViewInventoryStatisticOutQty+ViewInventoryStatisticAdjInvIncQty-ViewInventoryStatisticAdjInvDecQty), 6) AS ViewInventoryStatisticAfterQty ,
                                                    SUM(ViewInventoryStatisticBeforeCost+ViewInventoryStatisticInCost-ViewInventoryStatisticOutCost+ViewInventoryStatisticAdjInvIncCost-ViewInventoryStatisticAdjInvDecCost) AS ViewInventoryStatisticAfterCost
                                                FROM
                                                (");

            String strDauKy = String.Format(@"
	                                                --Đầu kỳ
	                                                --ShipmentItem ICShipments
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                ShpItem.FK_ICStockID,

                                                        (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticBeforeQty,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.AAStatus='Alive' AND ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICShipments Shp ON Shp.AAStatus='Alive' AND ShpItem.FK_ICShipmentID = Shp.ICShipmentID
		                                                INNER JOIN #ICStocks stk ON ShpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{2}

	                                                UNION ALL
	
	                                                --ShipmentItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                ShpItem.FK_ICStockID,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticBeforeQty,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.AAStatus='Alive' AND ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ProductionOrd.AAStatus='Alive' AND ShpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		                                                INNER JOIN #ICStocks stk ON ShpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{4}

	                                                UNION ALL
	
	                                                --ReceiptItem ICReceipts
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                RcpItem.FK_ICStockID,

		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticBeforeQty,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.AAStatus='Alive' AND RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICReceipts Rcp ON Rcp.AAStatus='Alive' AND RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
		                                                INNER JOIN #ICStocks stk ON RcpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{3}

	                                                UNION ALL
	
	                                                --ReceiptItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                RcpItem.FK_ICStockID,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticBeforeQty,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.AAStatus='Alive' AND RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ProductionOrd.AAStatus='Alive' AND RcpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		                                                INNER JOIN #ICStocks stk ON RcpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{4}

	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                TranItem.FK_ICFromStockID AS FK_ICStockID,
		
		                                                (-1) * TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty,
		                                                (-1) * TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.AAStatus='Alive' AND TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON Trans.AAStatus='Alive' AND TranItem.FK_ICTransferID = Trans.ICTransferID
		                                                INNER JOIN #ICStocks stk ON TranItem.FK_ICFromStockID = stk.ICStockID
	                                                WHERE {1}{5}
		
	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                TranItem.FK_ICToStockID AS FK_ICStockID,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.AAStatus='Alive' AND TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON Trans.AAStatus='Alive' AND TranItem.FK_ICTransferID = Trans.ICTransferID
		                                                INNER JOIN #ICStocks stk ON TranItem.FK_ICToStockID = stk.ICStockID
	                                                WHERE {1}{5} 
	
	                                                UNION ALL
	
	                                                --AdjInvItem DecQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                AdjInvItem.FK_ICStockID,
		
		                                                (-1) * AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticBeforeQty,
		                                                (-1) * AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.AAStatus='Alive' AND AdjInvItem.FK_ICProductID = Product.ICProductID AND AdjInvItem.ICAdjInvItemTypeCombo='DecQty'
		                                                INNER JOIN dbo.ICAdjInvs Adj ON Adj.AAStatus='Alive' AND AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		                                                INNER JOIN #ICStocks stk ON AdjInvItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{6}
                                                    --AND Adj.ICAdjInvApprovalStatusCombo='{7}'   	                                                
                                                    
	                                                UNION ALL
	
	                                                --AdjInvItem IncQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                AdjInvItem.FK_ICStockID,
		
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticBeforeQty,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.AAStatus='Alive' AND AdjInvItem.FK_ICProductID = Product.ICProductID AND AdjInvItem.ICAdjInvItemTypeCombo='IncQty'
		                                                INNER JOIN dbo.ICAdjInvs Adj ON Adj.AAStatus='Alive' AND AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		                                                INNER JOIN #ICStocks stk ON AdjInvItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{6}
                                                    --AND Adj.ICAdjInvApprovalStatusCombo='{7}'                                               
                                                ", iStockID, strProduct, ConvertDateFromDateToByColumn("ICShipmentDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICReceiptDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("PPProductionOrdrDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICTransferDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICAdjInvDate", null, ((DateTime)dtFrom).AddDays(-1)), strApprovalStatusApproved);

            String strTrongKy = String.Format(@"
                                                    UNION ALL

                                                    --Trong kỳ
	                                                --ShipmentItem ICShipments
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                ShpItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                ShpItem.ICShipmentItemQty AS ViewInventoryStatisticOutQty,
		                                                ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.AAStatus='Alive' AND ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICShipments Shp ON Shp.AAStatus='Alive' AND ShpItem.FK_ICShipmentID = Shp.ICShipmentID
		                                                INNER JOIN #ICStocks stk ON ShpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{2}
	
	                                                UNION ALL
	
	                                                --ShipmentItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                ShpItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                ShpItem.ICShipmentItemQty AS ViewInventoryStatisticOutQty,
		                                                ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.AAStatus='Alive' AND ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ProductionOrd.AAStatus='Alive' AND ShpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		                                                INNER JOIN #ICStocks stk ON ShpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{4}
	
	                                                UNION ALL
	
	                                                --ReceiptItem ICReceipts
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                RcpItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticInQty,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
		                                                #ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.AAStatus='Alive' AND RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICReceipts Rcp ON Rcp.AAStatus='Alive' AND RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
		                                                INNER JOIN #ICStocks stk ON RcpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{3}
	
	                                                UNION ALL
	
	                                                --ReceiptItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                RcpItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticInQty,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.AAStatus='Alive' AND RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ProductionOrd.AAStatus='Alive' AND RcpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		                                                INNER JOIN #ICStocks stk ON RcpItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{4}
	
	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                TranItem.FK_ICFromStockID AS FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticOutQty,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.AAStatus='Alive' AND TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON Trans.AAStatus='Alive' AND TranItem.FK_ICTransferID = Trans.ICTransferID
		                                                INNER JOIN #ICStocks stk ON TranItem.FK_ICFromStockID = stk.ICStockID

	                                                WHERE {1}{5}
		
	                                                UNION ALL
	
	                                                --TransferItem To
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                TranItem.FK_ICToStockID AS FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticInQty,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.AAStatus='Alive' AND TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON Trans.AAStatus='Alive' AND TranItem.FK_ICTransferID = Trans.ICTransferID
		                                                INNER JOIN #ICStocks stk ON TranItem.FK_ICToStockID = stk.ICStockID

	                                                WHERE {1}{5}
	
	                                                UNION ALL
	
	                                                --AdjInvItem DecQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                AdjInvItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.AAStatus='Alive' AND AdjInvItem.FK_ICProductID = Product.ICProductID AND AdjInvItem.ICAdjInvItemTypeCombo='DecQty'
		                                                INNER JOIN dbo.ICAdjInvs Adj ON Adj.AAStatus='Alive' AND AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		                                                INNER JOIN #ICStocks stk ON AdjInvItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{6}--AND Adj.ICAdjInvApprovalStatusCombo='{7}'   
                                                    
	                                                UNION ALL
	
	                                                --AdjInvItem IncQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                AdjInvItem.FK_ICStockID,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost
	                                                FROM 
	                                                    #ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.AAStatus='Alive' AND AdjInvItem.FK_ICProductID = Product.ICProductID AND AdjInvItem.ICAdjInvItemTypeCombo='IncQty'
		                                                INNER JOIN dbo.ICAdjInvs Adj ON Adj.AAStatus='Alive' AND AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		                                                INNER JOIN #ICStocks stk ON AdjInvItem.FK_ICStockID = stk.ICStockID
	                                                WHERE {1}{6}
	                                                --AND Adj.ICAdjInvApprovalStatusCombo='{7}'   
                                                    ", iStockID, strProduct, ConvertDateFromDateToByColumn("ICShipmentDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICReceiptDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("PPProductionOrdrDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICTransferDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICAdjInvDate", dtFrom, dtTo), strApprovalStatusApproved);

            String strChungCuoi = String.Format(@"
                                                    ) AS TB
                                                    GROUP BY FK_ICProductID, FK_ICStockID");

            //            String strChungCuoi = String.Format(@"
            //                                                    ) AS TB
            //                                                    GROUP BY FK_ICProductID, FK_ICProductGroupID, FK_ICStockID, ICProductName, ICProductGroupName, ICStockName, ICProductLength, ICProductHeight, ICProductWidth, ICProductUOM
            //                                                ) AS TB1
            //                                            ) AS TB2");

            str += string.Format(@"SELECT 
	                                                FK_ICProductID,
	                                                FK_ICProductGroupID,
	                                                KQ.FK_ICStockID,
                                                    ICProductName,
                                                    ICProductGroupName,
                                                    ICStockName,
                                                    ICProductLength,
                                                    ICProductHeight,
                                                    ICProductWidth,
	                                                ICProductStkUOM as ICProductUOM,
                                                    stk.FK_GLInventoryAccountID,
                                                    ICStockSortOrder,
	
	                                                ViewInventoryStatisticBeforeQty,
	                                                CASE WHEN ViewInventoryStatisticBeforeQty = 0 THEN 0 ELSE ROUND(ViewInventoryStatisticBeforeCost/ViewInventoryStatisticBeforeQty,6) END as ViewInventoryStatisticBeforeUnitCost,
	                                                ViewInventoryStatisticBeforeCost,
	
	                                                ViewInventoryStatisticInQty,
	                                                CASE WHEN ViewInventoryStatisticInQty = 0 THEN 0 ELSE ROUND(ViewInventoryStatisticInCost/ViewInventoryStatisticInQty,6) END as ViewInventoryStatisticInUnitCost,
	                                                ViewInventoryStatisticInCost,

	                                                ViewInventoryStatisticOutQty,
	                                                CASE WHEN ViewInventoryStatisticOutQty = 0 THEN 0 ELSE ROUND(ViewInventoryStatisticOutCost/ViewInventoryStatisticOutQty,6) END as ViewInventoryStatisticOutUnitCost,
	                                                ViewInventoryStatisticOutCost,

	                                                ViewInventoryStatisticAdjInvIncQty,
	                                                ViewInventoryStatisticAdjInvDecQty,
	                                                ViewInventoryStatisticAdjInvIncCost,
	                                                ViewInventoryStatisticAdjInvDecCost,
	
	                                                ViewInventoryStatisticAfterQty AS ViewInventoryStatisticAfterQty,
                                                    CASE WHEN ViewInventoryStatisticAfterQty = 0 THEN 0 ELSE ROUND(ViewInventoryStatisticAfterCost/ViewInventoryStatisticAfterQty,6) END as ViewInventoryStatisticAfterUnitCost,
	                                                ViewInventoryStatisticAfterCost
                                                FROM ({0}) as KQ
                                                    INNER JOIN dbo.#ICProducts Prd ON KQ.FK_ICProductID = Prd.ICProductID
                                                    --INNER JOIN dbo.ICProductGroups FullPrdGrp ON FullPrd.FK_ICProductGroupID = FullPrdGrp.ICProductGroupID
                                                    INNER JOIN dbo.#ICStocks stk ON KQ.FK_ICStockID = stk.ICStockID
                                                WHERE   ViewInventoryStatisticBeforeQty <> 0 OR 
                                                        ViewInventoryStatisticBeforeCost <> 0 OR 
                                                        ViewInventoryStatisticInQty <> 0 OR         
                                                        ViewInventoryStatisticInCost <> 0 OR 
                                                        ViewInventoryStatisticOutQty <> 0 OR         
                                                        ViewInventoryStatisticOutCost <> 0 OR 
                                                        ViewInventoryStatisticAdjInvIncQty <> 0 OR 
                                                        ViewInventoryStatisticAdjInvDecQty <> 0 OR 
                                                        ViewInventoryStatisticAdjInvIncCost <> 0 OR 
                                                        ViewInventoryStatisticAdjInvDecCost <> 0
                                                ORDER BY ICProductNo,ICStockNo

DROP TABLE #ICProducts
DROP TABLE #ICStocks
", strChungDau + strDauKy + strTrongKy + strChungCuoi);

            return dal.GetDataSet(str);
        }

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Tính tổng tồng kho
        /// </summary>
        /// <returns></returns>
        public Double GetTotalInvQtyByProductStockDate(int iProductID, int iStockID, int iStockTypeID, int iProductTypeID, int iProductGroupID, DateTime dtFrom, DateTime dtTo, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, String strApprovalStatusApproved)
        {
            double dbTotalInvQty = 0;

            DataSet dsViewInventoryStatistics = NXT(iProductID, iStockID, iStockTypeID, iProductTypeID, iProductGroupID, dtFrom, dtTo, iDimension1ID, iDimension2ID, iDimension3ID, iDimension4ID, iDimension5ID);
            List<BusinessObject> lstViewInventoryStatistics = this.GetListFromDataset(dsViewInventoryStatistics);
            foreach (ViewInventoryStatisticsInfo objViewInventoryStatisticInfo in lstViewInventoryStatistics)
            {
                dbTotalInvQty += objViewInventoryStatisticInfo.ViewInventoryStatisticAfterQty;
            }
            return dbTotalInvQty;
        }

        public DataSet GetAllDataByProductStockDateLotNo(int iProductID, int iStockID, int iStockTypeID, int iProductTypeID, int iProductGroupID, DateTime? dtFrom, DateTime? dtTo, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, String strApprovalStatusApproved)
        {
            String strProduct = String.Format(@" AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True')");
            String strDimention = "";
            String strStockType = String.Format(@"(SELECT ICStockID FROM dbo.ICStocks WHERE AAStatus='Alive' AND (FK_ICStockTypeID = {0} OR {0} = 0 )) ", iStockTypeID);
            if (iProductID != 0)
            {
                strProduct += String.Format(@" AND FK_ICProductID={0}", iProductID);
            }

            if (iProductTypeID != 0)
            {
                strProduct += String.Format(@" AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND FK_ICProductTypeID = {0})", iProductTypeID);
            }

            if (iProductGroupID != 0)
            {
                strProduct += String.Format(@" AND FK_ICProductID IN (SELECT ICProductID FROM dbo.ICProducts WHERE AAStatus='Alive' AND FK_ICProductGroupID = {0})", iProductGroupID);
            }

            if (iDimension1ID != 0)
            {
                strDimention += String.Format(@"AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND (FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}))", iDimension1ID);
            }

            if (iDimension2ID != 0)
            {
                strDimention += String.Format(@"AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND (FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}))", iDimension2ID);
            }

            if (iDimension3ID != 0)
            {
                strDimention += String.Format(@"AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND (FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}))", iDimension3ID);
            }

            if (iDimension4ID != 0)
            {
                strDimention += String.Format(@"AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND (FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}))", iDimension4ID);
            }

            if (iDimension5ID != 0)
            {
                strDimention += String.Format(@"AND FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND (FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}))", iDimension5ID);
            }

            String strChungDau = String.Format(@"  SELECT 
	                                                FK_ICProductID,
	                                                FK_ICProductGroupID,
	                                                FK_ICStockID,
                                                    ICProductLotNo,
                                                    ICProductName,
                                                    ICProductGroupName,
                                                    ICStockName,
                                                    ICProductLength,
                                                    ICProductHeight,
                                                    ICProductWidth,
	                                                ICProductUOM,
                                                    ISNULL((SELECT FK_GLInventoryAccountID FROM dbo.ICStocks WHERE AAStatus='Alive' AND ICStockID = FK_ICStockID), 0) AS FK_GLInventoryAccountID,
                                                    ISNULL((SELECT ICStockSortOrder FROM dbo.ICStocks WHERE AAStatus='Alive' AND ICStockID = FK_ICStockID), 0) AS ICStockSortOrder,
	
	                                                ROUND(SUM(ViewInventoryStatisticBeforeQty), 6) AS ViewInventoryStatisticBeforeQty,
	                                                ISNULL(SUM(ViewInventoryStatisticBeforeCost)/NULLIF(ROUND(SUM(ViewInventoryStatisticBeforeQty), 6),0),0) AS ViewInventoryStatisticBeforeUnitCost,
	                                                SUM(ViewInventoryStatisticBeforeCost) AS ViewInventoryStatisticBeforeCost,
	
	                                                ROUND(SUM(ViewInventoryStatisticInQty), 6) AS ViewInventoryStatisticInQty,
	                                                ISNULL(SUM(ViewInventoryStatisticInCost)/NULLIF(ROUND(SUM(ViewInventoryStatisticInQty), 6),0),0) AS ViewInventoryStatisticInUnitCost,
	                                                SUM(ViewInventoryStatisticInCost) AS ViewInventoryStatisticInCost,
	                                                ROUND(SUM(ViewInventoryStatisticOutQty), 6) AS ViewInventoryStatisticOutQty,
	                                                ISNULL(SUM(ViewInventoryStatisticOutCost)/NULLIF(ROUND(SUM(ViewInventoryStatisticOutQty), 6),0),0) AS ViewInventoryStatisticOutUnitCost,
	                                                SUM(ViewInventoryStatisticOutCost) AS ViewInventoryStatisticOutCost,
	                                                ROUND(SUM(ViewInventoryStatisticAdjInvIncQty), 6) AS ViewInventoryStatisticAdjInvIncQty,
	                                                ROUND(SUM(ViewInventoryStatisticAdjInvDecQty), 6) AS ViewInventoryStatisticAdjInvDecQty,
	                                                SUM(ViewInventoryStatisticAdjInvIncCost) AS ViewInventoryStatisticAdjInvIncCost,
	                                                SUM(ViewInventoryStatisticAdjInvDecCost) AS ViewInventoryStatisticAdjInvDecCost,
	
	                                                ROUND((ROUND(SUM(ViewInventoryStatisticBeforeQty), 6) + ROUND(SUM(ViewInventoryStatisticInQty), 6) - ROUND(SUM(ViewInventoryStatisticOutQty), 6) + ROUND(SUM(ViewInventoryStatisticAdjInvIncQty), 6) - ROUND(SUM(ViewInventoryStatisticAdjInvDecQty), 6)), 6) AS ViewInventoryStatisticAfterQty,
	                                                ISNULL(SUM(ViewInventoryStatisticAfterCost)/NULLIF(ROUND(SUM(ViewInventoryStatisticAfterQty), 6),0),0) AS ViewInventoryStatisticAfterUnitCost,
	                                                SUM(ViewInventoryStatisticAfterCost) AS ViewInventoryStatisticAfterCost
                                                FROM
                                                (");

            String strDauKy = String.Format(@"
	                                                --Đầu kỳ
	                                                --ShipmentItem ICShipments
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                ShpItem.FK_ICStockID,
                                                        ShpItem.ICShipmentItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=ShpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICShipments Shp ON ShpItem.FK_ICShipmentID = Shp.ICShipmentID
		 
	                                                WHERE Product.AAStatus='Alive' AND Shp.AAStatus='Alive' AND ShpItem.AAStatus='Alive'
                                                    AND (ShpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND ShpItem.FK_ICStockID IN {8}
                                                    {1}{2}

	                                                UNION ALL
	
	                                                --ShipmentItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                ShpItem.FK_ICStockID,
                                                        ShpItem.ICShipmentItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=ShpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ShpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		 
	                                                WHERE Product.AAStatus='Alive' AND ProductionOrd.AAStatus='Alive' AND ShpItem.AAStatus='Alive'
                                                	AND (ShpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND ShpItem.FK_ICStockID IN {8}
                                                    {1}{4}

	                                                UNION ALL
	
	                                                --ReceiptItem ICReceipts
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                RcpItem.FK_ICStockID,
                                                        RcpItem.ICReceiptItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=RcpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICReceipts Rcp ON RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
		 
	                                                WHERE Product.AAStatus='Alive' AND Rcp.AAStatus='Alive' AND RcpItem.AAStatus='Alive'
                                                	AND (RcpItem.FK_ICStockID={0} OR {0}=0 )
                                                    AND RcpItem.FK_ICStockID IN {8}
                                                    {1}{3}

	                                                UNION ALL
	
	                                                --ReceiptItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                RcpItem.FK_ICStockID,
                                                        RcpItem.ICReceiptItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=RcpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON RcpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		 
	                                                WHERE Product.AAStatus='Alive' AND ProductionOrd.AAStatus='Alive' AND RcpItem.AAStatus='Alive'
                                                	AND (RcpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND RcpItem.FK_ICStockID IN {8}
                                                    {1}{4}

	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                TranItem.FK_ICFromStockID AS FK_ICStockID,
                                                        TranItem.ICTransferItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=TranItem.FK_ICFromStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                (-1) * TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                (-1) * TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
		 
	                                                WHERE Product.AAStatus='Alive' AND Trans.AAStatus='Alive' AND TranItem.AAStatus='Alive'
                                                	AND (TranItem.FK_ICFromStockID={0} OR {0}=0)
                                                    AND TranItem.FK_ICFromStockID IN {8}
                                                    {1}{5}
		
	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                TranItem.FK_ICToStockID AS FK_ICStockID,
                                                        TranItem.ICTransferItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=TranItem.FK_ICToStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
		 
	                                                WHERE Product.AAStatus='Alive' AND Trans.AAStatus='Alive' AND TranItem.AAStatus='Alive'
                                                    
                                                    AND (TranItem.FK_ICToStockID={0} OR {0}=0)
                                                    AND TranItem.FK_ICToStockID IN {8}
                                                    {1}{5} 
	
	                                                UNION ALL
	
	                                                --AdjInvItem DecQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                AdjInvItem.FK_ICStockID,
                                                        AdjInvItem.ICAdjInvItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=AdjInvItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                (-1) * AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                (-1) * AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICAdjInvs Adj ON AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		 
	                                                WHERE Product.AAStatus='Alive' AND Adj.AAStatus='Alive' AND AdjInvItem.AAStatus='Alive'
                                                    --AND Adj.ICAdjInvApprovalStatusCombo='{7}'   	                                                
                                                    AND AdjInvItem.ICAdjInvItemTypeCombo='DecQty'
                                                	AND (AdjInvItem.FK_ICStockID={0} OR {0}=0)
                                                    AND AdjInvItem.FK_ICStockID IN {8}
                                                    {1}{6}
	
	                                                UNION ALL
	
	                                                --AdjInvItem IncQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                AdjInvItem.FK_ICStockID,
                                                        AdjInvItem.ICAdjInvItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=AdjInvItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICAdjInvs Adj ON AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		 
	                                                WHERE Product.AAStatus='Alive' AND Adj.AAStatus='Alive' AND AdjInvItem.AAStatus='Alive'
                                                    --AND Adj.ICAdjInvApprovalStatusCombo='{7}'                                               
                                                    AND AdjInvItem.ICAdjInvItemTypeCombo='IncQty'
                                                	AND (AdjInvItem.FK_ICStockID={0} OR {0}=0)
                                                    AND AdjInvItem.FK_ICStockID IN {8}
                                                    {1}{6}
                                                ", iStockID, strProduct + strDimention, ConvertDateFromDateToByColumn("ICShipmentDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICReceiptDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("PPProductionOrdrDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICTransferDate", null, ((DateTime)dtFrom).AddDays(-1)), ConvertDateFromDateToByColumn("ICAdjInvDate", null, ((DateTime)dtFrom).AddDays(-1)), strApprovalStatusApproved, strStockType);

            String strTrongKy = String.Format(@"
                                                    UNION ALL

                                                    --Trong kỳ
	                                                --ShipmentItem ICShipments
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                ShpItem.FK_ICStockID,
                                                        ShpItem.ICShipmentItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=ShpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                ShpItem.ICShipmentItemQty AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICShipments Shp ON ShpItem.FK_ICShipmentID = Shp.ICShipmentID
		 
	                                                WHERE Product.AAStatus='Alive' AND Shp.AAStatus='Alive' AND ShpItem.AAStatus='Alive'
                                                    AND (ShpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND ShpItem.FK_ICStockID IN {8}
                                                    {1}{2}
	
	                                                UNION ALL
	
	                                                --ShipmentItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                ShpItem.FK_ICStockID,
                                                        ShpItem.ICShipmentItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=ShpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                ShpItem.ICShipmentItemQty AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICShipmentItems ShpItem ON ShpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON ShpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		 
	                                                WHERE Product.AAStatus='Alive' AND ProductionOrd.AAStatus='Alive' AND ShpItem.AAStatus='Alive'
                                                	AND (ShpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND ShpItem.FK_ICStockID IN {8}
                                                    {1}{4}
	
	                                                UNION ALL
	
	                                                --ReceiptItem ICReceipts
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                RcpItem.FK_ICStockID,
                                                        RcpItem.ICReceiptItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=RcpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICReceipts Rcp ON RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
		 
	                                                WHERE Product.AAStatus='Alive' AND Rcp.AAStatus='Alive' AND RcpItem.AAStatus='Alive'
                                                	AND (RcpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND RcpItem.FK_ICStockID IN {8}
                                                    {1}{3}
	
	                                                UNION ALL
	
	                                                --ReceiptItem PPProductionOrdrs
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                RcpItem.FK_ICStockID,
                                                        RcpItem.ICReceiptItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=RcpItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICReceiptItems RcpItem ON RcpItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.PPProductionOrdrs ProductionOrd ON RcpItem.FK_PPProductionOrdrID = ProductionOrd.PPProductionOrdrID
		 
	                                                WHERE Product.AAStatus='Alive' AND ProductionOrd.AAStatus='Alive' AND RcpItem.AAStatus='Alive'
                                                	AND (RcpItem.FK_ICStockID={0} OR {0}=0)
                                                    AND RcpItem.FK_ICStockID IN {8}
                                                    {1}{4}
	
	                                                UNION ALL
	
	                                                --TransferItem From
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                TranItem.FK_ICFromStockID AS FK_ICStockID,
                                                        TranItem.ICTransferItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=TranItem.FK_ICFromStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
		 
	                                                WHERE Product.AAStatus='Alive' AND Trans.AAStatus='Alive' AND TranItem.AAStatus='Alive'
                                                	AND (TranItem.FK_ICFromStockID={0} OR {0}=0)
                                                    AND TranItem.FK_ICFromStockID IN {8}
                                                    {1}{5}
		
	                                                UNION ALL
	
	                                                --TransferItem To
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                TranItem.FK_ICToStockID AS FK_ICStockID,
                                                        TranItem.ICTransferItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=TranItem.FK_ICToStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICTransferItems TranItem ON TranItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
		 
	                                                WHERE Product.AAStatus='Alive' AND Trans.AAStatus='Alive' AND TranItem.AAStatus='Alive'
                                                	AND (TranItem.FK_ICToStockID={0} OR {0}=0)
                                                    AND TranItem.FK_ICToStockID IN {8}
                                                    {1}{5}
	
	                                                UNION ALL
	
	                                                --AdjInvItem DecQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                AdjInvItem.FK_ICStockID,
                                                        AdjInvItem.ICAdjInvItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=AdjInvItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                0 AS ViewInventoryStatisticAdjInvIncQty,
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAdjInvDecQty,
                                                        0 AS ViewInventoryStatisticAdjInvIncCost,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                (-1) * AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                (-1) * AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICAdjInvs Adj ON AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		 
	                                                WHERE Product.AAStatus='Alive' AND Adj.AAStatus='Alive' AND AdjInvItem.AAStatus='Alive'
	                                                --AND Adj.ICAdjInvApprovalStatusCombo='{7}'   
                                                    AND AdjInvItem.ICAdjInvItemTypeCombo='DecQty'
                                                	AND (AdjInvItem.FK_ICStockID={0} OR {0}=0)
                                                    AND AdjInvItem.FK_ICStockID IN {8}
                                                    {1}{6}
	
	                                                UNION ALL
	
	                                                --AdjInvItem IncQty
	                                                SELECT
		                                                Product.ICProductID AS FK_ICProductID,
		                                                Product.FK_ICProductGroupID,
		                                                AdjInvItem.FK_ICStockID,
                                                        AdjInvItem.ICAdjInvItemLotNo AS ICProductLotNo,
                                                        Product.ICProductName,
                                                        (SELECT TOP 1 ProductGroup.ICProductGroupName FROM dbo.ICProductGroups ProductGroup WHERE ProductGroup.AAStatus='Alive' AND ProductGroup.ICProductGroupID=Product.FK_ICProductGroupID) AS ICProductGroupName,
                                                        (SELECT TOP 1 Stock.ICStockName FROM dbo.ICStocks Stock WHERE Stock.AAStatus='Alive' AND Stock.ICStockID=AdjInvItem.FK_ICStockID) AS ICStockName,
                                                        Product.ICProductLength,
                                                        Product.ICProductHeight,
                                                        Product.ICProductWidth,
		                                                Product.ICProductStkUOM AS ICProductUOM,
		
		                                                0 AS ViewInventoryStatisticBeforeQty,
		                                                0 AS ViewInventoryStatisticBeforeUnitCost,
		                                                0 AS ViewInventoryStatisticBeforeCost,
		
		                                                0 AS ViewInventoryStatisticInQty,
		                                                0 AS ViewInventoryStatisticInUnitCost,
		                                                0 AS ViewInventoryStatisticInCost,
		                                                0 AS ViewInventoryStatisticOutQty,
		                                                0 AS ViewInventoryStatisticOutUnitCost,
		                                                0 AS ViewInventoryStatisticOutCost,
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAdjInvIncQty,
		                                                0 AS ViewInventoryStatisticAdjInvDecQty,
                                                        AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAdjInvIncCost,
		                                                0 AS ViewInventoryStatisticAdjInvDecCost,
		
		                                                AdjInvItem.ICAdjInvItemQty AS ViewInventoryStatisticAfterQty,
		                                                0 AS ViewInventoryStatisticAfterUnitCost,
		                                                AdjInvItem.ICAdjInvItemCostTot AS ViewInventoryStatisticAfterCost
	                                                FROM 
		                                                dbo.ICProducts Product
		                                                INNER JOIN dbo.ICAdjInvItems AdjInvItem ON AdjInvItem.FK_ICProductID = Product.ICProductID
		                                                INNER JOIN dbo.ICAdjInvs Adj ON AdjInvItem.FK_ICAdjInvID = Adj.ICAdjInvID
		 
	                                                WHERE Product.AAStatus='Alive' AND Adj.AAStatus='Alive' AND AdjInvItem.AAStatus='Alive'
	                                                --AND Adj.ICAdjInvApprovalStatusCombo='{7}'   
                                                    AND AdjInvItem.ICAdjInvItemTypeCombo='IncQty'
                                                	AND (AdjInvItem.FK_ICStockID={0} OR {0}=0)
                                                    AND AdjInvItem.FK_ICStockID IN {8}
                                                    {1}{6}
                                                    ", iStockID, strProduct + strDimention, ConvertDateFromDateToByColumn("ICShipmentDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICReceiptDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("PPProductionOrdrDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICTransferDate", dtFrom, dtTo), ConvertDateFromDateToByColumn("ICAdjInvDate", dtFrom, dtTo), strApprovalStatusApproved, strStockType);

            String strChungCuoi = String.Format(@"
                                                    ) AS TB
                                                    GROUP BY FK_ICProductID, FK_ICProductGroupID, FK_ICStockID, ICProductName, ICProductGroupName, ICStockName, ICProductLength, ICProductHeight, ICProductWidth, ICProductUOM, ICProductLotNo");

            //            String strChungCuoi = String.Format(@"
            //                                                    ) AS TB
            //                                                    GROUP BY FK_ICProductID, FK_ICProductGroupID, FK_ICStockID, ICProductName, ICProductGroupName, ICStockName, ICProductLength, ICProductHeight, ICProductWidth, ICProductUOM
            //                                                ) AS TB1
            //                                            ) AS TB2");

            String str = strChungDau + strDauKy + strTrongKy + strChungCuoi;
            return dal.GetDataSet(str);
        }


        public String ConvertDateFromDateToByColumn(String strColumnName, DateTime? dtFrom, DateTime? dtTo)
        {
            String str = "";
            if (dtFrom == null && dtTo != null)
            {
                str += String.Format(@"   AND CONVERT(VARCHAR(20), {0}, 112) <= CONVERT(VARCHAR(20),'{1}',112)", strColumnName, dtTo.Value.ToString("yyyyMMdd"));
            }
            else if (dtFrom != null && dtTo == null)
            {
                str += String.Format(@"   AND CONVERT(VARCHAR(20), {0}, 112) >= CONVERT(VARCHAR(20),'{1}',112)", strColumnName, dtFrom.Value.ToString("yyyyMMdd"));
            }
            else if (dtFrom != null && dtTo != null)
            {
                str += String.Format(@"   AND CONVERT(VARCHAR(20), {0}, 112) >= CONVERT(VARCHAR(20),'{1}',112)
                                          AND CONVERT(VARCHAR(20), {0}, 112) <= CONVERT(VARCHAR(20),'{2}',112)", strColumnName, dtFrom.Value.ToString("yyyyMMdd"), dtTo.Value.ToString("yyyyMMdd"));
            }
            return str;
        }

        /// <summary>
        /// Viet Nguyen 2014.08.04
        /// Tính Nhập - Xuất
        /// </summary>
        /// <returns></returns>
        public Double GetInvQtyByProductStockDate(int iProductID, int iStockID, int iStockTypeID, int iProductTypeID, int iProductGroupID, DateTime dtFrom, DateTime dtTo, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, Boolean isLayDauKy, string strLotNo = "")
        {
            double dbTotalInvQty = 0;
            DataSet dsViewInventoryStatistics = NXT(iProductID, iStockID, iStockTypeID, iProductTypeID, iProductGroupID, dtFrom, dtTo, iDimension1ID, iDimension2ID, iDimension3ID, iDimension4ID, iDimension5ID, strLotNo, false, isLayDauKy);
            List<BusinessObject> lstViewInventoryStatistics = this.GetListFromDataset(dsViewInventoryStatistics);
            foreach (ViewInventoryStatisticsInfo objViewInventoryStatisticInfo in lstViewInventoryStatistics)
            {
                dbTotalInvQty += objViewInventoryStatisticInfo.ViewInventoryStatisticAfterQty;
            }
            return dbTotalInvQty;
        }

        #region Nhap Xuat Ton
        public DataSet CalcInventoryStatisticsStkQtyByProductStockAndLotNo(DateTime dtFrom, DateTime dtTo, string pKeyProduct, string pKeyStock, string pLotNo)
        {
            object[] _objParrs = {dtFrom
                    ,dtTo
                    ,pKeyProduct
                    ,pKeyStock
                    ,pLotNo
                                };
            return SqlDatabaseHelper.RunStoredProcedure("spL_CalcInventoryStatisticsStkQtyByProductStockAndLotNo", _objParrs);
        }
        public DataSet CalcInventoryStatisticsStkQtyByProductAndStock(DateTime dtFrom, DateTime dtTo, string pKeyProduct, string pKeyStock)
        {
            object[] _objParrs = {dtFrom
                    ,dtTo
                    ,pKeyProduct
                    ,pKeyStock
                                };
            return SqlDatabaseHelper.RunStoredProcedure("spL_CalcInventoryStatisticsStkQtyByProductAndStock", _objParrs);
        }
        public DataSet CalcInventoryStatisticsQtyByProductAndStock(DateTime dtFrom, DateTime dtTo, string pKeyProduct, string pKeyStock)
        {
            object[] _objParrs = {dtFrom
                    ,dtTo
                    ,pKeyProduct
                    ,pKeyStock
                                };
            return SqlDatabaseHelper.RunStoredProcedure("spL_CalcInventoryStatisticsQtyByProductAndStock", _objParrs);
        }
        public DataSet NXT(int iICProductID, int iICStockID, int iICStockTypeID, int iICProductTypeID, int iICProductGroupID, DateTime dtFrom, DateTime dtTo, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, String strLotNo = "", Boolean isShowLotNo = false, Boolean isLayDauKy = true, Boolean isDVTQD = false, bool isShowLotSx = false, string strLotSx = "", string sIOF02Combo = "", string sIOF03Combo = "")
        {
            String strProductANDStockQueryExc = GetNXTProductANDStockQuery(iICProductID, iICProductTypeID, iICProductGroupID, iICStockID, iICStockTypeID, iDimension1ID, iDimension2ID, iDimension3ID, iDimension4ID, iDimension5ID, sIOF02Combo, sIOF03Combo);
            String strQueryMain = GetNXTQueryMain();

            String strData = String.Format(@"  {0}
                                                UNION ALL
                                                {1}
                                                UNION ALL
                                                {2}
                                                UNION ALL
                                                {3}
                                                UNION ALL
                                                {4}
                                                UNION ALL
                                                {5}
                                                UNION ALL
                                                {6}
                                                UNION ALL
                                                {7}",
                                                GetNXTModuleQuery(NXTModule.Shipment, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.Receipt, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.ProductionOrdrIn, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.ProductionOrdrOut, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.AdjInvIn, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.AdjInvOut, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.TransferIn, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx),
                                                GetNXTModuleQuery(NXTModule.TransferOut, strQueryMain, dtFrom, dtTo, strLotNo, isShowLotNo, isLayDauKy, isDVTQD, strLotSx, isShowLotSx));

            String strStkQty = String.Format(@",ViewInventoryStatisticBeforeStkQty, 
										        ViewInventoryStatisticInStkQty, 
										        ViewInventoryStatisticOutStkQty,
										        ViewInventoryStatisticAfterStkQty,
ViewInventoryStatisticAdjInvIncStkQty,
ViewInventoryStatisticAdjInvDecStkQty");
            String strSUMStkQty = String.Format(@",SUM(ViewInventoryStatisticBeforeStkQty) as ViewInventoryStatisticBeforeStkQty, 
										        SUM(ViewInventoryStatisticInStkQty) as ViewInventoryStatisticInStkQty, 
										        SUM(ViewInventoryStatisticOutStkQty) as ViewInventoryStatisticOutStkQty,
										        SUM(ViewInventoryStatisticAfterStkQty) as ViewInventoryStatisticAfterStkQty, 
										        SUM(ViewInventoryStatisticAdjInvIncStkQty) as ViewInventoryStatisticAdjInvIncStkQty,
										        SUM(ViewInventoryStatisticAdjInvDecStkQty) as ViewInventoryStatisticAdjInvDecStkQty");
            String strQuery = String.Format(@"  THAMSO1

                                                SELECT #Product.ICProductID AS FK_ICProductID, #Product.ICProductName, #Product.FK_ICProductGroupID, #Product.ICProductGroupName,
                                                #Product.ICProductLength, #Product.ICProductHeight, #Product.ICProductWidth, #Product.FK_ICStkUOMID , 
										        #Stock.ICStockID AS FK_ICStockID, #Stock.ICStockName, #Product.FK_GLInventoryAccountID, #Stock.ICStockSortOrder UOM_DISPLAY LOTNO_DISPLAY,LOTSX_DISPLAY
										        ViewInventoryStatisticBeforeQty, ViewInventoryStatisticBeforeCost,
										        ViewInventoryStatisticInQty, ViewInventoryStatisticInCost,
										        ViewInventoryStatisticOutQty, ViewInventoryStatisticOutCost,
										        ViewInventoryStatisticAfterQty, ViewInventoryStatisticAfterCost,
                                                ViewInventoryStatisticAdjInvIncQty,
                        ViewInventoryStatisticAdjInvDecQty,
                                                ViewInventoryStatisticAdjInvIncCost,
                        ViewInventoryStatisticAdjInvDecCost,
ViewInventoryStatisticAfterQty*#Product.ICProductVolume as ViewInventoryStatisticAfterVQty,FK_ICVolumeUOMID,
                                                CASE WHEN ViewInventoryStatisticBeforeQty = 0 THEN 0
                                                ELSE ROUND(ViewInventoryStatisticBeforeCost/ViewInventoryStatisticBeforeQty, 0) END AS ViewInventoryStatisticBeforeUnitCost,
                                                    
                                                CASE WHEN ViewInventoryStatisticInQty = 0 THEN 0
                                                ELSE ROUND(ViewInventoryStatisticInCost/ViewInventoryStatisticInQty, 0) END AS ViewInventoryStatisticInUnitCost,

                                                CASE WHEN ViewInventoryStatisticOutQty = 0 THEN 0
                                                ELSE ROUND(ViewInventoryStatisticOutCost/ViewInventoryStatisticOutQty, 0) END AS ViewInventoryStatisticOutUnitCost,

                                                CASE WHEN ViewInventoryStatisticAfterQty = 0 THEN 0
                                                ELSE ROUND(ViewInventoryStatisticAfterCost/ViewInventoryStatisticAfterQty, 0) END AS ViewInventoryStatisticAfterUnitCost
                            {0}
                                                FROM
                                                (
                                                    SELECT ICProductID, ICStockID UOM_DISPLAY LOTNO_DISPLAY, LOTSX_DISPLAY

	                                                ROUND(SUM(ViewInventoryStatisticBeforeQty), 6) AS ViewInventoryStatisticBeforeQty,
	                                                SUM(ViewInventoryStatisticBeforeCost) AS ViewInventoryStatisticBeforeCost,
	
	                                                ROUND(SUM(ViewInventoryStatisticInQty), 6) AS ViewInventoryStatisticInQty,
	                                                SUM(ViewInventoryStatisticInCost) AS ViewInventoryStatisticInCost,
	                                                ROUND(SUM(ViewInventoryStatisticOutQty), 6) AS ViewInventoryStatisticOutQty,
	                                                SUM(ViewInventoryStatisticOutCost) AS ViewInventoryStatisticOutCost,
	                                                ROUND(SUM(ViewInventoryStatisticAdjInvIncQty), 6) AS ViewInventoryStatisticAdjInvIncQty,
	                                                ROUND(SUM(ViewInventoryStatisticAdjInvDecQty), 6) AS ViewInventoryStatisticAdjInvDecQty,
	                                                SUM(ViewInventoryStatisticAdjInvIncCost) AS ViewInventoryStatisticAdjInvIncCost,
	                                                SUM(ViewInventoryStatisticAdjInvDecCost) AS ViewInventoryStatisticAdjInvDecCost,
	
	                                                ROUND(SUM(ViewInventoryStatisticAfterQty), 6) AS ViewInventoryStatisticAfterQty,
	                                                SUM(ViewInventoryStatisticAfterCost) AS ViewInventoryStatisticAfterCost
                            {1}
                                                    FROM
                                                    (THAMSO2) AS TB
                                                    GROUP BY TB.ICProductID, TB.ICStockID UOM_DISPLAY TB_LOTNO_DISPLAY TB_LOTSX_DISPLAY
                                                ) AS TBTemp
                                                INNER JOIN #Product ON #Product.ICProductID = TBTemp.ICProductID
                                                INNER JOIN #Stock ON #Stock.ICStockID = TBTemp.ICStockID
                                                WHERE 
                                                ViewInventoryStatisticBeforeQty != 0 OR ViewInventoryStatisticBeforeCost != 0 OR
										        ViewInventoryStatisticInQty != 0 OR ViewInventoryStatisticInCost != 0 OR
		                                        ViewInventoryStatisticOutQty != 0 OR ViewInventoryStatisticOutCost != 0 OR
		                                        ViewInventoryStatisticAdjInvIncQty != 0 OR ViewInventoryStatisticAdjInvDecQty != 0 OR
                                                ViewInventoryStatisticAdjInvIncCost != 0 OR ViewInventoryStatisticAdjInvDecCost != 0
                                                ", isDVTQD ? strStkQty : "", isDVTQD ? strSUMStkQty : "");

            if (isShowLotNo)
            {
                strQuery = strQuery.Replace("TB_LOTNO_DISPLAY", ", TB.ViewInventoryStatisticLotNo");
                strQuery = strQuery.Replace("LOTNO_DISPLAY", ",ViewInventoryStatisticLotNo");
            }
            else
            {
                strQuery = strQuery.Replace("TB_LOTNO_DISPLAY", "");
                strQuery = strQuery.Replace("LOTNO_DISPLAY", "");
            }
            if (isShowLotSx)
            {
                strQuery = strQuery.Replace("TB_LOTSX_DISPLAY", ", TB.ViewInventoryStatisticComment");
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "ViewInventoryStatisticComment,");
            }
            else
            {
                strQuery = strQuery.Replace("TB_LOTSX_DISPLAY", "");
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "");
            }
            if (isDVTQD)
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", ",FK_ICUOMID");
            }
            else
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", "");
            }
            strQuery = strQuery.Replace("THAMSO1", strProductANDStockQueryExc);
            strQuery = strQuery.Replace("THAMSO2", strData);
            return dal.GetDataSet(strQuery);
        }

        public String GetNXTProductANDStockQuery(int iICProductID, int iICProductTypeID, int iICProductGroupID, int iICStockID, int iICStockTypeID, int iDimension1ID, int iDimension2ID, int iDimension3ID, int iDimension4ID, int iDimension5ID, string sIOF02Combo = "", string sIOF03Combo = "")
        {
            #region Get Table Temp Stock
            String strCreateTableStock = String.Format(@"   IF OBJECT_ID('TEMPDB..#Stock') IS NOT NULL
                                                            BEGIN
                                                            DROP TABLE #Stock
                                                            END

                                                            SELECT * INTO #Stock FROM dbo.ICStocks Stock
                                                            WHERE Stock.AAStatus = 'Alive'
                                                            ");

            if (iICStockID != 0)
            {
                strCreateTableStock += String.Format("AND Stock.ICStockID = {0}", iICStockID);
            }

            if (iICStockTypeID != 0)
            {
                strCreateTableStock += String.Format("AND Stock.FK_ICStockTypeID = {0}", iICStockTypeID);
            }
            #endregion

            #region Get Table Temp Product
            String strCreateTableProduct = String.Format(@" IF OBJECT_ID('TEMPDB..#Product') IS NOT NULL
                                                            BEGIN
                                                            DROP TABLE #Product
                                                            END
                                                            
                                                            SELECT Product.ICProductID, Product.ICProductName,
                                                            Product.ICProductLength, Product.ICProductHeight, Product.ICProductWidth, Product.FK_ICStkUOMID AS FK_ICStkUOMID ,
		                                                    ProductGroup.ICProductGroupID AS FK_ICProductGroupID, ProductGroup.ICProductGroupName,
		                                                    ICProductVolume,FK_ICVolumeUOMID,
		                                                    ISNULL(ICAccountSets.FK_GLInventoryAccountID, 0) AS FK_GLInventoryAccountID
                                                            INTO #Product FROM dbo.ICProducts Product 
                                                            LEFT JOIN dbo.ICAccountSets ON (ICAccountSets.ICAccountSetID = Product.FK_ICAccountSetID
                                                            AND ICAccountSets.AAStatus = Product.AAStatus)
                                                            PRODUCT_GROUPANDTYPE
                                                            WHERE Product.AAStatus = 'Alive' AND Product.ICProductIsStkItm='True' 
                                                            DIMENTION1 DIMENTION2 DIMENTION3 DIMENTION4 DIMENTION5
                                                            ");

            #region Product GROUP AND TYPE
            if (iICProductGroupID != 0 && iICProductTypeID != 0)
            {
                String strGroupType = String.Format(@"  INNER JOIN dbo.ICProductGroups ProductGroup ON (ProductGroup.ICProductGroupID = Product.FK_ICProductGroupID AND ProductGroup.ICProductGroupID = {0})
                                                        INNER JOIN dbo.ICProductTypes ProductType ON (ProductType.ICProductTypeID = Product.FK_ICProductTypeID AND ProductType.ICProductTypeID = {1})"
                                                        , iICProductGroupID, iICProductTypeID);
                strCreateTableProduct = strCreateTableProduct.Replace("PRODUCT_GROUPANDTYPE", strGroupType);
            }
            else if (iICProductGroupID != 0)
            {
                String strGroupType = String.Format(@"  INNER JOIN dbo.ICProductGroups ProductGroup ON (ProductGroup.ICProductGroupID = Product.FK_ICProductGroupID AND ProductGroup.ICProductGroupID = {0})
                                                        ", iICProductGroupID);
                strCreateTableProduct = strCreateTableProduct.Replace("PRODUCT_GROUPANDTYPE", strGroupType);
            }
            else if (iICProductTypeID != 0)
            {
                String strGroupType = String.Format(@"  INNER JOIN dbo.ICProductTypes ProductType ON (ProductType.ICProductTypeID = Product.FK_ICProductTypeID AND ProductType.ICProductTypeID = {0})
                                                        LEFT JOIN dbo.ICProductGroups ProductGroup ON ProductGroup.ICProductGroupID = Product.FK_ICProductGroupID"
                                                        , iICProductTypeID);
                strCreateTableProduct = strCreateTableProduct.Replace("PRODUCT_GROUPANDTYPE", strGroupType);
            }
            else
            {
                String strGroupType = String.Format("LEFT JOIN dbo.ICProductGroups ProductGroup ON ProductGroup.ICProductGroupID = Product.FK_ICProductGroupID");
                strCreateTableProduct = strCreateTableProduct.Replace("PRODUCT_GROUPANDTYPE", strGroupType);
            }
            #endregion

            #region Dimension
            if (iDimension1ID != 0)
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION1", String.Format(@"AND FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}", iDimension1ID));
            }
            else
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION1", String.Empty);
            }

            if (iDimension2ID != 0)
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION2", String.Format(@"AND FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}", iDimension2ID));
            }
            else
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION2", String.Empty);
            }

            if (iDimension3ID != 0)
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION3", String.Format(@"AND FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}", iDimension3ID));
            }
            else
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION3", String.Empty);
            }

            if (iDimension4ID != 0)
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION4", String.Format(@"AND FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}}", iDimension4ID));
            }
            else
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION4", String.Empty);
            }

            if (iDimension5ID != 0)
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION5", String.Format(@"AND FK_ICProductDimention1ID ={0} OR FK_ICProductDimention2ID ={0} OR FK_ICProductDimention3ID ={0} OR FK_ICProductDimention4ID ={0} OR FK_ICProductDimention5ID ={0}", iDimension5ID));
            }
            else
            {
                strCreateTableProduct = strCreateTableProduct.Replace("DIMENTION5", String.Empty);
            }
            if (iICProductID != 0)
                strCreateTableProduct += string.Format(@" AND Product.ICProductID = {0}", iICProductID);
            if(!string.IsNullOrEmpty(sIOF02Combo))
                strCreateTableProduct += string.Format(@" AND Product.ICProductIOF02Combo = '{0}'", sIOF02Combo);
            if (!string.IsNullOrEmpty(sIOF03Combo))
                strCreateTableProduct += string.Format(@" AND Product.ICProductIOF03Combo = '{0}'", sIOF03Combo);
            #endregion
            #endregion

            String strQuery = String.Format(@"  {0}
                                                {1}
                                                ", strCreateTableStock, strCreateTableProduct);
            return strQuery;
        }

        public String GetNXTQueryMain()
        {
            String strQuery = String.Format(@"  SELECT LISTCOLUMN 
                                                FROM #Product
                                                INNER_JOIN_MODULE
                                                INNER_JOIN_STOCK
                                                WHERE WHERE_DATE
                                                WHERE_EXTENT");
            return strQuery;
        }

        public String GetNXTModuleQuery(NXTModule ModuleName, String strProduct, DateTime dtFrom, DateTime dtTo, String strLotNo, Boolean isShowLotNo, Boolean isLayDauKy, Boolean pbUOM, string strLotSx, bool isShowLotSx)
        {
            String strDKColumn = GetNXTDauKyColumnResult(ModuleName, isShowLotNo, pbUOM, isShowLotSx);
            String strTKColumn = GetNXTTrongKyColumnResult(ModuleName, isShowLotNo, pbUOM, isShowLotSx);
            String strInnerJoinModule = GetNXTInnerJoinModule(ModuleName);
            String strStockWithModule = GetNXTStockWithModule(ModuleName);
            String strDKDate = GetNXTDate(ModuleName, null, dtFrom.AddDays(-1));
            String strTKDate = GetNXTDate(ModuleName, dtFrom, dtTo);
            String strWhere = GetNXTWhere(ModuleName, strLotNo, strLotSx);

            #region Đầu Kỳ

            String strDauKy = strProduct;
            strDauKy = strDauKy.Replace("LISTCOLUMN", strDKColumn);
            strDauKy = strDauKy.Replace("INNER_JOIN_MODULE", strInnerJoinModule);
            strDauKy = strDauKy.Replace("INNER_JOIN_STOCK", strStockWithModule);
            strDauKy = strDauKy.Replace("WHERE_DATE", strDKDate);
            strDauKy = strDauKy.Replace("WHERE_EXTENT", strWhere);

            #endregion

            #region Trong Kỳ

            String strTrongKy = strProduct;
            strTrongKy = strTrongKy.Replace("LISTCOLUMN", strTKColumn);
            strTrongKy = strTrongKy.Replace("INNER_JOIN_MODULE", strInnerJoinModule);
            strTrongKy = strTrongKy.Replace("INNER_JOIN_STOCK", strStockWithModule);
            strTrongKy = strTrongKy.Replace("WHERE_DATE", strTKDate);
            strTrongKy = strTrongKy.Replace("WHERE_EXTENT", strWhere);

            #endregion

            String strQuery = String.Empty;

            if (isLayDauKy)
            {
                strQuery = String.Format(@" {0}
                                            UNION ALL
                                            {1}
                                            ", strDauKy, strTrongKy);
            }
            else
            {
                strQuery = strTrongKy;
            }
            return strQuery;
        }

        public String GetNXTQuery(String strProduct, String strColumnReturn, String strInnerJoinModule, String strStockWithModule, String strDate, String strQueryWhere)
        {
            String strQuery = strProduct.Replace("LISTCOLUMN", strColumnReturn);
            strQuery = strQuery.Replace("INNER_JOIN_MODULE", strInnerJoinModule);
            strQuery = strQuery.Replace("INNER_JOIN_STOCK", strStockWithModule);
            strQuery = strQuery.Replace("WHERE_DATE", strDate);
            strQuery = strQuery.Replace("WHERE_EXTENT", strQueryWhere);
            return strQuery;
        }

        #region Điều kiện

        public String GetNXTInnerJoinModule(NXTModule ModuleName)
        {
            String strQuery = String.Empty;

            #region Module Shipment
            if (ModuleName == NXTModule.Shipment)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICShipmentItems ShipmentItem ON (ShipmentItem.FK_ICProductID = #Product.ICProductID AND ShipmentItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.ICShipments Shipment ON (Shipment.ICShipmentID = ShipmentItem.FK_ICShipmentID AND Shipment.AAStatus = 'Alive')");
            }
            #endregion

            #region Module Receipt
            if (ModuleName == NXTModule.Receipt)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICReceiptItems ReceiptItem ON (ReceiptItem.FK_ICProductID = #Product.ICProductID AND ReceiptItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.ICReceipts Receipt ON (Receipt.ICReceiptID = ReceiptItem.FK_ICReceiptID AND Receipt.AAStatus = 'Alive')");
            }
            #endregion

            #region Module ProductionOrdr_Out
            if (ModuleName == NXTModule.ProductionOrdrOut)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICShipmentItems ShipmentItem ON (ShipmentItem.FK_ICProductID = #Product.ICProductID AND ShipmentItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.PPProductionOrdrs ProductionOrdr ON (ProductionOrdr.PPProductionOrdrID = ShipmentItem.FK_PPProductionOrdrID AND ProductionOrdr.AAStatus = 'Alive')");
            }
            #endregion

            #region Module ProductionOrdr_In
            if (ModuleName == NXTModule.ProductionOrdrIn)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICReceiptItems ReceiptItem ON (ReceiptItem.FK_ICProductID = #Product.ICProductID AND ReceiptItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.PPProductionOrdrs ProductionOrdr ON (ProductionOrdr.PPProductionOrdrID = ReceiptItem.FK_PPProductionOrdrID AND ProductionOrdr.AAStatus = 'Alive')");
            }
            #endregion

            #region Module Transfer_In OR Transfer_Out
            if (ModuleName == NXTModule.TransferIn || ModuleName == NXTModule.TransferOut)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICTransferItems TransferItem ON (TransferItem.FK_ICProductID = #Product.ICProductID AND TransferItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.ICTransfers Transfer ON (Transfer.ICTransferID = TransferItem.FK_ICTransferID AND Transfer.AAStatus = 'Alive')");
            }
            #endregion

            #region Module AdjInv_In OR AdjInv_Out
            if (ModuleName == NXTModule.AdjInvIn || ModuleName == NXTModule.AdjInvOut)
            {
                strQuery = String.Format(@" INNER JOIN dbo.ICAdjInvItems AdjInvItem ON (AdjInvItem.FK_ICProductID = #Product.ICProductID AND AdjInvItem.AAStatus = 'Alive')
                                            INNER JOIN dbo.ICAdjInvs AdjInv ON (AdjInv.ICAdjInvID = AdjInvItem.FK_ICAdjInvID AND AdjInv.AAStatus = 'Alive')");
            }
            #endregion

            return strQuery;
        }

        public String GetNXTStockWithModule(NXTModule ModuleName)
        {
            String strQuery = String.Empty;

            #region Module Shipment OR ProductionOrdr_Out
            if (ModuleName == NXTModule.Shipment || (ModuleName == NXTModule.ProductionOrdrOut))
            {
                strQuery = String.Format(@" INNER JOIN #Stock ON #Stock.ICStockID = ShipmentItem.FK_ICStockID");
            }
            #endregion

            #region Module Receipt OR ProductionOrdr_In
            if (ModuleName == NXTModule.Receipt || ModuleName == NXTModule.ProductionOrdrIn)
            {
                strQuery = String.Format(@" INNER JOIN #Stock ON #Stock.ICStockID = ReceiptItem.FK_ICStockID");
            }
            #endregion

            #region Module Transfer_In
            if (ModuleName == NXTModule.TransferIn)
            {
                strQuery = String.Format(@" INNER JOIN #Stock ON #Stock.ICStockID = TransferItem.FK_ICToStockID");
            }
            #endregion

            #region Module Transfer_Out
            if (ModuleName == NXTModule.TransferOut)
            {
                strQuery = String.Format(@" INNER JOIN #Stock ON #Stock.ICStockID = TransferItem.FK_ICFromStockID");
            }
            #endregion

            #region Module AdjInv_In OR AdjInv_Out
            if (ModuleName == NXTModule.AdjInvIn || ModuleName == NXTModule.AdjInvOut)
            {
                strQuery = String.Format(@" INNER JOIN #Stock ON #Stock.ICStockID = AdjInvItem.FK_ICStockID");
            }
            #endregion

            return strQuery;
        }

        public String GetNXTDate(NXTModule ModuleName, DateTime? dtFrom, DateTime dtTo)
        {
            String strQuery = String.Empty;
            String strDate = String.Format(@" CONVERT(VARCHAR, MODULECOLUMN, 112) <= '{0}'", dtTo.ToString("yyyyMMdd"));

            if (dtFrom != null)
            {
                strDate += String.Format(@" AND CONVERT(VARCHAR, MODULECOLUMN, 112) >= '{0}'", dtFrom.Value.ToString("yyyyMMdd"));
            }

            #region Module Shipment
            if (ModuleName == NXTModule.Shipment)
            {
                strQuery = strDate.Replace("MODULECOLUMN", "Shipment.ICShipmentDate");
            }
            #endregion

            #region Module Receipt
            if (ModuleName == NXTModule.Receipt)
            {
                strQuery = strDate.Replace("MODULECOLUMN", "Receipt.ICReceiptDate");
            }
            #endregion

            #region Module ProductionOrdr_Out OR ProductionOrdr_In
            if (ModuleName == NXTModule.ProductionOrdrOut || ModuleName == NXTModule.ProductionOrdrIn)
            {
                strQuery = strDate.Replace("MODULECOLUMN", "ProductionOrdr.PPProductionOrdrDate");
            }
            #endregion

            #region Module AdjInv_In OR AdjInv_Out
            if (ModuleName == NXTModule.AdjInvIn || ModuleName == NXTModule.AdjInvOut)
            {
                strQuery = strDate.Replace("MODULECOLUMN", "AdjInv.ICAdjInvDate");
            }
            #endregion

            #region Module Transfer_In OR Transfer_Out
            if (ModuleName == NXTModule.TransferIn || ModuleName == NXTModule.TransferOut)
            {
                strQuery = strDate.Replace("MODULECOLUMN", "Transfer.ICTransferDate");
            }
            #endregion

            return strQuery;
        }

        public String GetNXTWhere(NXTModule ModuleName, String strLotNo, string strLotSx)
        {
            String strQuery = String.Empty;

            #region Module AdjInv_Out
            if (ModuleName == NXTModule.AdjInvOut)
            {
                strQuery = String.Format(@"AND LEFT(AdjInvItem.ICAdjInvItemTypeCombo, 3) ='Dec'");
            }
            #endregion

            #region Module AdjInv_In
            if (ModuleName == NXTModule.AdjInvIn)
            {
                strQuery = String.Format(@"AND LEFT(AdjInvItem.ICAdjInvItemTypeCombo,3) ='Inc'");
            }
            #endregion

            #region Get where LotNo
            if (!String.IsNullOrEmpty(strLotNo))
            {
                String strWhereLotNo = GetNXTWhereLot(ModuleName, strLotNo, "LotNo");

                if (!String.IsNullOrEmpty(strWhereLotNo))
                    strQuery += String.Format(@"{0} LIKE '%{1}%'", strWhereLotNo, strLotNo);
            }
            #endregion

            #region Get where LotSx
            if (!String.IsNullOrEmpty(strLotSx))
            {
                String strWhereLotSx = GetNXTWhereLot(ModuleName, strLotSx, "Comment");

                if (!String.IsNullOrEmpty(strWhereLotSx))
                    strQuery += String.Format(@"{0} LIKE '%{1}%'", strWhereLotSx, strLotSx);
            }
            #endregion

            return strQuery;
        }

        private string GetNXTWhereLot(NXTModule ModuleName, String strLot, string strColumnLot)
        {
            string strWhereLot = "";
            if (!string.IsNullOrEmpty(strLot))
            {
                #region Module Receipt
                if (ModuleName == NXTModule.Receipt || ModuleName == NXTModule.ProductionOrdrIn)
                {
                    strWhereLot += String.Format(@" AND ReceiptItem.ICReceiptItem{0}", strColumnLot);
                }
                #endregion

                #region Module Shipment
                if (ModuleName == NXTModule.Shipment || ModuleName == NXTModule.ProductionOrdrOut)
                {
                    strWhereLot += String.Format(@" AND ShipmentItem.ICShipmentItem{0}", strColumnLot);
                }
                #endregion

                #region Module Transfer
                if (ModuleName == NXTModule.TransferIn || ModuleName == NXTModule.TransferOut)
                {
                    strWhereLot += String.Format(@" AND TransferItem.ICTransferItem{0}", strColumnLot);
                }
                #endregion

                #region Module AdjInv
                if (ModuleName == NXTModule.AdjInvIn || ModuleName == NXTModule.AdjInvOut)
                {
                    strWhereLot += String.Format(@" AND AdjInvItem.ICAdjInvItem{0}", strColumnLot);
                }
                #endregion
            }
            return strWhereLot;
        }

        #endregion

        #region Đầu Kỳ

        public String GetNXTDauKyColumnResult(NXTModule ModuleName, Boolean isShowLotNo, Boolean pbUOM, bool isShowLotSx)
        {
            String strQty = String.Format(@"BEFOREQTY AS ViewInventoryStatisticBeforeQty,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticInQty,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticOutQty,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty,
		                                        AFTERQTY AS ViewInventoryStatisticAfterQty");
            String strCost = String.Format(@"BEFORECOST AS ViewInventoryStatisticBeforeCost,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticInCost,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticOutCost,
                                                CAST(0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost,
		                                        CAST(0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost,
		                                        AFTERCOST AS ViewInventoryStatisticAfterCost");
            String strQuery = String.Format(@"  #Product.ICProductID, #Stock.ICStockID,
                                                LOTNO_DISPLAY UOM_DISPLAY LOTSX_DISPLAY
                                                ");

            if (isShowLotNo)
                strQuery = strQuery.Replace("LOTNO_DISPLAY", "LOTNO AS ViewInventoryStatisticLotNo,");
            else
                strQuery = strQuery.Replace("LOTNO_DISPLAY", "");

            if(isShowLotSx)
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "LOTSX AS ViewInventoryStatisticComment,");
            else
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "");
            const string c_qty = "CAST(0 AS FLOAT)",
                            c_cost = "CAST(0 AS FLOAT)";
            String strAFTERQTY = c_qty,
                    strBEFOREQTY = c_qty,
                    strAFTERCOST = c_cost,
                    strBEFORECOST = c_cost,
                    strLOTNO = c_cost,
                    strLOTSX = c_cost;
            #region Module Shipment OR ProductionOrdr_Out
            if (ModuleName == NXTModule.Shipment || ModuleName == NXTModule.ProductionOrdrOut)
            {
                strBEFOREQTY = "(-1) * ShipmentItem.ICShipmentItemQty";
                strBEFORECOST = "(-1) * ShipmentItem.ICShipmentItemCostTot";
                strAFTERQTY = "(-1) * ShipmentItem.ICShipmentItemQty";
                strAFTERCOST = "(-1) * ShipmentItem.ICShipmentItemCostTot";
                strLOTNO = "ShipmentItem.ICShipmentItemLotNo";
                strLOTSX = "ShipmentItem.ICShipmentItemComment";
            }
            #endregion

            #region Module Receipt OR ProductionOrdr_In
            if (ModuleName == NXTModule.Receipt || ModuleName == NXTModule.ProductionOrdrIn)
            {
                strBEFOREQTY = "ReceiptItem.ICReceiptItemQty";
                strBEFORECOST = "ReceiptItem.ICReceiptItemCostTot";
                strAFTERQTY = "ReceiptItem.ICReceiptItemQty";
                strAFTERCOST = "ReceiptItem.ICReceiptItemCostTot";
                strLOTNO = "ReceiptItem.ICReceiptItemLotNo";
                strLOTSX = "ReceiptItem.ICReceiptItemComment";
            }
            #endregion

            #region Module Transfer_Out
            if (ModuleName == NXTModule.TransferOut)
            {
                strBEFOREQTY = "(-1) * TransferItem.ICTransferItemQty";
                strBEFORECOST = "(-1) * TransferItem.ICTransferItemCostTot";
                strAFTERQTY = "(-1) * TransferItem.ICTransferItemQty";
                strAFTERCOST = "(-1) * TransferItem.ICTransferItemCostTot";
                strLOTNO = "TransferItem.ICTransferItemLotNo";
                strLOTSX = "TransferItem.ICTransferItemComment";
            }
            #endregion

            #region Module Transfer_In
            if (ModuleName == NXTModule.TransferIn)
            {
                strBEFOREQTY = "TransferItem.ICTransferItemQty";
                strBEFORECOST = "TransferItem.ICTransferItemCostTot";
                strAFTERQTY = "TransferItem.ICTransferItemQty";
                strAFTERCOST = "TransferItem.ICTransferItemCostTot";
                strLOTNO = "TransferItem.ICTransferItemLotNo";
                strLOTSX = "TransferItem.ICTransferItemComment";
            }
            #endregion

            #region Module AdjInv_Out
            if (ModuleName == NXTModule.AdjInvOut)
            {
                strBEFOREQTY = "(-1) * AdjInvItem.ICAdjInvItemQty";
                strBEFORECOST = "(-1) * AdjInvItem.ICAdjInvItemCostTot";
                strAFTERQTY = "(-1) * AdjInvItem.ICAdjInvItemQty";
                strAFTERCOST = "(-1) * AdjInvItem.ICAdjInvItemCostTot";
                strLOTNO = "AdjInvItem.ICAdjInvItemLotNo";
                strLOTSX = "AdjInvItem.ICAdjInvItemComment";
            }
            #endregion

            #region Module AdjInv_In
            if (ModuleName == NXTModule.AdjInvIn)
            {
                strBEFOREQTY = "AdjInvItem.ICAdjInvItemQty";
                strBEFORECOST = "AdjInvItem.ICAdjInvItemCostTot";
                strAFTERQTY = "AdjInvItem.ICAdjInvItemQty";
                strAFTERCOST = "AdjInvItem.ICAdjInvItemCostTot";
                strLOTNO = "AdjInvItem.ICAdjInvItemLotNo";
                strLOTSX = "AdjInvItem.ICAdjInvItemComment";
            }

            #endregion
            if (!pbUOM)
            {
                strBEFOREQTY = strBEFOREQTY.Replace("Qty", "StkQty");
                strAFTERQTY = strAFTERQTY.Replace("Qty", "StkQty");
            }
            strQty = strQty.Replace("BEFOREQTY", strBEFOREQTY);
            strQty = strQty.Replace("AFTERQTY", strAFTERQTY);
            strQuery = strQuery.Replace("LOTNO", strLOTNO);
            strQuery = strQuery.Replace("LOTSX", strLOTSX);

            strCost = strCost.Replace("BEFORECOST", strBEFORECOST);
            strCost = strCost.Replace("AFTERCOST", strAFTERCOST);

            if (pbUOM)
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", "FK_ICUOMID,");
                strQty += "," + strQty.Replace("Qty", "StkQty");
            }
            else
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", "");
            }
            strQty = strQuery + strQty + "," + strCost;
            return strQty;
        }

        #endregion

        #region Trong Kỳ

        public String GetNXTTrongKyColumnResult(NXTModule ModuleName, Boolean isShowLotNo, Boolean pbUOM, bool isShowLotSx)
        {
            String strQty = String.Format(@"
                        CAST(0 AS FLOAT) AS ViewInventoryStatisticBeforeQty,
		                SLNHAPTK AS ViewInventoryStatisticInQty,
		                SLXUATTK AS ViewInventoryStatisticOutQty,
		                SLDCTTK AS ViewInventoryStatisticAdjInvIncQty,
		                SLDCGTK AS ViewInventoryStatisticAdjInvDecQty,		
		                AFTERQTY AS ViewInventoryStatisticAfterQty");

            String strCost = String.Format(@"CAST(0 AS FLOAT) AS ViewInventoryStatisticBeforeCost,
		                TTNHAPTK AS ViewInventoryStatisticInCost,
		                TTXUATTK AS ViewInventoryStatisticOutCost,
                        TTDCTTK AS ViewInventoryStatisticAdjInvIncCost,
		                TTDCGTK AS ViewInventoryStatisticAdjInvDecCost,
		                AFTERCOST AS ViewInventoryStatisticAfterCost");
            String strQuery = String.Format(@"  #Product.ICProductID, #Stock.ICStockID,
                                                LOTNO_DISPLAY UOM_DISPLAY LOTSX_DISPLAY
                                                ");
            if (isShowLotNo)
                strQuery = strQuery.Replace("LOTNO_DISPLAY", "LOTNO AS ViewInventoryStatisticLotNo,");
            else
                strQuery = strQuery.Replace("LOTNO_DISPLAY", "");

            if (isShowLotSx)
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "LOTSX AS ViewInventoryStatisticComment,");
            else
                strQuery = strQuery.Replace("LOTSX_DISPLAY", "");

            String  strSLNHAPTK = "CAST(0 AS FLOAT)", 
                    strTTNHAPTK = "CAST(0 AS FLOAT)", 
                    strSLXUATTK = "CAST(0 AS FLOAT)", 
                    strTTXUATTK = "CAST(0 AS FLOAT)", 
                    strSLDCTTK = "CAST(0 AS FLOAT)", 
                    strSLDCGTK = "CAST(0 AS FLOAT)", 
                    strTTDCTTK = "CAST(0 AS FLOAT)", 
                    strTTDCGTK = "CAST(0 AS FLOAT)", 
                    strAFTERQTY = "CAST(0 AS FLOAT)", 
                    strAFTERCOST = "CAST(0 AS FLOAT)", 
                    strLOTNO = "", strLOTSX = "";

            #region Module Shipment OR ProductionOrdr_Out
            if (ModuleName == NXTModule.Shipment || ModuleName == NXTModule.ProductionOrdrOut)
            {
                strSLXUATTK = "ShipmentItem.ICShipmentItemQty";
                strTTXUATTK = "ShipmentItem.ICShipmentItemCostTot";
                strAFTERQTY = "(-1) * ShipmentItem.ICShipmentItemQty";
                strAFTERCOST = "(-1) * ShipmentItem.ICShipmentItemCostTot";
                strLOTNO = "ShipmentItem.ICShipmentItemLotNo";
                strLOTSX = "ShipmentItem.ICShipmentItemComment";
            }
            #endregion

            #region Module Receipt OR ProductionOrdr_In
            if (ModuleName == NXTModule.Receipt || ModuleName == NXTModule.ProductionOrdrIn)
            {
                strSLNHAPTK = "ReceiptItem.ICReceiptItemQty";
                strTTNHAPTK = "ReceiptItem.ICReceiptItemCostTot";
                strAFTERQTY = "ReceiptItem.ICReceiptItemQty";
                strAFTERCOST = "ReceiptItem.ICReceiptItemCostTot";
                strLOTNO = "ReceiptItem.ICReceiptItemLotNo";
                strLOTSX = "ReceiptItem.ICReceiptItemComment";
            }
            #endregion

            #region Module Transfer_Out
            if (ModuleName == NXTModule.TransferOut)
            {
                strSLXUATTK = "TransferItem.ICTransferItemQty";
                strTTXUATTK = "TransferItem.ICTransferItemCostTot";
                strAFTERQTY = "(-1) * TransferItem.ICTransferItemQty";
                strAFTERCOST = "(-1) * TransferItem.ICTransferItemCostTot";
                strLOTNO = "TransferItem.ICTransferItemLotNo";
                strLOTSX = "TransferItem.ICTransferItemComment";
            }
            #endregion

            #region Module Transfer_In
            if (ModuleName == NXTModule.TransferIn)
            {
                strSLNHAPTK = "TransferItem.ICTransferItemQty";
                strTTNHAPTK = "TransferItem.ICTransferItemCostTot";
                strAFTERQTY = "TransferItem.ICTransferItemQty";
                strAFTERCOST = "TransferItem.ICTransferItemCostTot";
                strLOTNO = "TransferItem.ICTransferItemLotNo";
                strLOTSX = "TransferItem.ICTransferItemComment";
            }
            #endregion

            #region Module AdjInv_Out
            if (ModuleName == NXTModule.AdjInvOut)
            {
                strSLDCGTK = "AdjInvItem.ICAdjInvItemQty";
                strTTDCGTK = "AdjInvItem.ICAdjInvItemCostTot";
                strAFTERQTY = "(-1) * AdjInvItem.ICAdjInvItemQty";
                strAFTERCOST = "(-1) * AdjInvItem.ICAdjInvItemCostTot";
                strLOTNO = "AdjInvItem.ICAdjInvItemLotNo";
                strLOTSX = "AdjInvItem.ICAdjInvItemComment";
            }
            #endregion

            #region Module AdjInv_In
            if (ModuleName == NXTModule.AdjInvIn)
            {
                strSLDCTTK = "AdjInvItem.ICAdjInvItemQty";
                strTTDCTTK = "AdjInvItem.ICAdjInvItemCostTot";
                strAFTERQTY = "AdjInvItem.ICAdjInvItemQty";
                strAFTERCOST = "AdjInvItem.ICAdjInvItemCostTot";
                strLOTNO = "AdjInvItem.ICAdjInvItemLotNo";
                strLOTSX = "AdjInvItem.ICAdjInvItemComment";
            }
            #endregion
            if (!pbUOM)
            {
                strSLNHAPTK = strSLNHAPTK.Replace("Qty", "StkQty");
                strSLXUATTK = strSLXUATTK.Replace("Qty", "StkQty");
                strSLDCTTK = strSLDCTTK.Replace("Qty", "StkQty");
                strSLDCGTK = strSLDCGTK.Replace("Qty", "StkQty");
                strAFTERQTY = strAFTERQTY.Replace("Qty", "StkQty");
            }
            strQty = strQty.Replace("SLNHAPTK", strSLNHAPTK);
            strCost = strCost.Replace("TTNHAPTK", strTTNHAPTK);
            strQty = strQty.Replace("SLXUATTK", strSLXUATTK);
            strCost = strCost.Replace("TTXUATTK", strTTXUATTK);
            strQty = strQty.Replace("SLDCTTK", strSLDCTTK);
            strCost = strCost.Replace("TTDCTTK", strTTDCTTK);
            strQty = strQty.Replace("SLDCGTK", strSLDCGTK);
            strCost = strCost.Replace("TTDCGTK", strTTDCGTK);
            strQty = strQty.Replace("AFTERQTY", strAFTERQTY);
            strCost = strCost.Replace("AFTERCOST", strAFTERCOST);
            strQuery = strQuery.Replace("LOTNO", strLOTNO);
            strQuery = strQuery.Replace("LOTSX", strLOTSX);
            if (pbUOM)
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", "FK_ICUOMID,");
                strQty += "," + strQty.Replace("Qty", "StkQty");
            }
            else
            {
                strQuery = strQuery.Replace("UOM_DISPLAY", "");
            }
            strQuery += strQty + "," + strCost;
            return strQuery;
        }

        #endregion

        public string GetQueryProduct(int iICProductID, int iICProductTypeID = 0, int iICProductGroupID = 0, string sIOF02Combo = "", string sIOF03Combo = "")
        {
            string sKeyProduct = string.Empty;
            if (iICProductID > 0)
                sKeyProduct += string.Format(" AND ICProductID = {0}", iICProductID);
            if (iICProductTypeID > 0)
                sKeyProduct += string.Format(" AND FK_ICProductTypeID = {0}", iICProductTypeID);
            if (iICProductGroupID > 0)
                sKeyProduct += string.Format(" AND FK_ICProductGroupID = {0}", iICProductGroupID);
            if (!string.IsNullOrEmpty(sIOF02Combo))
                sKeyProduct += string.Format(" AND ICProductIOF02Combo = '{0}'", sIOF02Combo);
            if (!string.IsNullOrEmpty(sIOF03Combo))
                sKeyProduct += string.Format(" AND ICProductIOF03Combo = '{0}'", sIOF03Combo);
            return sKeyProduct;
        }
        public string GetQueryStock(int iICStockID, int iICStockTypeID = 0)
        {
            string sKeyStock = string.Empty;
            if (iICStockID > 0)
                sKeyStock += string.Format(" AND ICStockID = {0}", iICStockID);
            if (iICStockTypeID > 0)
                sKeyStock += string.Format(" AND FK_ICStockTypeID = {0}", iICStockTypeID);
            return sKeyStock;
        }
        #endregion

        #region Nhập xuất tồn theo đối tượng

        public DataSet ViewRemainStockByObjectStatistic(DateTime dFrom, DateTime dTo, int iStockID, String strObject)
        {
            String strDauKy = NXTByObject_DauKy();
            String strTrongKy = NXTByObject_TrongKy();
            String strCuoiKy = string.Empty;


            if (strObject == "Supplier")
            {
                strCuoiKy = NXTByObject_CuoiKy("APSuppliers");
            }
            if (strObject == "Customer")
            {
                strCuoiKy = NXTByObject_CuoiKy("ARCustomers");

                strDauKy = strDauKy.Replace("APSupplier", "ARCustomer");
                strTrongKy = strTrongKy.Replace("APSupplier", "ARCustomer");
                strCuoiKy = strCuoiKy.Replace("APSupplier", "ARCustomer");
            }

            if (strObject == "Employee")
            {
                strCuoiKy = NXTByObject_CuoiKy("HREmployees");

                strDauKy = strDauKy.Replace("APSupplier", "HREmployee");
                strTrongKy = strTrongKy.Replace("APSupplier", "HREmployee");
                strCuoiKy = strCuoiKy.Replace("APSupplier", "HREmployee");
            }

            String strQuery = String.Format(@"  DECLARE @StockID as int
                                                DECLARE @dFrom as Datetime
                                                DECLARE @dTo as Datetime
                                                SET @dFrom = '{0}'
                                                SET @dTo = '{1}'
                                                SET @StockID = {2}

                                                {3} 
                                                {4} 
                                                {5} 

                                             ", dFrom.ToString("yyyyMMdd"), dTo.ToString("yyyyMMdd"), iStockID, strDauKy, strTrongKy, strCuoiKy);
            strQuery = strQuery.Replace("#CONID#", "FK_APSupplierConID");
            return GetDataSet(strQuery);

        }

        public String NXTByObject_DauKy()
        {
            String strDauKy = String.Format(@"  --(Lay so lieu phat sinh
                                                --((Dau ky
                                                --ShipmentItem ICShipments
                                                SELECT  Shp.FK_APSupplierID AS FK_APSupplierID ,
                                                        Shp.#CONID# AS #CONID#,
                                                        ShpItem.FK_ICStockID ,
                                                        ShpItem.FK_ICProductID ,
                                                        -ShpItem.ICShipmentItemQty AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        -ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        -ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        -ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
                                                INTO    #tPS
                                                FROM    dbo.ICShipmentItems ShpItem
                                                        INNER JOIN dbo.ICShipments Shp ON ShpItem.FK_ICShipmentID = Shp.ICShipmentID
                                                WHERE   Shp.AAStatus = 'Alive'
                                                        AND ShpItem.AAStatus = 'Alive'
		                                                AND ShpItem.FK_ICStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICShipmentDate, 112) < @dFrom
                                                UNION ALL

                                                --ReceiptItem ICReceipts
                                                SELECT  Rcp.FK_APSupplierID AS FK_APSupplierID ,
                                                        Rcp.#CONID# AS #CONID#,
                                                        RcpItem.FK_ICStockID ,
                                                        RcpItem.FK_ICProductID ,
                                                        RcpItem.ICReceiptItemQty AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICReceiptItems RcpItem
                                                        INNER JOIN dbo.ICReceipts Rcp ON RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
                                                WHERE   Rcp.AAStatus = 'Alive'
                                                        AND RcpItem.AAStatus = 'Alive'
		                                                AND RcpItem.FK_ICStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICReceiptDate, 112) < @dFrom
                                                UNION ALL


                                                --TransferItem From
                                                SELECT  Trans.FK_APSupplierID AS FK_APSupplierID ,
                                                        Trans.#CONID# AS #CONID#,
                                                        TranItem.FK_ICFromStockID AS FK_ICStockID ,
                                                        TranItem.FK_ICProductID ,
                                                        -TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        -TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        -TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        -TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICTransferItems TranItem
                                                        INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
                                                WHERE   Trans.AAStatus = 'Alive'
                                                        AND TranItem.AAStatus = 'Alive'
		                                                AND TranItem.FK_ICFromStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICTransferDate, 112) < @dFrom
                                                UNION ALL

                                                --TransferItem To
                                                SELECT  Trans.FK_APSupplierID AS FK_APSupplierID ,
                                                        Trans.#CONID# AS #CONID#,
                                                        TranItem.FK_ICToStockID AS FK_ICStockID ,
                                                        TranItem.FK_ICProductID ,
                                                        TranItem.ICTransferItemQty AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        TranItem.ICTransferItemCostTot AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICTransferItems TranItem
                                                        INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
                                                WHERE   Trans.AAStatus = 'Alive'
                                                        AND TranItem.AAStatus = 'Alive'
		                                                AND TranItem.FK_ICToStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICTransferDate, 112) < @dFrom
                                                UNION ALL




                                                --))Dau ky");

            return strDauKy;
        }

        public String NXTByObject_TrongKy()
        {
            String strTrongKy = String.Format(@"  --((Trong ky
                                                --ShipmentItem ICShipments
                                                SELECT  Shp.FK_APSupplierID AS FK_APSupplierID ,
                                                        Shp.#CONID# AS #CONID#,
                                                        ShpItem.FK_ICStockID ,
                                                        ShpItem.FK_ICProductID ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        ShpItem.ICShipmentItemQty AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        -ShpItem.ICShipmentItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        -ShpItem.ICShipmentItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICShipmentItems ShpItem
                                                        INNER JOIN dbo.ICShipments Shp ON ShpItem.FK_ICShipmentID = Shp.ICShipmentID
                                                WHERE   Shp.AAStatus = 'Alive'
                                                        AND ShpItem.AAStatus = 'Alive'
		                                                AND ShpItem.FK_ICStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICShipmentDate, 112) BETWEEN @dFrom AND @dTo
                                                UNION ALL


                                                --ReceiptItem ICReceipts
                                                SELECT  FK_APSupplierID AS FK_APSupplierID ,
                                                        #CONID# AS #CONID#,
                                                        RcpItem.FK_ICStockID ,
                                                        RcpItem.FK_ICProductID ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeCost ,
                                                        RcpItem.ICReceiptItemQty AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        RcpItem.ICReceiptItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        RcpItem.ICReceiptItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICReceiptItems RcpItem
                                                        INNER JOIN dbo.ICReceipts Rcp ON RcpItem.FK_ICReceiptID = Rcp.ICReceiptID
                                                WHERE   Rcp.AAStatus = 'Alive'
                                                        AND RcpItem.AAStatus = 'Alive'
		                                                AND RcpItem.FK_ICStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICReceiptDate, 112) BETWEEN @dFrom AND @dTo
                                                UNION ALL


                                                --TransferItem From
                                                SELECT  Trans.FK_APSupplierID AS FK_APSupplierID ,
                                                        Trans.#CONID# AS #CONID#,
                                                        TranItem.FK_ICFromStockID AS FK_ICStockID ,
                                                        TranItem.FK_ICProductID ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInCost ,
                                                        TranItem.ICTransferItemQty AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        TranItem.ICTransferItemCostTot AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        -TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        -TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICTransferItems TranItem
                                                        INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
                                                WHERE   Trans.AAStatus = 'Alive'
                                                        AND TranItem.AAStatus = 'Alive'
		                                                AND TranItem.FK_ICFromStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICTransferDate, 112) BETWEEN @dFrom AND @dTo
                                                UNION ALL
 
                                                --TransferItem To
                                                SELECT  Trans.FK_APSupplierID AS FK_APSupplierID ,
                                                        Trans.#CONID# AS #CONID#,
                                                        TranItem.FK_ICToStockID AS FK_ICStockID ,
                                                        TranItem.FK_ICProductID ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticBeforeCost ,
                                                        TranItem.ICTransferItemQty AS ViewInventoryStatisticInQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticInUnitCost ,
                                                        TranItem.ICTransferItemCostTot AS ViewInventoryStatisticInCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutUnitCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticOutCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvIncCost ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAdjInvDecCost ,
                                                        TranItem.ICTransferItemQty AS ViewInventoryStatisticAfterQty ,
                                                        CAST (0 AS FLOAT) AS ViewInventoryStatisticAfterUnitCost ,
                                                        TranItem.ICTransferItemCostTot AS ViewInventoryStatisticAfterCost
                                                FROM    dbo.ICTransferItems TranItem
                                                        INNER JOIN dbo.ICTransfers Trans ON TranItem.FK_ICTransferID = Trans.ICTransferID
                                                WHERE   Trans.AAStatus = 'Alive'
                                                        AND TranItem.AAStatus = 'Alive'
		                                                AND TranItem.FK_ICToStockID = @StockID
                                                        AND CONVERT(VARCHAR(20), ICTransferDate, 112) BETWEEN @dFrom AND @dTo

                                                --)) Trong ky
                                                --)#tPS
                                                    ");

            return strTrongKy;
        }

        public String NXTByObject_CuoiKy(String strTableByObject)
        {
            String strCuoiKy = String.Format(@"  SELECT  MAX(APSupplierNo + ' - ' + APSupplierName) AS ViewObjectNo ,
                                                        MAX(ICStockNo) AS ICStockNo ,        
                                                        a.FK_ICProductID,   
                                                        a.#CONID#,     
                                                        MAX(d.FK_ICStkUOMID) AS FK_ICStkUOMID ,        
                                                        ROUND(SUM(ViewInventoryStatisticBeforeQty), 6) AS ViewInventoryStatisticBeforeQty ,
                                                        ISNULL(SUM(ViewInventoryStatisticBeforeCost)
                                                               / NULLIF(ROUND(SUM(ViewInventoryStatisticBeforeQty), 6), 0), 0) AS ViewInventoryStatisticBeforeUnitCost ,
                                                        SUM(ViewInventoryStatisticBeforeCost) AS ViewInventoryStatisticBeforeCost ,
                                                        ROUND(SUM(ViewInventoryStatisticInQty), 6) AS ViewInventoryStatisticInQty ,
                                                        ISNULL(SUM(ViewInventoryStatisticInCost)
                                                               / NULLIF(ROUND(SUM(ViewInventoryStatisticInQty), 6), 0), 0) AS ViewInventoryStatisticUnitPrice ,
                                                        SUM(ViewInventoryStatisticInCost) AS ViewInventoryStatisticInCost ,
                                                        ROUND(SUM(ViewInventoryStatisticOutQty), 6) AS ViewInventoryStatisticOutQty ,
                                                        ISNULL(SUM(ViewInventoryStatisticOutCost)
                                                               / NULLIF(ROUND(SUM(ViewInventoryStatisticOutQty), 6), 0), 0) AS ViewInventoryStatisticOutUnitCost ,
                                                        SUM(ViewInventoryStatisticOutCost) AS ViewInventoryStatisticOutCost ,
                                                        ROUND(( ROUND(SUM(ViewInventoryStatisticBeforeQty), 6)
                                                                + ROUND(SUM(ViewInventoryStatisticInQty), 6)
                                                                - ROUND(SUM(ViewInventoryStatisticOutQty), 6)
                                                                + ROUND(SUM(ViewInventoryStatisticAdjInvIncQty), 6)
                                                                - ROUND(SUM(ViewInventoryStatisticAdjInvDecQty), 6) ), 6) AS ViewInventoryStatisticAfterQty ,
                                                        ISNULL(SUM(ViewInventoryStatisticAfterCost)
                                                               / NULLIF(ROUND(SUM(ViewInventoryStatisticAfterQty), 6), 0), 0) AS ViewInventoryStatisticAfterUnitCost ,
                                                        SUM(ViewInventoryStatisticAfterCost) AS ViewInventoryStatisticAfterCost,
                                                        --MAX(ICProductStkUOM) AS ICProductStkUOM ,
                                                        --MAX(ICProductGroupNo) AS ICProductGroupNo ,
                                                        --MAX(ICProductName) AS ICProductName ,
                                                        --MAX(ICProductGroupName) AS ICProductGroupName ,
                                                        MAX(ICStockName) AS ICStockName 
                                                FROM    #tPs a 
                                                        INNER JOIN {0} b ON a.FK_APSupplierID = b.APSupplierID AND b.AAStatus = 'Alive'
                                                        INNER JOIN dbo.ICStocks c ON a.FK_ICStockID = c.ICStockID 
                                                        INNER JOIN dbo.ICProducts d ON a.FK_ICProductID = d.ICProductID
                                                GROUP BY a.FK_APSupplierID ,
                                                        a.FK_ICStockID,a.FK_ICProductID,a.#CONID#


                                                DROP TABLE #tPS  ", strTableByObject);

            return strCuoiKy;
        }


        #endregion

        #region Thang move từ CLV qua 14/9/2016 kiểm tra số lượng kho 
        public double GetTotalInvQtyByProductStockAndStockLotNo(int iProductID, int iStockID, string sLotNo, DateTime dtTo)
        {
            double _ret = 0.0;

            string strSQL = string.Format(@"
SELECT SUM(Qty) as Qty
    ,SUM(Cost) as Cost
FROM (
SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.ICShipments b ON ICShipmentID = FK_ICShipmentID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2}
    AND a.ICShipmentItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICShipmentDate, 112) <= '{3}'
	
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.ICReceipts b ON ICReceiptID = FK_ICReceiptID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2}
    AND a.ICReceiptItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1}
	AND CONVERT(VARCHAR(20), b.ICReceiptDate, 112) <= '{3}'

UNION ALL

SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2}
    AND a.ICShipmentItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2} 
    AND a.ICReceiptItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1}
    AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICAdjInvItemStkQty as Qty
	,-a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2}
    AND a.ICAdjInvItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Dec'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICAdjInvItemStkQty as Qty
	,a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
    --AND a.FK_ICStockSlotID = {2}
    AND a.ICAdjInvItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Inc'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICTransferItemStkQty as Qty
	,-a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICFromStockID = {0} 
    AND a.FK_ICStockSlotID = {2}
    AND a.ICTransferItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICTransferItemStkQty as Qty
	,a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICToStockID = {0} 
    AND a.FK_ICStockSlotID = {2}
    AND a.ICTransferItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'
) a	
	", iStockID, iProductID, 0, dtTo.ToString("yyyyMMdd"), sLotNo);
            DataSet ds = dal.GetDataSet(strSQL);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                _ret = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[0][0]), 4);
            return _ret;
        }
        public double GetTotalInvQtyByProductStockAndStockSlotLotNo(int iProductID, int iStockID, int iStockSlotID, string sLotNo, DateTime dtTo)
        {
            double _ret = 0.0;

            string strSQL = string.Format(@"
SELECT SUM(Qty) as Qty
    ,SUM(Cost) as Cost
FROM (
SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.ICShipments b ON ICShipmentID = FK_ICShipmentID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} AND a.ICShipmentItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICShipmentDate, 112) <= '{3}'
	
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.ICReceipts b ON ICReceiptID = FK_ICReceiptID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} AND a.ICReceiptItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1}
	AND CONVERT(VARCHAR(20), b.ICReceiptDate, 112) <= '{3}'

UNION ALL

SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} AND a.ICShipmentItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} AND a.ICReceiptItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1}
    AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICAdjInvItemStkQty as Qty
	,-a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} /*AND a.FK_ICStockSlotID = {2}*/ AND a.ICAdjInvItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Dec'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICAdjInvItemStkQty as Qty
	,a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} /*AND a.FK_ICStockSlotID = {2}*/ AND a.ICAdjInvItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Inc'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICTransferItemStkQty as Qty
	,-a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICFromStockID = {0} 
    AND a.FK_ICStockSlotID = {2} 
    AND a.ICTransferItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICTransferItemStkQty as Qty
	,a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICToStockID = {0} 
    AND a.FK_ICStockSlotID = {2} 
    AND a.ICTransferItemLotNo = N'{4}'
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'
) a	
	", iStockID, iProductID, iStockSlotID, dtTo.ToString("yyyyMMdd"), sLotNo);
            DataSet ds = dal.GetDataSet(strSQL);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                _ret = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[0][0]), 4);
            return _ret;
        }
        public double GetTotalInvQtyByProductStockAndStockSlot(int iProductID, int iStockID, int iStockSlotID, DateTime dtTo)
        {
            double _ret = 0.0;

            string strSQL = string.Format(@"
SELECT SUM(Qty) as Qty
    ,SUM(Cost) as Cost
FROM (
SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.ICShipments b ON ICShipmentID = FK_ICShipmentID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICShipmentDate, 112) <= '{3}'
	
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.ICReceipts b ON ICReceiptID = FK_ICReceiptID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1}
	AND CONVERT(VARCHAR(20), b.ICReceiptDate, 112) <= '{3}'

UNION ALL

SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1} 
	AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1}
    AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICAdjInvItemStkQty as Qty
	,-a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} --AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Dec'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICAdjInvItemStkQty as Qty
	,a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} --AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Inc'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{3}'

UNION ALL
SELECT   
	-a.ICTransferItemStkQty as Qty
	,-a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICFromStockID = {0} AND a.FK_ICStockSlotID = {2} 
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'

UNION ALL
SELECT   
	a.ICTransferItemStkQty as Qty
	,a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICToStockID = {0} AND a.FK_ICStockSlotID = {2}
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{3}'
) a	
	", iStockID, iProductID, iStockSlotID, dtTo.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(strSQL);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                _ret = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[0][0]), 4);
            return _ret;
        }
        public double GetTotalInvQtyByProductStockAndStock(int iProductID, int iStockID, DateTime dtTo)
        {
            double _ret = 0.0;

            string strSQL = string.Format(@"
SELECT SUM(Qty) as Qty
    ,SUM(Cost) as Cost
FROM (
SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.ICShipments b ON ICShipmentID = FK_ICShipmentID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0}
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICShipmentDate, 112) <= '{2}'
	
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.ICReceipts b ON ICReceiptID = FK_ICReceiptID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0} 
	AND a.FK_ICProductID = {1}
	AND CONVERT(VARCHAR(20), b.ICReceiptDate, 112) <= '{2}'

UNION ALL

SELECT   
	-a.ICShipmentItemStkQty as Qty
	,-a.ICShipmentItemCostTot AS Cost 
FROM dbo.ICShipmentItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0}
	AND a.FK_ICProductID = {1} 
	AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{2}'
UNION ALL

SELECT   
	a.ICReceiptItemStkQty as Qty
	,a.ICReceiptItemCostTot AS Cost 
FROM dbo.ICReceiptItems a 
INNER JOIN dbo.PPProductionOrdrs b ON PPProductionOrdrID = FK_PPProductionOrdrID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0}
	AND a.FK_ICProductID = {1}
    AND CONVERT(VARCHAR(20), b.PPProductionOrdrDate, 112) <= '{2}'

UNION ALL
SELECT   
	-a.ICAdjInvItemStkQty as Qty
	,-a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0}
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Dec'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{2}'

UNION ALL
SELECT   
	a.ICAdjInvItemStkQty as Qty
	,a.ICAdjInvItemCostTot AS Cost 
FROM dbo.ICAdjInvItems a 
INNER JOIN dbo.ICAdjInvs b ON ICAdjInvID = FK_ICAdjInvID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICStockID = {0}
	AND a.FK_ICProductID = {1} 
	AND LEFT(a.ICAdjInvItemTypeCombo,3) = 'Inc'
    AND CONVERT(VARCHAR(20), b.ICAdjInvDate, 112) <= '{2}'

UNION ALL
SELECT   
	-a.ICTransferItemStkQty as Qty
	,-a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICFromStockID = {0}
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{2}'

UNION ALL
SELECT   
	a.ICTransferItemStkQty as Qty
	,a.ICTransferItemCostTot AS Cost 
FROM dbo.ICTransferItems a 
INNER JOIN dbo.ICTransfers b ON ICTransferID = FK_ICTransferID 
		AND a.AAStatus = 'Alive' 
		AND b.AAStatus = 'Alive'
WHERE a.FK_ICToStockID = {0}
	AND a.FK_ICProductID = {1} 
    AND CONVERT(VARCHAR(20), b.ICTransferDate, 112) <= '{2}'
) a	
	", iStockID, iProductID, dtTo.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(strSQL);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                _ret = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[0][0]), 4);
            return _ret;
        }
        #endregion
        #region QQuyen - Add 19.07.16 Truy vấn sản phẩm theo kho, Slot - SL = 0, TT <> 0 để tạo phiếu chuyển nội bộ khi tính giá vốn

        public DataSet GetAdjCalcInventoryAverageCost(DateTime dtTo, string sProductID)
        {
            object[] _objParrs = {dtTo
                    ,sProductID
                                };
            return SqlDatabaseHelper.RunStoredProcedure("spL_AdjCalcInventoryAverageCost", _objParrs);
            
        }
        //170525: T.Bao Get EndBalanceByProductIDAndDate
        public double GetAfterQtByProduct(DateTime dte, int iICProductID)
        {
            double _ret = 0.0;

            string strSQL = string.Format(@"SELECT dbo.fnc_GetEndBalanceInventory('{0}', {1})", dte.ToString("yyyyMMdd"), iICProductID);

            DataSet ds = dal.GetDataSet(strSQL);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                _ret = Math.Round(Convert.ToDouble(ds.Tables[0].Rows[0][0]), 4);
            return _ret;
        }

        #endregion
    }
    #endregion
}