using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ViewDetailInvs
	//-----------------------------------------------------------
	//Generated By: Expert Studio
	//Class:ViewDetailInvsController
	//Created Date:Friday, November 9, 2012
	//-----------------------------------------------------------
	
	public class ViewDetailInvsController:BaseBusinessController
	{
		public ViewDetailInvsController()
		{
			dal= new DALBaseProvider("ViewDetailInvs",typeof(ViewDetailInvsInfo));
		}
        public DataSet GetAllDataInRcpItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICReceiptItems.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemInProductionOrdrByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICReceiptItems.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICShipmentItems.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemInProductionOrdrByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='ShpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICShipmentItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICShipmentItems.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICTransferItems.FK_ICToStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferOutItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICFromStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranOut',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICTransferItems.FK_ICFromStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAssemblyInItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemIns.FK_ICStockID,ICAssemblyItemInQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyIn',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemInDesc as ViewDetailInvDesc
                                                from ICAssemblyItemIns inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemIns.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemIns.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICAssemblyItemIns.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAssemblyOutItemByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemOuts.FK_ICStockID,ICAssemblyItemOutQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyOut',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemOutDesc as ViewDetailInvDesc
                                                from ICAssemblyItemOuts inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemOuts.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemOuts.AAStatus='Alive'
                                                AND {2}
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICAssemblyItemOuts.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAdjInvByProductNoAndStockNo(string strProductNo, string strStockName, DateTime dteFromDate, DateTime dteToDate, string strAdjInvType)
        {
            string strDate = DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAdjInvItems.FK_ICStockID,ICAdjInvItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='{3}',
                                                FK_ICAdjInvID as ViewDetailInvObjectID, ICAdjInvDate as ViewDetailInvDate, ICAdjInvNo as  ViewDetailInvObjectNo,
                                                ICAdjInvItemDesc as ViewDetailInvDesc
                                                from ICAdjInvItems inner join ICAdjInvs on ICAdjInvs.ICAdjInvID=ICAdjInvItems.FK_ICAdjInvID
                                                where ICAdjInvs.AAStatus='Alive' AND ICAdjInvItems.AAStatus='Alive'
                                                AND {2}
                                                AND ICAdjInvItemTypeCombo='{3}'
                                                AND FK_ICProductID in (Select ICProductID from ICProducts where AAStatus='Alive' AND ICProductNo =N'{0}')
                                                AND ICAdjInvItems.FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive' and ICStockNo=N'{1}')
                                                
                                                        ", strProductNo, strStockName, strDate, strAdjInvType);
            return dal.GetDataSet(strQuery);
        }


        public DataSet GetAllDataInRcpItemByStandardColorAndStockID(int StockID,int iProductColorSchemaID,int iProductStandardID,string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                inner join ICProducts on ICProducts.ICProductID=ICReceiptItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICReceiptItems.FK_ICStockID = {1}
                                                ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemInProductionOrdrByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICProducts.ICProductID=ICReceiptItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICReceiptItems.FK_ICStockID = {1}
                                               ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICProducts.ICProductID=ICTransferItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICTransferItems.FK_ICToStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                inner join ICProducts on ICProducts.ICProductID=ICShipmentItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICShipmentItems.FK_ICStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemInProductionOrdrByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='ShpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICShipmentItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICProducts.ICProductID=ICShipmentItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICShipmentItems.FK_ICStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferOutItemByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICFromStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranOut',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICProducts.ICProductID=ICTransferItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICTransferItems.FK_ICFromStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAdjInvItemByStandardColorAndStockID(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strAdjType)
        {
            string strDate = DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAdjInvItems.FK_ICStockID,ICAdjInvItemQty as ViewDetailInvQty, ICAdjInvItems.ICAdjInvItemTypeCombo as ViewDetailInvTypeCombo,
                                                FK_ICAdjInvID as ViewDetailInvObjectID, ICAdjInvDate as ViewDetailInvDate, ICAdjInvNo as  ViewDetailInvObjectNo,
                                                ICAdjInvItemDesc as ViewDetailInvDesc
                                                from ICAdjInvItems inner join ICAdjInvs on ICAdjInvs.ICAdjInvID=ICAdjInvItems.FK_ICAdjInvID
                                                inner join ICProducts on ICProducts.ICProductID=ICAdjInvItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICAdjInvs.AAStatus='Alive' AND ICAdjInvItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICAdjInvItems.FK_ICStockID = {1}
												AND ICAdjInvItemTypeCombo='{5}'
                                                ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strAdjType);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate,string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                inner join ICProducts on ICProducts.ICProductID=ICReceiptItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICReceiptItems.ICReceiptItemLotNo='{5}'
                                                AND ICReceiptItems.FK_ICStockID = {1}
                                                ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemInProductionOrdrByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICProducts.ICProductID=ICReceiptItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICReceiptItems.ICReceiptItemLotNo='{5}'
                                                AND ICReceiptItems.FK_ICStockID = {1}
                                               ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICProducts.ICProductID=ICTransferItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICTransferItems.ICTransferItemLotNo='{5}'
                                                AND ICTransferItems.FK_ICToStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                inner join ICProducts on ICProducts.ICProductID=ICShipmentItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICShipmentItems.ICShipmentItemLotNo='{5}'
                                                AND ICShipmentItems.FK_ICStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemInProductionOrdrByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='ShpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc
                                                from ICShipmentItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICShipmentItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICProducts.ICProductID=ICShipmentItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICShipmentItems.ICShipmentItemLotNo='{5}'
                                                AND ICShipmentItems.FK_ICStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferOutItemByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICFromStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranOut',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICProducts.ICProductID=ICTransferItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICTransferItems.ICTransferItemLotNo='{5}'
                                                AND ICTransferItems.FK_ICFromStockID ={1}
                                                        ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAdjInvItemByStandardColorStockIDLotNo(int StockID, int iProductColorSchemaID, int iProductStandardID, string strProductGroup, DateTime dteFromDate, DateTime dteToDate, string strLotNo, string strAdjType)
        {
            string strDate = DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAdjInvItems.FK_ICStockID,ICAdjInvItemQty as ViewDetailInvQty,ICAdjInvItems.ICAdjInvItemTypeCombo as ViewDetailInvTypeCombo,
                                                FK_ICAdjInvID as ViewDetailInvObjectID, ICAdjInvDate as ViewDetailInvDate, ICAdjInvNo as  ViewDetailInvObjectNo,
                                                ICAdjInvItemDesc as ViewDetailInvDesc
                                                from ICAdjInvItems inner join ICAdjInvs on ICAdjInvs.ICAdjInvID=ICAdjInvItems.FK_ICAdjInvID
                                                inner join ICProducts on ICProducts.ICProductID=ICAdjInvItems.FK_ICProductID
                                                inner join ICProductGroups on ICProductGroups.ICProductGroupID=ICProducts.FK_ICProductGroupID
                                                where ICAdjInvs.AAStatus='Alive' AND ICAdjInvItems.AAStatus='Alive' AND ICProducts.AAStatus='Alive'
                                                AND ICProductGroups.AAStatus='Alive' AND ICProductGroupNo='{3}' AND FK_ICProductStandardID={0} AND FK_ICProductColorSchemaID={4}
                                                AND {2}
                                                AND ICAdjInvItems.ICAdjInvItemLotNo='{5}'
                                                AND ICAdjInvItems.FK_ICStockID = {1}
												AND ICAdjInvItemTypeCombo='{6}'
                                                ", iProductStandardID, StockID, strDate, strProductGroup, iProductColorSchemaID, strLotNo, strAdjType);
            return dal.GetDataSet(strQuery);
        }

        #region GetDataInInv --Vinh --12/12/2012 --Lấy tất cả các phiếu có liên quan đến việc nhập kho

        public DataSet GetAllDataInInv(int StockID, int iProductID, string strProductGroup, string strLotNo, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQuery = string.Format(@"
                                            SELECT
	                                        dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'Rcp' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICReceiptItems.ICReceiptItemQty AS ViewDetailInvQty
	                                        ,dbo.ICReceiptItems.ICReceiptItemID AS ViewDetailInvObjectID
	                                        ,dbo.ICReceipts.ICReceiptDate AS ViewDetailInvDate
                                            ,dbo.ICReceipts.ICReceiptNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICReceiptItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICReceiptItems 
	                                        INNER JOIN dbo.ICReceipts ON dbo.ICReceiptItems.FK_ICReceiptID=dbo.ICReceipts.ICReceiptID
                                            INNER JOIN dbo.ICProducts ON dbo.ICReceiptItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICReceipts.AAStatus='Alive' AND dbo.ICReceiptItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICReceiptItems.FK_ICStockID = {0}
	                                        AND dbo.ICReceiptItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICReceiptItems.ICReceiptItemLotNo = '{3}'
                                            AND {4}
                                            
	                                        UNION ALL
	
                                            SELECT
	                                        dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'RcpProduction' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICReceiptItems.ICReceiptItemQty AS ViewDetailInvQty
	                                        ,dbo.PPProductionOrdrs.PPProductionOrdrID AS ViewDetailInvObjectID
	                                        ,dbo.PPProductionOrdrs.PPProductionOrdrDate AS ViewDetailInvDate
                                            ,dbo.PPProductionOrdrs.PPProductionOrdrNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICReceiptItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICReceiptItems 
	                                        INNER JOIN dbo.PPProductionOrdrs ON dbo.ICReceiptItems.FK_PPProductionOrdrID=dbo.PPProductionOrdrs.PPProductionOrdrID
                                            INNER JOIN dbo.ICProducts ON dbo.ICReceiptItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.PPProductionOrdrs.AAStatus='Alive' AND dbo.ICReceiptItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICReceiptItems.FK_ICStockID = {0}
	                                        AND dbo.ICReceiptItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICReceiptItems.ICReceiptItemLotNo = '{3}'
                                            AND {5}
	
	                                        UNION ALL
	
	                                        SELECT
                                            dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'TranIn' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICTransferItems.ICTransferItemQty AS ViewDetailInvQty
	                                        ,dbo.ICTransfers.ICTransferID AS ViewDetailInvObjectID
	                                        ,dbo.ICTransfers.ICTransferDate AS ViewDetailInvDate
                                            ,dbo.ICTransfers.ICTransferNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICTransferItems.FK_ICToStockID AS FK_ICStockID
	                                        FROM dbo.ICTransferItems
                                            INNER JOIN dbo.ICTransfers ON dbo.ICTransferItems.FK_ICTransferID=dbo.ICTransfers.ICTransferID
	                                        INNER JOIN dbo.ICProducts ON dbo.ICTransferItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICTransfers.AAStatus='Alive' AND dbo.ICTransferItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICTransferItems.FK_ICToStockID = {0}
	                                        AND dbo.ICTransferItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICTransferItems.ICTransferItemLotNo = '{3}'
                                            AND {6}
	
	                                        UNION ALL
	
	                                        SELECT
                                            dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'IncQty' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICAdjInvItems.ICAdjInvItemQty AS ViewDetailInvQty
	                                        ,dbo.ICAdjInvs.ICAdjInvID AS ViewDetailInvObjectID
	                                        ,dbo.ICAdjInvs.ICAdjInvDate AS ViewDetailInvDate
                                            ,dbo.ICAdjInvs.ICAdjInvNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICAdjInvItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICAdjInvItems 
                                            INNER JOIN dbo.ICAdjInvs ON dbo.ICAdjInvItems.FK_ICAdjInvID=dbo.ICAdjInvs.ICAdjInvID
	                                        INNER JOIN dbo.ICProducts ON dbo.ICAdjInvItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICAdjInvs.AAStatus='Alive' AND dbo.ICAdjInvItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICAdjInvItems.FK_ICStockID = {0}
	                                        AND dbo.ICAdjInvItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICAdjInvItems.ICAdjInvItemLotNo = '{3}'
	                                        AND dbo.ICAdjInvItems.ICAdjInvItemTypeCombo = 'IncQty'
                                            AND {7}
                                            ", StockID, iProductID, strProductGroup, strLotNo, DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate));
            return dal.GetDataSet(strQuery);
        }

        #endregion

        #region GetDataOutInv --Vinh --12/12/2012 --Lấy tất cả các phiếu có liên quan đến việc xuất kho

        public DataSet GetAllDataOutInv(int StockID, int iProductID, string strProductGroup, string strLotNo, DateTime dteFromDate, DateTime dteToDate)
        {
            string strQuery = string.Format(@"
                                            SELECT
	                                        dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'Shp' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICShipmentItems.ICShipmentItemQty AS ViewDetailInvQty
	                                        ,dbo.ICShipmentItems.ICShipmentItemID AS ViewDetailInvObjectID
	                                        ,dbo.ICShipments.ICShipmentDate AS ViewDetailInvDate
                                            ,dbo.ICShipments.ICShipmentNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICShipmentItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICShipmentItems 
	                                        INNER JOIN dbo.ICShipments ON dbo.ICShipmentItems.FK_ICShipmentID=dbo.ICShipments.ICShipmentID
                                            INNER JOIN dbo.ICProducts ON dbo.ICShipmentItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICShipments.AAStatus='Alive' AND dbo.ICShipmentItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICShipmentItems.FK_ICStockID = {0}
	                                        AND dbo.ICShipmentItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICShipmentItems.ICShipmentItemLotNo = '{3}'
                                            AND {4}
                                            
	                                        UNION ALL
	
                                            SELECT
	                                        dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'ShpProduction' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICShipmentItems.ICShipmentItemQty AS ViewDetailInvQty
	                                        ,dbo.PPProductionOrdrs.PPProductionOrdrID AS ViewDetailInvObjectID
	                                        ,dbo.PPProductionOrdrs.PPProductionOrdrDate AS ViewDetailInvDate
                                            ,dbo.PPProductionOrdrs.PPProductionOrdrNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICShipmentItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICShipmentItems 
	                                        INNER JOIN dbo.PPProductionOrdrs ON dbo.ICShipmentItems.FK_PPProductionOrdrID=dbo.PPProductionOrdrs.PPProductionOrdrID
                                            INNER JOIN dbo.ICProducts ON dbo.ICShipmentItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.PPProductionOrdrs.AAStatus='Alive' AND dbo.ICShipmentItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICShipmentItems.FK_ICStockID = {0}
	                                        AND dbo.ICShipmentItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICShipmentItems.ICShipmentItemLotNo = '{3}'
                                            AND {5}
	
	                                        UNION ALL
	
	                                        SELECT
                                            dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'TranOut' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICTransferItems.ICTransferItemQty AS ViewDetailInvQty
	                                        ,dbo.ICTransfers.ICTransferID AS ViewDetailInvObjectID
	                                        ,dbo.ICTransfers.ICTransferDate AS ViewDetailInvDate
                                            ,dbo.ICTransfers.ICTransferNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICTransferItems.FK_ICFromStockID AS FK_ICStockID
	                                        FROM dbo.ICTransferItems
                                            INNER JOIN dbo.ICTransfers ON dbo.ICTransferItems.FK_ICTransferID=dbo.ICTransfers.ICTransferID
	                                        INNER JOIN dbo.ICProducts ON dbo.ICTransferItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICTransfers.AAStatus='Alive' AND dbo.ICTransferItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICTransferItems.FK_ICFromStockID = {0}
	                                        AND dbo.ICTransferItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICTransferItems.ICTransferItemLotNo = '{3}'
                                            AND {6}
	
	                                        UNION ALL
	
	                                        SELECT
                                            dbo.ICProducts.ICProductID AS FK_ICProductID
	                                        ,'DecQty' AS ViewDetailInvTypeCombo
	                                        ,dbo.ICAdjInvItems.ICAdjInvItemQty AS ViewDetailInvQty
	                                        ,dbo.ICAdjInvs.ICAdjInvID AS ViewDetailInvObjectID
	                                        ,dbo.ICAdjInvs.ICAdjInvDate AS ViewDetailInvDate
                                            ,dbo.ICAdjInvs.ICAdjInvNo AS ViewDetailInvObjectNo
	                                        ,dbo.ICAdjInvItems.FK_ICStockID AS FK_ICStockID
	                                        FROM dbo.ICAdjInvItems 
                                            INNER JOIN dbo.ICAdjInvs ON dbo.ICAdjInvItems.FK_ICAdjInvID=dbo.ICAdjInvs.ICAdjInvID
	                                        INNER JOIN dbo.ICProducts ON dbo.ICAdjInvItems.FK_ICProductID=dbo.ICProducts.ICProductID
	                                        INNER JOIN dbo.ICProductGroups ON dbo.ICProductGroups.ICProductGroupID=dbo.ICProducts.FK_ICProductGroupID
	                                        WHERE dbo.ICAdjInvs.AAStatus='Alive' AND dbo.ICAdjInvItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
	                                        AND dbo.ICAdjInvItems.FK_ICStockID = {0}
	                                        AND dbo.ICAdjInvItems.FK_ICProductID = {1}
                                            AND dbo.ICProductGroups.ICProductGroupNo='{2}'
                                            AND dbo.ICAdjInvItems.ICAdjInvItemLotNo = '{3}'
	                                        AND dbo.ICAdjInvItems.ICAdjInvItemTypeCombo = 'DecQty'
                                            AND {7}
                                            ", StockID, iProductID, strProductGroup, strLotNo, DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate), DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate));
            return dal.GetDataSet(strQuery);
        }

        #endregion

        #region Drill Down Nhap Xuat Ton

        /// <summary>
        /// Drill Down NXT
        /// </summary>
        public DataSet GetAllDataInRcpItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc, ICReceiptItems.ICReceiptItemCostTot AS ViewDetailInvCost
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICReceiptItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate);
            return dal.GetDataSet(strQuery);
        }
		/// <summary>
        /// Drill Down NXT
        /// </summary>
        public DataSet GetAllDataInRcpItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc, ICReceiptItems.ICReceiptItemCostTot AS ViewDetailInvCost
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICReceiptItems.FK_ICStockID ={1} or {1}=0)                                                
                                                        ", iProductID, iStockID, strDate);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICReceiptItems.ICReceiptItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemInProductionOrdrByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc,MONTH(PPProductionOrdrDate) AS ViewDetailInvPeriod,YEAR(PPProductionOrdrDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICReceiptItems.ICReceiptItemCostTot AS ViewDetailInvCost
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICReceiptItems.FK_ICProductID=ICProducts.ICProductID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICReceiptItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate,iProductGroupID,iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInRcpItemInProductionOrdrByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc,MONTH(PPProductionOrdrDate) AS ViewDetailInvPeriod,YEAR(PPProductionOrdrDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICReceiptItems.ICReceiptItemCostTot AS ViewDetailInvCost
                                                ,ICReceiptItems.FK_ICUOMID
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICReceiptItems.FK_ICProductID=ICProducts.ICProductID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICReceiptItems.FK_ICStockID ={1} or {1}=0)                                                
                                                        ", iProductID, iStockID, strDate,iProductGroupID,iProductTypeID);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICReceiptItems.ICReceiptItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc, ICShipmentItems.ICShipmentItemCostTot AS ViewDetailInvCost
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICShipmentItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInShpItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc, ICShipmentItems.ICShipmentItemCostTot AS ViewDetailInvCost
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICShipmentItems.FK_ICStockID ={1} or {1}=0)                                                
                                                        ", iProductID, iStockID, strDate);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICShipmentItems.ICShipmentItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpItemInProductionOrdrByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='ShpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc,FK_ICProductIDWO as FK_ICProductParentID,MONTH(PPProductionOrdrDate) AS ViewDetailInvPeriod,YEAR(PPProductionOrdrDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICShipmentItems.ICShipmentItemCostTot AS ViewDetailInvCost
                                                from ICShipmentItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICShipmentItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICShipmentItems.FK_ICProductID=ICProducts.ICProductID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICShipmentItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate,iProductGroupID,iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInShpItemInProductionOrdrByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("PPProductionOrdrDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='ShpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc,FK_ICProductIDWO as FK_ICProductParentID,MONTH(PPProductionOrdrDate) AS ViewDetailInvPeriod,YEAR(PPProductionOrdrDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICShipmentItems.ICShipmentItemCostTot AS ViewDetailInvCost
                                                ,ICShipmentItems.FK_ICUOMID
                                                from ICShipmentItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICShipmentItems.FK_PPProductionOrdrID
                                                inner join ICProducts on ICShipmentItems.FK_ICProductID=ICProducts.ICProductID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICShipmentItems.FK_ICStockID ={1} or {1}=0)                                                
                                                        ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICShipmentItems.ICShipmentItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc,MONTH(ICTransferDate) AS ViewDetailInvPeriod,YEAR(ICTransferDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICTransferItems.ICTransferItemCostTot AS ViewDetailInvCost
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICTransferItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICTransferItems.FK_ICToStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInTransferInItemByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc,MONTH(ICTransferDate) AS ViewDetailInvPeriod,YEAR(ICTransferDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICTransferItems.ICTransferItemCostTot AS ViewDetailInvCost
                                                ,ICTransferItems.FK_ICUOMID
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICTransferItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICTransferItems.FK_ICToStockID ={1} or {1}=0)                                                
                                                ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICTransferItems.ICTransferItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferOutItemByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICFromStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranOut',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc,MONTH(ICTransferDate) AS ViewDetailInvPeriod,YEAR(ICTransferDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICTransferItems.ICTransferItemCostTot AS ViewDetailInvCost
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICTransferItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICTransferItems.FK_ICFromStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInTransferOutItemByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICTransferDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICFromStockID as FK_ICStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranOut',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc,MONTH(ICTransferDate) AS ViewDetailInvPeriod,YEAR(ICTransferDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICTransferItems.ICTransferItemCostTot AS ViewDetailInvCost
                                                ,ICTransferItems.FK_ICUOMID
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                inner join ICProducts on ICTransferItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICTransferItems.FK_ICFromStockID ={1} or {1}=0)                                                
                                                ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICTransferItems.ICTransferItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAssemblyInItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemIns.FK_ICStockID,ICAssemblyItemInQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyIn',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemInDesc as ViewDetailInvDesc, ICAssemblyItemIns.ICAssemblyItemInCostTot AS ViewDetailInvCost
                                                from ICAssemblyItemIns inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemIns.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemIns.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICAssemblyItemIns.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInAssemblyInItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemIns.FK_ICStockID,ICAssemblyItemInQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyIn',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemInDesc as ViewDetailInvDesc, ICAssemblyItemIns.ICAssemblyItemInCostTot AS ViewDetailInvCost
                                                from ICAssemblyItemIns inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemIns.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemIns.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICAssemblyItemIns.FK_ICStockID ={1} or {1}=0)                                                
                                                ", iProductID, iStockID, strDate);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICAssemblyItemIns.ICAssemblyItemInLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAssemblyOutItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemOuts.FK_ICStockID,ICAssemblyItemOutQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyOut',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemOutDesc as ViewDetailInvDesc, ICAssemblyItemOuts.ICAssemblyItemOutCostTot AS ViewDetailInvCost
                                                from ICAssemblyItemOuts inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemOuts.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemOuts.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICAssemblyItemOuts.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInAssemblyOutItemByProductIDAndStockID(int iProductID, int iStockID, DateTime dteFromDate, DateTime dteToDate, String strLotNo = null)
        {
            string strDate = DALUtil.GenerateBeetween("ICAssemblyDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAssemblyItemOuts.FK_ICStockID,ICAssemblyItemOutQty as ViewDetailInvQty,ViewDetailInvTypeCombo='AssemblyOut',
                                                FK_ICAssemblyID as ViewDetailInvObjectID, ICAssemblyDate as ViewDetailInvDate, ICAssemblyNo as  ViewDetailInvObjectNo,
                                                ICAssemblyItemOutDesc as ViewDetailInvDesc, ICAssemblyItemOuts.ICAssemblyItemOutCostTot AS ViewDetailInvCost
                                                from ICAssemblyItemOuts inner join ICAssemblys on ICAssemblys.ICAssemblyID=ICAssemblyItemOuts.FK_ICAssemblyID
                                                where ICAssemblys.AAStatus='Alive' AND ICAssemblyItemOuts.AAStatus='Alive'
                                                AND {2}
                                                AND (FK_ICProductID ={0} or {0}=0)
                                                AND (ICAssemblyItemOuts.FK_ICStockID ={1} or {1}=0)                                                
                                                ", iProductID, iStockID, strDate);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICAssemblyItemOuts.ICAssemblyItemOutLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInAdjInvByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, string strAdjInvType)
        {
            string strDate = DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAdjInvItems.FK_ICStockID,ICAdjInvItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='{3}',
                                                FK_ICAdjInvID as ViewDetailInvObjectID, ICAdjInvDate as ViewDetailInvDate, ICAdjInvNo as  ViewDetailInvObjectNo,
                                                ICAdjInvItemDesc as ViewDetailInvDesc,MONTH(ICAdjInvDate) AS ViewDetailInvPeriod,YEAR(ICAdjInvDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICAdjInvItems.ICAdjInvItemCostTot AS ViewDetailInvCost
                                                from ICAdjInvItems inner join ICAdjInvs on ICAdjInvs.ICAdjInvID=ICAdjInvItems.FK_ICAdjInvID
                                                inner join ICProducts on ICAdjInvItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICAdjInvs.AAStatus='Alive' AND ICAdjInvItems.AAStatus='Alive'
                                                AND {2}
                                                AND ICAdjInvItemTypeCombo='{3}'
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={4} OR 0={4}) AND (ICProducts.FK_ICProductTypeID ={5} OR 0={5})
                                                AND (ICAdjInvItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate, strAdjInvType, iProductGroupID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
		public DataSet GetAllDataInAdjInvByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate, string strAdjInvType, String strLotNo = "")
        {
            string strDate = DALUtil.GenerateBeetween("ICAdjInvDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICAdjInvItems.FK_ICStockID,ICAdjInvItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='{3}',
                                                FK_ICAdjInvID as ViewDetailInvObjectID, ICAdjInvDate as ViewDetailInvDate, ICAdjInvNo as  ViewDetailInvObjectNo,
                                                ICAdjInvItemDesc as ViewDetailInvDesc,MONTH(ICAdjInvDate) AS ViewDetailInvPeriod,YEAR(ICAdjInvDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID, ICAdjInvItems.ICAdjInvItemCostTot AS ViewDetailInvCost
                                                ,ICAdjInvItems.FK_ICUOMID
                                                from ICAdjInvItems inner join ICAdjInvs on ICAdjInvs.ICAdjInvID=ICAdjInvItems.FK_ICAdjInvID
                                                inner join ICProducts on ICAdjInvItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICAdjInvs.AAStatus='Alive' AND ICAdjInvItems.AAStatus='Alive'
                                                AND {2}
                                                AND ICAdjInvItemTypeCombo='{3}'
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={4} OR 0={4}) AND (ICProducts.FK_ICProductTypeID ={5} OR 0={5})
                                                AND (ICAdjInvItems.FK_ICStockID ={1} or {1}=0)                                                
                                                ", iProductID, iStockID, strDate, strAdjInvType, iProductGroupID, iProductTypeID);
            if (strLotNo != null)
                strQuery += String.Format(@" AND ICAdjInvItems.ICAdjInvItemLotNo LIKE N'{0}'", strLotNo);
            return dal.GetDataSet(strQuery);
        }

        #endregion
        
        public DataSet GetAllDataInRcpByProductIDAndStockID(int iProductID, int iStockID,int iProductGroupID,int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICReceiptDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc,APSupplierName as ViewDetailInvObjectDocName,MONTH(ICReceiptDate) AS ViewDetailInvPeriod,YEAR(ICReceiptDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID 
                                                ,ICReceiptItems.FK_ICUOMID
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                LEFT join APSuppliers on ICReceipts.FK_APSupplierID=APSuppliers.APSupplierID AND APSuppliers.AAStatus='Alive'
                                                inner join ICProducts on ICReceiptItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND {2}
                                                AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICReceiptItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate,iProductGroupID,iProductTypeID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInShpByProductIDAndStockID(int iProductID, int iStockID, int iProductGroupID, int iProductTypeID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("ICShipmentDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"Select FK_ICProductID,ICShipmentItems.FK_ICStockID,ICShipmentItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Shp',
                                                FK_ICShipmentID as ViewDetailInvObjectID, ICShipmentDate as ViewDetailInvDate, ICShipmentNo as  ViewDetailInvObjectNo,
                                                ICShipmentItemDesc as ViewDetailInvDesc,ARCustomerName as ViewDetailInvObjectDocName,MONTH(ICShipmentDate) AS ViewDetailInvPeriod,YEAR(ICShipmentDate) AS ViewDetailInvYear,ICProducts.FK_ICProductGroupID,ICProducts.FK_ICProductTypeID 
                                                ,ICShipmentItems.FK_ICUOMID
                                                from ICShipmentItems inner join ICShipments on ICShipments.ICShipmentID=ICShipmentItems.FK_ICShipmentID
                                                LEFT join ARCustomers on ICShipments.FK_ARCustomerID=ARCustomers.ARCustomerID AND ARCustomers.AAStatus='Alive'
                                                inner join ICProducts on ICShipmentItems.FK_ICProductID=ICProducts.ICProductID
                                                where ICShipments.AAStatus='Alive' AND ICShipmentItems.AAStatus='Alive'
                                                AND {2}
                                                 AND (ICProducts.ICProductID ={0} or {0}=0)
                                                AND (ICProducts.FK_ICProductGroupID ={3} OR 0={3}) AND (ICProducts.FK_ICProductTypeID ={4} OR 0={4})
                                                AND (ICShipmentItems.FK_ICStockID ={1} or {1}=0)
                                                
                                                        ", iProductID, iStockID, strDate, iProductGroupID, iProductTypeID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemByProductStockAndProductPln(int iProductID, int iStockiD, int iProductPlnID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={2})
                                                ", iProductID, iStockiD, iProductPlnID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemByProductStockAndProductPln(int iProductID, int iStockiD, int iProductPlnID,int iSOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={2} AND FK_ARSOID={3})
                                                ", iProductID, iStockiD, iProductPlnID,iSOID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemInProductionOrdrByProductStockAndProductPln(int iProductID, int iStockiD, int iProductPlnID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={2})
                                                ", iProductID, iStockiD, iProductPlnID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemInProductionOrdrByProductStockAndProductPln(int iProductID, int iStockiD, int iProductPlnID, int iSOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={2} AND FK_ARSOID={3})
                                                ", iProductID, iStockiD, iProductPlnID,iSOID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemInProductionOrdrByProductStockAndProductPln(int iProductID, int iStockiD, int iProductPlnID, int iSOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICTransferItems.FK_ICToStockID={1}
                                                AND ICTransferItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={2} AND FK_ARSOID={3})
                                                ", iProductID, iStockiD, iProductPlnID, iSOID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemByProductStockAndWOID(int iProductID, int iStockiD, int iWOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICReceiptID as ViewDetailInvObjectID, ICReceiptDate as ViewDetailInvDate, ICReceiptNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join ICReceipts on ICReceipts.ICReceiptID=ICReceiptItems.FK_ICReceiptID
                                                where ICReceipts.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID ={2}
                                                ", iProductID, iStockiD, iWOID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemInProductionOrdrByProductStockAndWOID(int iProductID, int iStockiD, int iWOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_ICStockID={1}
                                                AND ICReceiptItems.FK_PPWOID ={2}
                                                ", iProductID, iStockiD, iWOID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByProductStockAndWOID(int iProductID, int iStockiD, int iWOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='Rcp',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICTransferItems.FK_ICToStockID={1}
                                                AND ICTransferItems.FK_PPWOID ={2}
                                                ", iProductID, iStockiD, iWOID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRcpItemByProductStockAndWOID(int iProductID, int iWOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_PPWOID ={1}
                                                AND (
		                                                    ICReceiptItems.FK_ICStockID in (select FK_ICStockProductID from PPProductionSetups where AAStatus='Alive')
	                                                    Or	ICReceiptItems.FK_ICStockID in (select FK_ICStockSemiProductID from PPProductionSetups where AAStatus='Alive')
	                                                    OR	ICReceiptItems.FK_ICStockID in (select FK_ICStockSemiDetailProductID from PPProductionSetups where AAStatus='Alive')
	                                                ) 
                                                     ", iProductID, iWOID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInRcpItemByProductStockAndProductPln(int iProductID, int iProductPlnID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICReceiptItems.FK_ICStockID,ICReceiptItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='RcpProduction',
                                                FK_PPProductionOrdrID as ViewDetailInvObjectID, PPProductionOrdrDate as ViewDetailInvDate, PPProductionOrdrNo as  ViewDetailInvObjectNo,
                                                ICReceiptItemDesc as ViewDetailInvDesc
                                                from ICReceiptItems inner join PPProductionOrdrs on PPProductionOrdrs.PPProductionOrdrID=ICReceiptItems.FK_PPProductionOrdrID
                                                where PPProductionOrdrs.AAStatus='Alive' AND ICReceiptItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICReceiptItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={1})
                                                 AND (
		                                                    ICReceiptItems.FK_ICStockID in (select FK_ICStockProductID from PPProductionSetups where AAStatus='Alive')
	                                                    Or	ICReceiptItems.FK_ICStockID in (select FK_ICStockSemiProductID from PPProductionSetups where AAStatus='Alive')
	                                                    OR	ICReceiptItems.FK_ICStockID in (select FK_ICStockSemiDetailProductID from PPProductionSetups where AAStatus='Alive')
	                                                ) 
                                                ", iProductID, iProductPlnID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByProductStockAndWOID(int iProductID, int iWOID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICTransferItems.FK_PPWOID ={1}
                                                AND (
		                                                    ICTransferItems.FK_ICToStockID in (select FK_ICStockProductID from PPProductionSetups where AAStatus='Alive')
	                                                    Or	ICTransferItems.FK_ICToStockID in (select FK_ICStockSemiProductID from PPProductionSetups where AAStatus='Alive')
	                                                    OR	ICTransferItems.FK_ICToStockID in (select FK_ICStockSemiDetailProductID from PPProductionSetups where AAStatus='Alive')
	                                                ) 
                                                     ", iProductID, iWOID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataInTransferInItemByProductStockAndProductPln(int iProductID, int iProductPlnID)
        {
            string strQuery = string.Format(@"Select FK_ICProductID,ICTransferItems.FK_ICToStockID,ICTransferItemQty as ViewDetailInvQty,ViewDetailInvTypeCombo='TranIn',
                                                FK_ICTransferID as ViewDetailInvObjectID, ICTransferDate as ViewDetailInvDate, ICTransferNo as  ViewDetailInvObjectNo,
                                                ICTransferItemDesc as ViewDetailInvDesc
                                                from ICTransferItems inner join ICTransfers on ICTransfers.ICTransferID=ICTransferItems.FK_ICTransferID
                                                where ICTransfers.AAStatus='Alive' AND ICTransferItems.AAStatus='Alive'
                                                AND FK_ICProductID ={0}
                                                AND ICTransferItems.FK_PPWOID in (Select PPWOID from PPWOs where AAStatus='Alive' AND FK_PPProductPlnID={1})
                                                 AND (
		                                                    ICTransferItems.FK_ICToStockID in (select FK_ICStockProductID from PPProductionSetups where AAStatus='Alive')
	                                                    Or	ICTransferItems.FK_ICToStockID in (select FK_ICStockSemiProductID from PPProductionSetups where AAStatus='Alive')
	                                                    OR	ICTransferItems.FK_ICToStockID in (select FK_ICStockSemiDetailProductID from PPProductionSetups where AAStatus='Alive')
	                                                ) 
                                                ", iProductID, iProductPlnID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllDataByProduct(int iICProductID)
        {
            string str = string.Format(@"Select ICInventoryStocks.FK_ICProductID,ICInventoryStockQuantity as ViewDetailInvQty
                                                 ,ICInventoryStocks.FK_ICStockID
                                                from ICInventoryStocks where AAStatus='Alive' AND FK_ICProductID={0} and
                                                    FK_ICStockID in (Select ICStockID from ICStocks where AAStatus='Alive')
                                              AND  ICInventoryStockQuantity<>0
                                            ", iICProductID);
            return dal.GetDataSet(str);
        }
        public DataSet GetAllDataByProductNormAndStockType(int iParentProductID, string strProductType, string strStockType)
        {
            string strQuery = string.Format(@"Select ICInventoryStocks.FK_ICProductID,ICInventoryStockQuantity as ViewDetailInvQty
                                                ,PPNormRMQty as ViewDetailInvInvQty,PPNorms.FK_ICProductID as FK_ICProductParentID,ICInventoryStocks.FK_ICStockID
                                                 from ICInventoryStocks
                                                inner join ICProducts on ICProducts.ICProductID=ICInventoryStocks.FK_ICProductID
                                                inner join PPNormRMs on PPNormRMs.FK_ICProductID=ICProducts.ICProductID
                                                inner join PPNorms on PPNorms.PPNormID=PPNormRMs.FK_PPNormID
                                                inner join ICProductTypes on ICProductTypes.ICProductTypeID=ICProducts.FK_ICProductTypeID
                                                inner join ICStocks on ICInventoryStocks.FK_ICStockID=ICStocks.ICStockID
                                                inner join ICStockTypes on ICStockTypes.ICStockTypeID=ICStocks.FK_ICStockTypeID
                                                where ICInventoryStocks.AAStatus='Alive' AND ICProducts.AAStatus='Alive' AND
                                                PPNorms.AAStatus='Alive' AND ICProductTypes.AAStatus='Alive' AND ICInventoryStockQuantity<>0
                                                AND PPNorms.FK_ICProductID={0} AND ICProductTypeNo='{1}' AND ICStockTypeNo='{2}'", iParentProductID,strProductType,strStockType);
            return dal.GetDataSet(strQuery);
        } 

       
    }

	#endregion
}