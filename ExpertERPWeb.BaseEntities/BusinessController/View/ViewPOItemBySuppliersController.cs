using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ViewPOItemBySuppliers
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ViewPOItemBySuppliersController
	//Created Date:Tuesday, September 25, 2012
	//-----------------------------------------------------------
	
	public class ViewPOItemBySuppliersController:BaseBusinessController
	{
		public ViewPOItemBySuppliersController()
		{
			dal= new DALBaseProvider("ViewPOItemBySuppliers",typeof(ViewPOItemBySuppliersInfo));
		}
        public DataSet GetAllObjectPOByProductInRange(int iProductID, int iFromPeriod, int iFromYear, int iToPeriod, int iToYear)
        {
            string str = string.Format(@"SELECT APPOItems.FK_ICProductID,APPOs.FK_APSupplierID,APPOItemQty AS ViewPOItemBySupplierPOQty,APPOItemArrivalDate AS ViewPOItemBySupplierReceiveDate
                                            ,APPOItemID as FK_APPOItemID,FK_APPOID,APPOItemFUnitPrice
                                             FROM dbo.APPOItems INNER JOIN  APPOs ON dbo.APPOItems.FK_APPOID = dbo.APPOs.APPOID
                                                WHERE APPOItems.AAStatus='Alive' AND APPOs.AAStatus='Alive' 
                                                AND APPOItems.FK_ICProductID={0}  AND Month(APPODate)+ Year(APPODate)*12 >={1}
                                                        AND Month(APPODate)+Year(APPODate)*12<={2}"
                                                , iProductID, iFromPeriod + iFromYear * 12, iToPeriod + iToYear * 12);
            return dal.GetDataSet(str);
        }
        public double GetSUMRcpByPOItemLessThanArrivalDate(int iAPPOItemID, DateTime dtePODate)
        {
            string str = string.Format(@"SELECT SUM(ICReceiptItemQty) as ViewPOItemBySupplierOnTimeRcpQty FROM dbo.ICReceiptItems INNER JOIN
                                                    dbo.ICReceipts ON dbo.ICReceiptItems.FK_ICReceiptID = dbo.ICReceipts.ICReceiptID
                                                    INNER JOIN dbo.ICReceiptItemPurchaseOrderItems ON ICReceiptItems.ICReceiptItemID=ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID
                                                    WHERE ICReceiptItems.AAStatus='Alive' AND ICReceipts.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.FK_APPOItemID={0}
                                                            AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)"
                                                , iAPPOItemID, dtePODate.ToString("yyyMMdd"));
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }
        public double GetSUMRcpByPOItemMoreThanArrivalDate(int iAPPOItemID, DateTime dtePODate)
        {
            string str = string.Format(@"SELECT SUM(ICReceiptItemQty) as ViewPOItemBySupplierOnTimeRcpQty FROM dbo.ICReceiptItems INNER JOIN
                                                    dbo.ICReceipts ON dbo.ICReceiptItems.FK_ICReceiptID = dbo.ICReceipts.ICReceiptID
                                                    INNER JOIN dbo.ICReceiptItemPurchaseOrderItems ON ICReceiptItems.ICReceiptItemID=ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID
                                                    WHERE ICReceiptItems.AAStatus='Alive' AND ICReceipts.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.FK_APPOItemID={0}
                                                            AND CONVERT(VARCHAR(10), [ICReceiptDate], 112)> CONVERT(VARCHAR(10), '{1}', 112)"
                                                , iAPPOItemID, dtePODate.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }
        public Nullable<DateTime> GetMaxReceiptDateByPO(int iAPPOItemID)
        {
            string str = string.Format(@"SELECT top 1 ICReceiptDate FROM dbo.ICReceiptItems INNER JOIN
                                                    dbo.ICReceipts ON dbo.ICReceiptItems.FK_ICReceiptID = dbo.ICReceipts.ICReceiptID
                                                    INNER JOIN dbo.ICReceiptItemPurchaseOrderItems ON ICReceiptItems.ICReceiptItemID=ICReceiptItemPurchaseOrderItems.FK_ICReceiptItemID
                                                    WHERE ICReceiptItems.AAStatus='Alive' AND ICReceipts.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.AAStatus='Alive'
                                                    AND ICReceiptItemPurchaseOrderItems.FK_APPOItemID={0}
                                                    Order By ICReceiptDate Desc
                                                            "
                                                , iAPPOItemID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDateTime(ds.Tables[0].Rows[0][0]);
            return null;
        }
        public DataSet GetAllObjectByProductShpPlanItem(int iProductID, int iARShpPlanItemID)
        {
            string strQuery = string.Format(@"SELECT APPOItems.FK_ICProductID,APPOs.FK_APSupplierID,APPOItemQty AS ViewPOItemBySupplierPOQty,APPOItemArrivalDate 
                                                AS ViewPOItemBySupplierReceiveDate,APPOItemID as FK_APPOItemID,FK_APPOID,APPOItemRQty as ViewPOItemBySupplierPORQty,
                                               APPOItemQty-APPOItemRQty  as ViewPOItemBySupplierPORcpQty
                                             FROM dbo.APPOItems INNER JOIN  APPOs ON dbo.APPOItems.FK_APPOID = dbo.APPOs.APPOID
                                                WHERE APPOItems.AAStatus='Alive' AND APPOs.AAStatus='Alive'
                                               AND APPOItems.FK_ICProductID={0} 
                                                AND FK_APSemiOrdPlanID in (SELECT APSemiOrdPlanID FROM APSemiOrdPlans WHERE AAStatus='Alive' AND FK_ARShpPlanItemID={1})", iProductID, iARShpPlanItemID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllObjectByProductInRange(int iProductID, DateTime dteFromDate, DateTime dteToDate)
        {
            string strDate = DALUtil.GenerateBeetween("APPOItemArrivalDate", dteFromDate, dteToDate);
            string strQuery = string.Format(@"SELECT APPOItems.FK_ICProductID,APPOs.FK_APSupplierID,APPOItemQty AS ViewPOItemBySupplierPOQty,APPOItemArrivalDate 
                                                AS ViewPOItemBySupplierReceiveDate,APPOItemID as FK_APPOItemID,FK_APPOID,APPOItemRQty as ViewPOItemBySupplierPORQty,
                                               APPOItemQty-APPOItemRQty  as ViewPOItemBySupplierPORcpQty
                                             FROM dbo.APPOItems INNER JOIN  APPOs ON dbo.APPOItems.FK_APPOID = dbo.APPOs.APPOID
                                                WHERE APPOItems.AAStatus='Alive' AND APPOs.AAStatus='Alive'
                                               AND APPOItems.FK_ICProductID={0} 
                                                AND {1}", iProductID, strDate);
            return dal.GetDataSet(strQuery);
        }
	}
	#endregion
}