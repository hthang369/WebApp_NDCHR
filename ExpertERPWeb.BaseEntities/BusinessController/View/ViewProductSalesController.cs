using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ViewProductSales
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ViewProductSalesController
	//Created Date:23 Tháng Tám 2012
	//-----------------------------------------------------------
	
	public class ViewProductSalesController:BaseBusinessController
	{
		public ViewProductSalesController()
		{
			dal= new DALBaseProvider("ViewProductSales",typeof(ViewProductSalesInfo));
		}

        public List<ViewProductSalesInfo> GetAllProductSale(int iProductID, String strVoucher)
        {
            List<ViewProductSalesInfo> lstProductSale=new List<ViewProductSalesInfo>();
            ICProductsController ProductCtrl=new ICProductsController();
            List<ICProductsInfo> lstProducts = new List<ICProductsInfo>();
            if (iProductID == 0)
            {
                DataSet dsProducts = ProductCtrl.GetAllObjects();
                if (dsProducts != null && dsProducts.Tables.Count > 0 && dsProducts.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in dsProducts.Tables[0].Rows)
                    {
                        ICProductsInfo ProductInfo = (ICProductsInfo)ProductCtrl.GetObjectFromDataRow(dr);
                        if (ProductInfo != null)
                        {
                            lstProducts.Add(ProductInfo);
                        }
                    }
                }
            }
            else
            {
                ICProductsInfo ProductInfo = (ICProductsInfo)ProductCtrl.GetObjectByID(iProductID);
                if (ProductInfo != null)
                {
                    lstProducts.Add(ProductInfo);
                }
            }
            foreach (ICProductsInfo ProductInfo in lstProducts)
            {
                ViewProductSalesInfo ProductSaleInfo = new ViewProductSalesInfo();
                ProductSaleInfo.FK_ICProductID = ProductInfo.ICProductID;
                ProductSaleInfo.ICProductName = ProductInfo.ICProductName;
                DataSet ds = null;
                String str = "";

                #region SO
                if (strVoucher == "SO")
                {
                    str = String.Format(@"SELECT SUM(ARSOItemQty) FROM dbo.ARSOItems WHERE AAStatus='Alive' AND FK_ICProductID={0}", ProductInfo.ICProductID);
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.SaleQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }

                    str = String.Format(@"SELECT SUM(ARCreditNoteItemQty) FROM dbo.ARCreditNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND ARCreditNoteItemTypeCombo='Damaged'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnHuyQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnHuyQty = 0;

                    str = String.Format(@"SELECT SUM(ARCreditNoteItemQty) FROM dbo.ARCreditNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND ARCreditNoteItemTypeCombo='Return'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnTralaiQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnTralaiQty = 0;

                }
                #endregion

                #region Invoice
                if (strVoucher == "Invoice")
                {
                    str = String.Format(@"SELECT SUM(ARInvoiceItemQty) FROM dbo.ARInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0}", ProductInfo.ICProductID);
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.SaleQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }

                    str = String.Format(@"SELECT SUM(ARCreditNoteItemQty) FROM dbo.ARCreditNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND ARCreditNoteItemTypeCombo='Damaged'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnHuyQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnHuyQty = 0;

                    str = String.Format(@"SELECT SUM(ARCreditNoteItemQty) FROM dbo.ARCreditNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND ARCreditNoteItemTypeCombo='Return'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnTralaiQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnTralaiQty = 0;

                }
                #endregion

                #region PO
                if (strVoucher == "PO")
                {
                    str = String.Format(@"SELECT SUM(APPOItemQty) FROM dbo.APPOItems WHERE AAStatus='Alive' AND FK_ICProductID={0}", ProductInfo.ICProductID);
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.SaleQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }

                    str = String.Format(@"SELECT SUM(APDebitNoteItemQty) FROM dbo.APDebitNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND APDebitNoteItemTypeCombo='Damaged'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnHuyQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnHuyQty = 0;

                    str = String.Format(@"SELECT SUM(APDebitNoteItemQty) FROM dbo.APDebitNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND APDebitNoteItemTypeCombo='Return'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnTralaiQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnTralaiQty = 0;

                }
                #endregion

                #region PInvoice
                if (strVoucher == "PInvoice")
                {
                    str = String.Format(@"SELECT SUM(APPInvoiceItemQty) FROM dbo.APPInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0}", ProductInfo.ICProductID);
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.SaleQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }

                    str = String.Format(@"SELECT SUM(APDebitNoteItemQty) FROM dbo.APDebitNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND APDebitNoteItemTypeCombo='Damaged'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnHuyQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnHuyQty = 0;

                    str = String.Format(@"SELECT SUM(APDebitNoteItemQty) FROM dbo.APDebitNoteItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND APDebitNoteItemTypeCombo='Return'", ProductInfo.ICProductID);
                    ds = null;
                    ds = dal.GetDataSet(str);
                    if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    {
                        ProductSaleInfo.ReturnTralaiQty = double.Parse(ds.Tables[0].Rows[0][0].ToString());
                    }
                    else ProductSaleInfo.ReturnTralaiQty = 0;

                }
                #endregion

                if (ProductSaleInfo.SaleQty > 0)
                {
                    ProductSaleInfo.HuyPct = ProductSaleInfo.ReturnHuyQty / ProductSaleInfo.SaleQty * 100;
                    ProductSaleInfo.TralaiPct = ProductSaleInfo.ReturnTralaiQty / ProductSaleInfo.SaleQty * 100;
                    lstProductSale.Add(ProductSaleInfo);
                }
            }
            return lstProductSale;
        }
	}
	#endregion
}