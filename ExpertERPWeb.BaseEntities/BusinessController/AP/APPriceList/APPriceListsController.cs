using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region APPriceLists
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:APPriceListsController
	//Created Date:13 Tháng Ba 2013
	//-----------------------------------------------------------
	
	public class APPriceListsController:BaseBusinessController
	{
		public APPriceListsController()
		{
			dal= new DALBaseProvider("APPriceLists",typeof(APPriceListsInfo));
		}
        
        public DataSet GetObiectPriceList(int productID,  int supplierID, DateTime fromdate, DateTime todate)
        {
            String str = String.Format(@"SELECT * FROM dbo.APPriceListDetails
                                            WHERE AAStatus='Alive'
                                            AND FK_ICProductID NOT IN (SELECT FK_ICProductID FROM dbo.APPriceListDetails 
							                                            WHERE (
									                                            (
										                                            CONVERT(VARCHAR(10), [APPriceListDetailFromDate], 112)<CONVERT(VARCHAR(10), '{2}', 112)
										                                            AND 
										                                            CONVERT(VARCHAR(10), [APPriceListDetailToDate], 112)<CONVERT(VARCHAR(10), '{2}', 112)
									                                            )
									                                            OR 
									                                            (
										                                            CONVERT(VARCHAR(10), [APPriceListDetailFromDate], 112)>CONVERT(VARCHAR(10), '{3}', 112)
										                                            AND 
										                                            CONVERT(VARCHAR(10), [APPriceListDetailToDate], 112)>CONVERT(VARCHAR(10), '{3}', 112)
									                                            )
								                                            )
							                                            )
                                            AND(FK_ICProductID = {0} OR {0} = 0)
                                            AND FK_APPriceListID IN (SELECT APPriceListID FROM dbo.APPriceLists WHERE AAStatus='Alive' AND (FK_APSupplierID = {1} OR {1} = 0) )",
 productID, supplierID, fromdate.ToString("yyyyMMdd"), todate.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }

        public DataSet GetAllOOF()
        {
            String strQuery = String.Format(@"
                                                SELECT *
                                                FROM dbo.ADOFs
                                                WHERE AAStatus = 'Alive'
                                                      AND ADOFTypeCombo = 'O'
                                                ORDER BY ADOFNo ASC   
                                            ");

            DataSet ds = GetDataSet(strQuery);

            return ds;
        }

        #region Bảng giá NCC

        public List<APPriceListsInfo> GetAPPriceListByTypeProduct(int iSupplierID, int iICProductID, DateTime dDateTime)
        {
            List<APPriceListsInfo> lstAPPriceListByProduct = new List<APPriceListsInfo>();

            String strQuery = String.Format(@"
                                                SELECT APPriceLists.*
                                                FROM dbo.APPriceLists INNER JOIN dbo.APPriceListDetails ON dbo.APPriceLists.APPriceListID = dbo.APPriceListDetails.FK_APPriceListID
                                                WHERE APPriceLists.AAStatus = 'Alive' AND APPriceListDetails.AAStatus = 'Alive'
                                                      AND APPriceLists.APPriceListTypeCombo = 'Product'
                                                      AND APPriceLists.FK_APSupplierID = {0}

                                                      AND APPriceListDetails.FK_ICProductID = {1}
                                                       AND ( {2} >= CONVERT(VARCHAR,APPriceListDetails.APPriceListDetailFromDate,112) AND {2} <= CONVERT(VARCHAR,APPriceListDetails.APPriceListDetailToDate,112) )
                                            ", iSupplierID, iICProductID, dDateTime.ToString("yyyyMMdd"));

            DataSet ds = GetDataSet(strQuery);

            List<BusinessObject> lstAPPriceList = new List<BusinessObject>();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                lstAPPriceList = new APPriceListsController().GetListFromDataset(ds);
                foreach (APPriceListsInfo objAPPriceListsInfo in lstAPPriceList)
                    lstAPPriceListByProduct.Add(objAPPriceListsInfo);
            }

            return lstAPPriceListByProduct;
        }

        /// <summary>
        /// Lấy các bảng giá phù hợp với sản phẩm theo bảng giá NCC loại ICode
        /// </summary>
        /// <param name="iSupplierID"></param>
        /// <param name="iICProductID"></param>
        /// <returns></returns>
        public List<APPriceListsInfo> GetAPPriceListByTypeICode(int iSupplierID, int iICProductID, DateTime dDateTime)
        {
            APPriceListsController objAPPriceListsCtrl = new APPriceListsController();

            #region Lấy ra các mã phân tích IOF của sản phẩm

            List<String> lstIOFOfItem = new List<string>();

            ICProductsInfo objICProductsInfo = (ICProductsInfo)new ICProductsController().GetObjectByID(iICProductID);
            if (objICProductsInfo != null)
            {
                lstIOFOfItem = GetICProductIOF(objICProductsInfo);
            }

            #endregion

            #region Tìm các bảng giá với mã IOF của sản phẩm

            List<APPriceListsInfo> lstAPPriceListByIOF = new List<APPriceListsInfo>();

            if (lstIOFOfItem.Count > 0)
            {
                foreach (String IOFNo in lstIOFOfItem)
                {
                    int iADOFItemID = new ADOFItemsController().GetObjectIDByNo(IOFNo);
                    if (iADOFItemID > 0)
                    {
                        String StrQueryPriceListByIOF = String.Format(@"SELECT  DISTINCT APPriceLists.*
                                                                                FROM dbo.APPriceLists INNER JOIN dbo.APPriceListDetails ON dbo.APPriceLists.APPriceListID = dbo.APPriceListDetails.FK_APPriceListID
                                                                                WHERE APPriceLists.AAStatus = 'Alive' AND APPriceListDetails.AAStatus = 'Alive'
                                                                                      AND APPriceLists.FK_APSupplierID = {0}
                                                                                      AND APPriceListDetails.FK_ADOFItemID = {1}
                                                                                      AND ( {2} >= CONVERT(VARCHAR,APPriceListDetails.APPriceListDetailFromDate,112) AND {2} <= CONVERT(VARCHAR,APPriceListDetails.APPriceListDetailToDate,112) ) 
                                                                      ", iSupplierID, iADOFItemID, dDateTime.ToString("yyyyMMdd"));
                        DataSet dsPriceListByIOF = GetDataSet(StrQueryPriceListByIOF);
                        List<BusinessObject> lstPriceListIOF = new List<BusinessObject>();

                        if (dsPriceListByIOF != null && dsPriceListByIOF.Tables.Count > 0 && dsPriceListByIOF.Tables[0].Rows.Count > 0)
                        {
                            lstPriceListIOF = objAPPriceListsCtrl.GetListFromDataset(dsPriceListByIOF);
                            foreach (APPriceListsInfo objAPPriceListsInfo in lstPriceListIOF)
                            {
                                lstAPPriceListByIOF.Add(objAPPriceListsInfo);
                            }
                        }
                    }
                }
            }

            #endregion

            return lstAPPriceListByIOF;
        }

        public List<String> GetICProductIOF(ICProductsInfo objICProductsInfo)
        {
            List<String> lstProductIOFNo = new List<string>();

            if (objICProductsInfo.ICProductIOF01Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF01Combo);

            if (objICProductsInfo.ICProductIOF02Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF02Combo);

            if (objICProductsInfo.ICProductIOF03Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF03Combo);

            if (objICProductsInfo.ICProductIOF04Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF04Combo);

            if (objICProductsInfo.ICProductIOF05Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF05Combo);

            if (objICProductsInfo.ICProductIOF06Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF06Combo);

            if (objICProductsInfo.ICProductIOF07Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF07Combo);

            if (objICProductsInfo.ICProductIOF08Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF08Combo);

            if (objICProductsInfo.ICProductIOF09Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF09Combo);

            if (objICProductsInfo.ICProductIOF10Combo != "")
                lstProductIOFNo.Add(objICProductsInfo.ICProductIOF10Combo);

            return lstProductIOFNo;
        }

        #endregion

        public int GetFistPriceListBySupplierAndDate(int iSupplierID, DateTime dteDate)
        {
            DataSet ds = GetPriceListBySupplierAndDate(iSupplierID, dteDate);
            List<BusinessObject> ListAPPriceList = new List<BusinessObject>();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                APPriceListsInfo objAPPriceListsStartDateMax = new APPriceListsInfo();

                ListAPPriceList = new APPriceListsController().GetListFromDataset(ds);
                if (ListAPPriceList.Count == 1)
                {
                    objAPPriceListsStartDateMax = (APPriceListsInfo)ListAPPriceList[0];
                }
                else if (ListAPPriceList.Count > 1)
                {
                    bool IsCheck = false;
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        APPriceListsInfo objAPPriceList = (APPriceListsInfo)ListAPPriceList[i];

                        if (IsCheck == false && objAPPriceList.APPriceListStartDate != null)
                        {
                            objAPPriceListsStartDateMax = (APPriceListsInfo)ListAPPriceList[i];
                            IsCheck = true;
                        }

                        if (objAPPriceListsStartDateMax.APPriceListStartDate < objAPPriceList.APPriceListStartDate)
                        {
                            GMCUtil.CopyObject((APPriceListsInfo)ListAPPriceList[i], objAPPriceListsStartDateMax, true);
                        }
                    }
                }

                return objAPPriceListsStartDateMax.APPriceListID;
            }
            return 0;
        }

        public DataSet GetPriceListBySupplierAndDate(int iSupplierID, DateTime dteDate)
        {
            string strQueryDate = GetQueryByStartAndEndDate(dteDate);
            string strQuery = string.Format(@"Select * from APPriceLists Where AAStatus='Alive' AND FK_APSupplierID={0} AND {1}", iSupplierID, strQueryDate);
            return dal.GetDataSet(strQuery);
        }
        public string GetQueryByStartAndEndDate(DateTime dteDate)
        {
            string strQueryStartDate = DALUtil.GennerateCondition("APPriceListStartDate", CompareType.LessEqualThan, dteDate);
            strQueryStartDate = " (APPriceListStartDate IS NULL OR " + strQueryStartDate + ") AND";
            string strQueryEndDate = DALUtil.GennerateCondition("APPriceListEndDate", CompareType.GreaterEqualThan, dteDate);
            strQueryEndDate = " (APPriceListEndDate IS NULL OR " + strQueryEndDate + ")";
            return strQueryStartDate + strQueryEndDate;
        }
    }
	#endregion
}