using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
    #region APPInvoices
    //-----------------------------------------------------------
    //Generated By: GMC Studio
    //Class:APPInvoicesController
    //Created Date:Friday, July 10, 2009
    //-----------------------------------------------------------

    public class APPInvoicesController : BaseBusinessController
    {
        public APPInvoicesController()
        {
            dal = new DALBaseProvider("APPInvoices", typeof(APPInvoicesInfo));
        }
        public DataSet GetPInvoice(DateTime FromDate, DateTime ToDate)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.APPInvoices WHERE AAStatus='Alive' 
                                            AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) 
                                            AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)", FromDate.ToString("yyyyMMdd"), ToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }       
        //hieu nguyen add,Feb 24,2010
        public List<APPInvoicesInfo> ListObjectsBySupplierIDAndFromDateToDateAndStatus(int iAPSupplierID, DateTime dtFromDate, DateTime dtToDate, String strStatus)
        {
            List<APPInvoicesInfo> lstAPPInvoices = new List<APPInvoicesInfo>();
            String strQuery = String.Empty;
            if (String.IsNullOrEmpty(strStatus))
              strQuery = String.Format("SELECT * FROM [dbo].[APPInvoices] WHERE [FK_APSupplierID]={0} AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iAPSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            else
              strQuery = String.Format("SELECT * FROM [dbo].[APPInvoices] WHERE [FK_APSupplierID]={0} AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'AND ([APPInvoiceStatusCombo]='{4}')", iAPSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strStatus);
            DataSet dsAPPInvoices = dal.GetDataSet(strQuery);
            if (dsAPPInvoices != null)
            {
                if (dsAPPInvoices.Tables.Count > 0)
                {
                    foreach (DataRow row in dsAPPInvoices.Tables[0].Rows)
                    {
                        APPInvoicesInfo objAPPInvoicesInfo = (APPInvoicesInfo)dal.GetObjectFromDataRow(row);
                        if (objAPPInvoicesInfo != null)
                        {
                            lstAPPInvoices.Add(objAPPInvoicesInfo);
                        }
                    }
                }
            }
            return lstAPPInvoices;
        }

        public DataSet GetInvoicesByRangeDate(DateTime dtFromDate, DateTime dtToDate)
        {
            String strQuery = String.Format("Select * From [APPInvoices] WHERE (CONVERT(VARCHAR(10), [APPInvoiceDate], 112)>= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)) AND ([AAStatus]='Alive')", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllPInvoice_InPeriod(int iPeriod, int iYear,string status)
        {
            DateTime fromDate = new DateTime(iYear, iPeriod, 1);
            DateTime toDate = new DateTime(iYear, iPeriod, DateTime.DaysInMonth(iYear, iPeriod));
            string query = "SELECT * FROM APPInvoices WHERE AAStatus = 'Alive' AND 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format("AND APPInvoiceDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND APPInvoiceDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            DataSet ds = dal.GetDataSet(query + String.Format(" and (AAPostStatus is Null or AAPostStatus = N'{0}')", status));
            return ds;
        }

        public DataSet GetDataSetARSOsByYearMonthAndFK_SupplierID(int year, int month, int FK_SupplierID)
        {
            return dal.GetDataSet("APPInvoices_SelectByYearMonthAndFK_SupplierID", year, month, FK_SupplierID);
        }

        public int GetAllPInvoice_BySmallerPeriodAndNotCompleteAndSupplier(int iPeriod, int year, int iSupplierID)
        {
            string strQuery = string.Format("select * from APPInvoices where AAStatus='Alive' and  datepart(month, APPInvoiceDate)+ datepart(year, APPInvoiceDate)*12<={0} and FK_APSupplierID={1} and APPInvoiceStatusCombo!='Completed' ", iPeriod + year * 12, iSupplierID);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null || ds.Tables[0].Rows.Count == 0) return 0;
            return ds.Tables[0].Rows.Count;
        }
        public int GetAllPInvoice_ByPeriodAndNotCompleteAndSupplierr(int iPeriod, int iYear, int iSupplierID)
        {

            string strQuery = string.Format("select * from APPInvoices where AAStatus='Alive' and  datepart(month, APPInvoiceDate)={0}  and datepart(year, APPInvoiceDate)={1}  and FK_APSupplierID= {2} and APPInvoiceStatusCombo!='Completed' ", iPeriod, iYear, iSupplierID);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null || ds.Tables[0].Rows.Count == 0) return 0;
            return ds.Tables[0].Rows.Count;
        }

        public DataSet GetAllInvoiceDuePayment(int iCutOffDay)
        {
            DateTime dtFromDate = DateTime.Now;
            DateTime dtToDate = DateTime.Now.AddDays(iCutOffDay);

            string strQuery = string.Format("Select * from  APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }
        
        public DataSet GetAllInvoiceOverDuePayment(DateTime dteDate)
        {
            string strQuery = string.Format("Select * from APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{0}', 112)) ", dteDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }


        public DataSet GetAllInvoiceOverDueInRange(DateTime cutoffdate, int iFromdate, int iToday)
        {
            DateTime dtFromDate = cutoffdate.AddDays(-iToday);
            DateTime dtToDate = cutoffdate.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select * from APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }
        public double GetAmtTotInvoiceOverDueInRange(DateTime cutoffday, int iFromdate, int iToday)
        {
            DateTime dtFromDate = cutoffday.AddDays(-iToday);
            DateTime dtToDate = cutoffday.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select Sum(APPInvoiceRAmtTot) from APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) ", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                try
                {
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0].ToString());
                }
                catch (System.Exception ex)
                {

                }
            }
            return 0;
        }
        public DataSet GetTopInvoiceOverDueInRange(int top, int iFromdate, int iToday)
        {
            DateTime dtFromDate = new DateTime();
            if (iToday == int.MaxValue)
                dtFromDate = DateTime.MinValue;
            else
                dtFromDate = DateTime.Now.AddDays(-iToday);
            DateTime dtToDate = DateTime.Now.AddDays(-iFromdate);

            string strQuery = string.Format("Select top {2} * from APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) order by APPInvoiceExpireDate", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), top);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetTopInvoiceOverDueInRange(int top, DateTime dtFromDate, DateTime dtToDate)
        {
            string strQuery = string.Format("Select top {2} * from APPInvoices where AAStatus='Alive' and  APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{0}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112)) order by APPInvoiceExpireDate", dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), top);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllDataDueDayInRange(DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT * FROM dbo.APPInvoices WHERE AAStatus='Alive' and APPInvoiceRAmtTot>0 AND APPInvoiceExpireDate IS NOT NULL AND {0}",strDate);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }
        public double GetTotalRAmtPInvoiceDueDayInRange(DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT SUM(APPInvoiceRAmtTot) FROM dbo.APPInvoices WHERE AAStatus='Alive' and APPInvoiceRAmtTot>0 AND APPInvoiceExpireDate IS NOT NULL
                                                                                    AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) > CONVERT(VARCHAR(10), '{0}', 112))
                                                                                    AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{1}', 112))",
                                                                                      String.Format("{0:yyyMMdd}", dtFrom), String.Format("{0:yyyyMMdd}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetListPInvoiceInPeriodBySupplier(int iPeriod, int iYear, int iSupplierID)
        {
            String strQuery = String.Format(@"SELECT * FROM  APPInvoices Where AAStatus = 'Alive' And month(APPInvoiceDate) = {0} AND year(APPInvoiceDate) = {1} And FK_APSupplierID = {2}", iPeriod, iYear, iSupplierID);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return ds;

            return null;
        }

        public DataSet GetAllPInvoiceOverDueInRangeBySupplier(DateTime cutoffday, int iFromdate, int iToday, int iSupplierID)
        {
            DateTime dtFromDate = cutoffday.AddDays(-iToday);
            DateTime dtToDate = cutoffday.AddDays(-iFromdate);
            if (iToday == 100)
                dtFromDate = DateTime.MinValue;

            string strQuery = string.Format("Select * from APPInvoices where AAStatus='Alive' And FK_APSupplierID = {0} And APPInvoiceRAmtTot>0 AND [APPInvoiceExpireDate] IS NOT NULL AND  (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) >= CONVERT(VARCHAR(10), '{1}', 112)) AND (CONVERT(VARCHAR(10), [APPInvoiceExpireDate], 112) <= CONVERT(VARCHAR(10), '{2}', 112)) ", iSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"));
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        /// <summary> 
        /// Get Last By Supplier And Less Than Year Month.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLastBySupplierLessThanYearMonth(int iSupplierID, int iYear,int iMonth)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                        and month(APPInvoiceDate) + year(APPInvoiceDate)*12 <= {1} order by APPInvoiceDate desc", iSupplierID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> 
        /// Get Largest By Supplier And Less Than Year Month.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLargestAmtBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                        and month(APPInvoiceDate) +  year(APPInvoiceDate)*12 <= {1} order by APPInvoiceAmtTot desc", iSupplierID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> 
        /// Get Total Amt by Supplier Status and Less than Year.
        /// Status=Empty Get All
        /// Viet Nguyen 12/04/17
        /// </summary>
        public double GetAmtTotalBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth, string strStatus)
        {
            string strQuery = string.Format(@"select SUM(APPInvoiceAmtTot) from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPInvoiceDate) + year(APPInvoiceDate)*12 <={1}", iSupplierID, iMonth + iYear * 12);
            if (!string.IsNullOrEmpty(strStatus))
                strQuery += string.Format(" AND APPInvoiceStatusCombo='{0}'", strStatus);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        /// <summary> 
        /// Count by Supplier Status and Less than Year, Month.
        /// Status=Empty Count All
        /// Viet Nguyen 12/04/17
        /// </summary>
        public double CountBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth, string strStatus)
        {
            string strQuery = string.Format(@"select count(*) from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPInvoiceDate) + year(APPInvoiceDate)*12 <={1}", iSupplierID, iMonth + iYear * 12);
            if (!string.IsNullOrEmpty(strStatus))
                strQuery += string.Format(" AND APPInvoiceStatusCombo='{0}'", strStatus);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        /// <summary> 
        /// Get Largest Disc By Supplier And Less Than Year Month.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLargestDiscAmtBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                        and month(APPInvoiceDate) +  year(APPInvoiceDate)*12 <= {1} order by APPInvoiceDiscAmt desc", iSupplierID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> 
        /// Get Total Disc Amt by Supplier  and Less than Year.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public double GetDiscAmtTotalBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth)
        {
            string strQuery = string.Format(@"select SUM(APPInvoiceDiscAmt) from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPInvoiceDate) + year(APPInvoiceDate)*12 <={1} AND APPInvoiceDiscAmt>0", iSupplierID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        /// <summary> 
        /// Count PInvoice Disc Amt by Supplier  and Less than Year, Month.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public int CountPInvoiceDiscAmtBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth)
        {
            string strQuery = string.Format(@"select count(*) from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPInvoiceDate) + year(APPInvoiceDate)*12 <={1} AND APPInvoiceDiscAmt>0", iSupplierID, iMonth + iYear * 12);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return int.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        /// <summary> 
        /// Get Last By Supplier.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLastBySupplier(int iSupplierID)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                         order by APPInvoiceDate desc", iSupplierID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> 
        /// Get Largest By Supplier.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLargestAmtBySupplier(int iSupplierID)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                         order by APPInvoiceAmtTot desc", iSupplierID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> 
        /// Get Last Disc Amt PInvoice By Supplier.
        /// Viet Nguyen 12/04/17
        /// </summary>
        public APPInvoicesInfo GetLastDiscAmtPInvoiceBySupplier(int iSupplierID)
        {
            string strQuery = string.Format(@"select top 1 * from APPInvoices where AAStatus = 'Alive' and FK_APSupplierID = {0} 
                                         and APPInvoiceDiscAmt > 0 order by APPInvoiceDate desc", iSupplierID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        /// <summary> Get All PInvoice Before Date
        ///Created By Huu Vinh
        /// Created Date 18.04.12
        /// </summary>
        /// 
        public DataSet GetAllAPPInvoiceBeforeDate(int iSupplierID, DateTime date)
        {
            String query = string.Format(@"SELECT * FROM APPInvoices WHERE AAStatus = 'Alive' AND FK_APSupplierID={0} AND (CONVERT(VARCHAR(10), [APPInvoiceDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112))", iSupplierID, date.ToString("yyyyMMdd"));
            return dal.GetDataSet(query);
        }

        #region Get All Amt Cost By From Date To Date AND Supplier --Vinh -- 17/08/2012

        public DataSet GetAllAmtByFromDateToDateANDSupplier(int iSupplier, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(APPInvoiceDate) AS Year, MONTH(APPInvoiceDate) AS Month, APSupplierGroupID, SUM(dbo.APPInvoiceItems.APPInvoiceItemAmtTot) AS Amt
                                        FROM dbo.APPInvoices INNER JOIN dbo.APPInvoiceItems ON APPInvoiceID = FK_APPInvoiceID INNER JOIN dbo.APSuppliers ON dbo.APPInvoices.FK_APSupplierID=dbo.APSuppliers.APSupplierID INNER JOIN dbo.APSupplierGroups ON dbo.APSuppliers.FK_APSupplierGroupID=dbo.APSupplierGroups.APSupplierGroupID
                                        WHERE dbo.APPInvoices.AAStatus='Alive' AND dbo.APPInvoiceItems.AAStatus='Alive' AND dbo.APSuppliers.AAStatus='Alive' AND dbo.APSupplierGroups.AAStatus='Alive'
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplier != 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.FK_APSupplierID={0}", iSupplier);
            }
            str += String.Format(@"GROUP BY YEAR(APPInvoiceDate), MONTH(APPInvoiceDate), APSupplierGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All PInvoice By FromDate ToDate AND Supplier --Vinh --20/08/2012

        public DataSet GetAllAPPInvoiceByFromDateToDateANDSupplier(int iSupplierGroupID, int iSupplierID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.APPInvoices
                                        WHERE dbo.APPInvoices.AAStatus='Alive'
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplierID != 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.FK_APSupplierID={0}", iSupplierID);
            }
            if (iSupplierGroupID != 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID = {0})", iSupplierGroupID);
            }
            else if (iSupplierGroupID == 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID <> 0)");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetAllPInvoiceNeedPayment(int iSupplierID, int iCurrencyID, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GennerateCondition("APPInvoiceDate", CompareType.LessEqualThan, dtTo);
            String strQuery = String.Format(@"SELECT * FROM APPInvoices 
                                                    WHERE AAStatus = 'Alive' 
                                                    AND APPInvoices.FK_GECurrencyID = {0}
                                                    AND FK_APSupplierID = {1}
                                                    AND APPInvoiceRAmtTot > 0
                                                    AND {2} ORDER BY APPInvoiceExpireDate", iCurrencyID, iSupplierID, strTimeCond);

            return GetDataSet(strQuery);

        }
        public DataSet GetAllPInvoiceBySupplier(int iSupplierID, int iCurrencyID, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GennerateCondition("APPInvoiceDate", CompareType.LessEqualThan, dtTo);
            String strQuery = String.Format(@"SELECT * FROM APPInvoices 
                                                    WHERE AAStatus = 'Alive' 
                                                    AND APPInvoices.FK_GECurrencyID = {0}
                                                    AND FK_APSupplierID = {1}
                                                    AND {2} ORDER BY APPInvoiceExpireDate", iCurrencyID, iSupplierID, strTimeCond);

            return GetDataSet(strQuery);

        }

        #region Get All Invoice By Product

        public DataSet GetAllAPPInvoiceByProduct(int iProductID)
        {
            String str = String.Format(@"SELECT * FROM APPInvoices WHERE AAStatus='Alive' AND APPInvoiceID IN (SELECT FK_APPInvoiceID FROM APPInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All PInvoice By FromDate ToDate AND Product --Vinh --26/10/2012

        public DataSet GetAllAPPInvoiceByFromDateToDateANDProduct(int iProductGroupID, int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.APPInvoices
                                        WHERE dbo.APPInvoices.AAStatus='Alive'
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.APPInvoiceID IN (SELECT FK_APPInvoiceID FROM APPInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            }
            if (iProductGroupID != 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.APPInvoiceID IN (SELECT FK_APPInvoiceID FROM APPInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID = {0} AND ICProductIsStkItm='True'))", iProductGroupID);
            }
            else if (iProductGroupID == 0)
            {
                str += String.Format(@" AND dbo.APPInvoices.APPInvoiceID IN (SELECT FK_APPInvoiceID FROM APPInvoiceItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID <> 0 AND ICProductIsStkItm='True'))");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Amt By FromDate ToDate AND Product --Vinh --26/10/2012

        public DataSet GetAllAmtByFromDateToDateANDProduct(int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(APPInvoiceDate) AS Year, MONTH(APPInvoiceDate) AS Month, ICProductGroupID, SUM(dbo.APPInvoiceItems.APPInvoiceItemAmtTot) AS Amt
                                        FROM dbo.APPInvoices INNER JOIN dbo.APPInvoiceItems ON APPInvoiceID = FK_APPInvoiceID INNER JOIN dbo.ICProducts ON dbo.APPInvoiceItems.FK_ICProductID=dbo.ICProducts.ICProductID INNER JOIN dbo.ICProductGroups ON dbo.ICProducts.FK_ICProductGroupID=dbo.ICProductGroups.ICProductGroupID
                                        WHERE dbo.APPInvoices.AAStatus='Alive' AND dbo.APPInvoiceItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPInvoiceDate) * 12 +MONTH(APPInvoiceDate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.APPInvoiceItems.FK_ICProductID={0}", iProductID);
            }
            str += String.Format(@" AND dbo.APPInvoiceItems.FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True')");
            str += String.Format(@"GROUP BY YEAR(APPInvoiceDate), MONTH(APPInvoiceDate), ICProductGroupID");
            return dal.GetDataSet(str);
        }

        public DataSet GetAllPInvoiceNeedPayment(int iSupplierID)
        {
            String strQuery = String.Format(@"SELECT * FROM APPInvoices 
                                                    WHERE AAStatus = 'Alive' 
                                                    AND FK_APSupplierID = {0}
                                                    AND APPInvoiceRFAmtTot > 0
                                                    ORDER BY APPInvoiceExpireDate", iSupplierID);

            return GetDataSet(strQuery);

        }

        #endregion

        /// <summary>
        /// Add Trung - 04-01-2013 - Tính dòng tiền
        /// </summary>
        /// <param name="dtFrom"></param>
        /// <param name="dtTo"></param>
        /// <returns></returns>
        public double GetRAmtTotByRangeDate(DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT SUM(APPInvoiceRAmtTot) FROM APPInvoices WHERE AAStatus='Alive' AND APPInvoiceRAmtTot>0 AND APPInvoiceExpireDate IS NOT NULL AND {0}", strDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public double GetSumFieldBySupllierInRange(string strFieldNeedSum, int iSupplier, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM({0}) FROM APPInvoices WHERE AAStatus='Alive' AND FK_APSupplierID={1} AND APPInvoiceRFAmtTot>0 AND APPInvoiceExpireDate IS NOT NULL AND {2}", strFieldNeedSum, iSupplier, strDate);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllInvoiceBySupplierInRange(int iSupplier, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM APPInvoices WHERE AAStatus='Alive' AND FK_APSupplierID={0} AND APPInvoiceExpireDate IS NOT NULL AND APPInvoiceRFAmtTot>0 AND {1}", iSupplier, strDate);
            return GetDataSet(strQuery);
        }

        public DataSet GetListPInvoiceBySupplierAndInRange(int iSupplierID, DateTime dtFromTemp, DateTime dtToTemp, string[] lstAccount)
        {
            String strAccount = "";
            foreach (String strAcc in lstAccount)
            {
                if (strAcc == "")
                    continue;
                if (strAccount == "")
                {
                    strAccount = String.Format(@"FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE AAStatus='Alive' AND (GLAccountNo LIKE '{0}%' ", strAcc);
                }
                else
                {
                    strAccount += String.Format(@" OR GLAccountNo LIKE '{0}%' ", strAcc);
                }
            }
            if (strAccount != "")
                strAccount += "))";
            String strDate = DALUtil.GenerateBeetween("GLJournalDueDate", dtFromTemp, dtToTemp);
            String strQuery = String.Format(@"SELECT *
                                            FROM APPInvoices 
                                            WHERE AAStatus='Alive'
                                            AND (FK_APSupplierID={0} OR 0={0})
                                            AND APPInvoiceNo IN (
	                                            SELECT DISTINCT GLJournalDocumentNo
	                                            FROM GLJournals
	                                            WHERE GLJournals.GLJournalDueDate IS NOT NULL
	                                            AND {1}
                                                AND {2}
                                            )
                                            ", iSupplierID,strDate,strAccount);
            return dal.GetDataSet(strQuery);
        }


        public double GetSUMPInvoiceRAmt(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM(APPInvoiceRAmtTot)
                                            FROM dbo.APPInvoices
                                            WHERE AAStatus = 'Alive'
                                            AND {0}", strDateCond);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllPInvoiceInComplete(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("APPInvoiceExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT APPInvoices.*
                                            FROM dbo.APPInvoices
                                            WHERE AAStatus = 'Alive'
                                            AND APPInvoiceRAmtTot > 0
                                            AND {0}", strDateCond);

            return GetDataSet(strQuery);
        }
        public APPInvoicesInfo GetObjectByReceiptItemID(int iReceiptItemID)
        {
            String strQuery = String.Format(@"SELECT a.* 
    FROM dbo.APPInvoices a 
        INNER JOIN dbo.APPInvoiceItems b ON a.AAStatus = 'Alive' AND b.AAStatus = 'Alive' AND a.APPInvoiceID = b.FK_APPInvoiceID
        INNER JOIN dbo.ICReceiptItemPInvoiceItems c ON c.AAStatus = 'Alive' AND c.FK_ICReceiptItemID = {0} AND c.FK_APPInvoiceItemID = b.APPInvoiceItemID
", iReceiptItemID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables[0].Rows != null && ds.Tables[0].Rows.Count != 0)
            {
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            strQuery = String.Format(@"SELECT a.* 
    FROM dbo.APPInvoices a 
        INNER JOIN dbo.APPInvoiceItems b ON a.AAStatus = 'Alive' AND b.AAStatus = 'Alive' AND a.APPInvoiceID = b.FK_APPInvoiceID
        INNER JOIN dbo.ICRequestReceiptItemAPPInvoiceItems c ON c.AAStatus = 'Alive' AND c.FK_APPInvoiceItemID = b.APPInvoiceItemID
        INNER JOIN dbo.ICReceiptItemRequestReceiptItems d ON d.AAStatus = 'Alive' AND d.FK_ICReceiptItemID = {0} AND d.FK_ICRequestReceiptItemID = c.FK_ICRequestReceiptItemID
", iReceiptItemID);
            ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables[0].Rows != null && ds.Tables[0].Rows.Count != 0)
            {
                return (APPInvoicesInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return null;
        }

        public DateTime GetStartDayOfYear()
        {
            String strQuery = String.Format(@"
                                               SELECT
                                                     DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS StartOfYear
                                           ");
            DateTime dt = DateTime.Now;

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dt = Convert.ToDateTime(ds.Tables[0].Rows[0][0].ToString());
            }

            return dt;
        }

        public DateTime GetLastDayOfYear()
        {
            String strQuery = String.Format(@" Select
                                                     DATEADD(yy, DATEDIFF(yy,0,getdate()) + 1, -1) AS LastDayOfYear
                                          ");
            DateTime dt = DateTime.Now;

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                dt = Convert.ToDateTime(ds.Tables[0].Rows[0][0].ToString());
            }

            return dt;
        }

        public APPOsInfo GetPOFromInvoice(int iAPPInvoiceID)
        {
            string strQuery = string.Format(@"SELECT TOP 1  dbo.APPOs.* 
                                                FROM    dbo.APPOs
                                                        INNER JOIN dbo.APPOItems ON dbo.APPOs.APPOID = dbo.APPOItems.FK_APPOID
                                                                                    AND dbo.APPOs.AAStatus = 'Alive'
                                                                                    AND dbo.APPOItems.AAStatus = 'Alive'
                                                        INNER JOIN dbo.APPInvoiceItemPurchaseOrderItems ON dbo.APPOItems.APPOItemID = dbo.APPInvoiceItemPurchaseOrderItems.FK_APPOItemID
                                                                                                           AND APPInvoiceItemPurchaseOrderItems.AAStatus = 'Alive'
                                                        INNER JOIN dbo.APPInvoiceItems ON dbo.APPInvoiceItemPurchaseOrderItems.FK_APPInvoiceItemID = dbo.APPInvoiceItems.APPInvoiceItemID
                                                                                          AND dbo.APPInvoiceItems.AAStatus = 'Alive'
                                                        INNER JOIN dbo.APPInvoices ON dbo.APPInvoiceItems.FK_APPInvoiceID = dbo.APPInvoices.APPInvoiceID
                                                                                      AND dbo.APPInvoices.AAStatus = 'Alive'
                                                                                      AND dbo.APPInvoices.APPInvoiceID= 1", iAPPInvoiceID);
            DataSet ds = GetDataSet(strQuery);

            APPOsInfo objAPPOInfo=null;
            if (ds != null & ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                objAPPOInfo = (APPOsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return objAPPOInfo;
        }

        public DataSet GetAllDataByCreditAccount(int iGLAccountID, int iGECurrencyID, int iAPSupplierID, string strStatus, DateTime dtFromDate, DateTime dtToDate)
        {
            string strQuery = string.Empty;
            string strStatusCondition = string.Empty;

            //if (strStatus == "New")
            //{
            //    strStatusCondition = " AND APPInvoiceRAmtTot > 0 AND  APPInvoiceRAmtTot = APPInvoiceAmtTot";
            //}
            //else if (strStatus == "Incomplete")
            //{
            //    strStatusCondition = " AND APPInvoiceRAmtTot < APPInvoiceAmtTot AND APPInvoiceRAmtTot > 0";
            //}
            //else if (strStatus == "Completed")
            //{
            //    strStatusCondition = " AND APPInvoiceRAmtTot = 0";
            //}
            strStatusCondition = " AND APPInvoiceRAmtTot <> 0";
            strQuery = string.Format(@"SELECT  *
                                        FROM   dbo.APPInvoices 
                                        INNER JOIN dbo.GLAccounts ON dbo.APPInvoices.FK_GLAccountID = dbo.GLAccounts.GLAccountID AND dbo.GLAccounts.AAStatus = 'Alive'
                                     AND dbo.GLAccounts.GLAccountTypeCombo = 'AP'
                                     AND dbo.APPInvoices.AAStatus = 'Alive'
                                     AND dbo.APPInvoices.AAPostStatus = 'Post'
                                     AND ( dbo.APPInvoices.FK_GLAccountID = {0}
                                           OR {0} = 0
                                         )
                                     AND ( dbo.APPInvoices.FK_APSupplierID = {1}
                                           OR {1} = 0
                                         )
                                     AND ( dbo.APPInvoices.FK_GECurrencyID = {2}
                                           OR {2} = 0
                                         )
                                     AND ( CONVERT(VARCHAR(20), dbo.APPInvoices.APPInvoiceDate, 112) BETWEEN CONVERT(VARCHAR(20), '{3}', 112)
                                                              AND
                                                              CONVERT(VARCHAR(20), '{4}', 112) )
						             {5}", iGLAccountID, iAPSupplierID, iGECurrencyID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), strStatusCondition);
            return GetDataSet(strQuery);
        }
    }
    #endregion
}