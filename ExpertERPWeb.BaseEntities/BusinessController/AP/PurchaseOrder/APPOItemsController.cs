using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region APPOItems
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:APPOItemsController
	//Created Date:Friday, October 16, 2009
	//-----------------------------------------------------------
	
	public class APPOItemsController:BaseBusinessController
	{
        private readonly String spAPPOItems_SelectByProductAndAPPOShpDate = "APPOItems_SelectByProductAndAPPOShpDate";
        private readonly String spAPPOItems_SelectByProductStockAndAPPOShpDate = "APPOItems_SelectByProductStockAndAPPOShpDate";
		public APPOItemsController()
		{
			dal= new DALBaseProvider("APPOItems",typeof(APPOItemsInfo));
		}
        public DataSet GetItemAPPOByID(int ObjectID)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.APPOItems WHERE AAStatus='Alive' AND FK_APPOID = {0}", ObjectID);
            return dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// Desc:
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dtFDate"></param>
        /// <param name="dtTDate"></param>
        /// <returns></returns>
        public DataSet GetDataSetAPPOItemsByICProductIDAndFDateTDate(int iICProductID, DateTime dtFDate, DateTime dtTDate)
        {
            DataSet dsAPPOItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[APPOItems] WHERE [FK_APPOID] IN (SELECT [APPOID] FROM [dbo].[APPOs] WHERE CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [FK_ICProductID]={0} AND [AAStatus] ='{3}'", iICProductID, dtFDate.ToString("yyyyMMdd"), dtTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.19
        /// Desc:
        /// </summary>
        /// <param name="iFK_ICProductID"></param>
        /// <param name="dtShpDate"></param>
        /// <param name="strAAStatus"></param>
        /// <returns></returns>
        public DataSet GetDataSetAPPOItemsByICProductAndShpDate(int iFK_ICProductID, DateTime dtShpDate, String strAAStatus)
        {
            return (DataSet)dal.GetDataSet(spAPPOItems_SelectByProductAndAPPOShpDate, iFK_ICProductID, dtShpDate, strAAStatus);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.19
        /// Desc:
        /// </summary>
        /// <param name="iFK_ICProductID"></param>
        /// <param name="dtShpDate"></param>
        /// <param name="strAAStatus"></param>
        /// <returns></returns>
        public DataSet GetDataSetAPPOItemsByICProductICStockAndShpDate(int iFK_ICProductID, int iFK_ICStockID, DateTime dtShpDate, String strAAStatus)
        {
            return (DataSet)dal.GetDataSet(spAPPOItems_SelectByProductStockAndAPPOShpDate, iFK_ICProductID, iFK_ICStockID, dtShpDate, strAAStatus);
        }

        public double GetTotalProductQtyByProductAndLessThanArrivalDate(int iFK_ICProductID, int iFK_ICStockID, DateTime dteArrivalDate)
        {
            string str = string.Format(@"Select SUM(APPOItemRQty) from APPOItems where AAStatus='Alive' AND FK_ICProductID={0} AND FK_ICStockID={1} AND 
                                                        CONVERT(VARCHAR(10), [APPOItemArrivalDate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) ", iFK_ICProductID, iFK_ICStockID, dteArrivalDate.ToString("yyyyMMdd"));
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        public DataSet GetAllDataByProductAndLessThanArrivalDate(int iFK_ICProductID, DateTime dteArrivalDate)
        {
            string str = string.Format(@"Select * from APPOItems where AAStatus='Alive' AND FK_ICProductID={0} AND APPOItemRQty>0 AND
                                                        CONVERT(VARCHAR(10), [APPOItemArrivalDate], 112)<= CONVERT(VARCHAR(10), '{1}', 112) ", iFK_ICProductID, dteArrivalDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(str);
        }

        public double GetTotalPOQtyInRange(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = String.Format(@"SELECT SUM(APPOItemRQty) FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0}
                                    AND APPOItemArrivalDate BETWEEN '{1}' AND '{2}'
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive'
                                                        )",iProductID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public double GetAverageKPIScore(int iSupplierID, int iSupplierKPIID)
        {
            String strQuery = String.Format(@"SELECT AVG(APPOKPIScore) 
                                            FROM APPOKPIs WHERE AAStatus = 'Alive' 
                                            AND FK_APSupplierKPIID = {0}
                                            AND FK_APPOID IN (SELECT APPOID FROM APPOS WHERE APPOS.AAstatus = 'Alive' AND APPOS.FK_APSupplierID = {1})", iSupplierKPIID, iSupplierID);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return -1;
        }

        public double GetSumPOQtyByProductInPeriod(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(APPOItemQty) FROM APPOItems WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_APPOID IN (SELECT APPOID FROM APPOs WHERE AAStatus = 'Alive' 
                                                    AND MONTH(APPODate) = {1} AND YEAR(APPODate) = {2})", iProductID, iPeriod, iYear);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }

        public DataSet GetAllPOQtyByProductInPeriod(int iProductID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM APPOItems WHERE AAStatus = 'Alive'
                                                    AND FK_ICProductID = {0}
                                                    AND FK_APPOID IN (SELECT APPOID FROM APPOs WHERE AAStatus = 'Alive' 
                                                    AND MONTH(APPODate) = {1} AND YEAR(APPODate) = {2})", iProductID, iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataBySupplierLessThanArrivalDate(DateTime dteArrivalDate,int iSupplierID)
        {
            string str = string.Format(@"Select APPOs.FK_APSupplierID as FK_APSupplierID,
                                            APPOs.APPODesc AS APPOItemDesc,
                                            APPOItems.* 
                                            from APPOItems inner join APPOs on 
                                                FK_APPOID=APPOID where APPOItems.AAStatus='Alive'  
                                                AND APPOs.AAStatus='Alive' 
                                                AND APPOItemRQty>0 
                                                --AND APPOActiveCheck=1
                                            AND (APPOs.FK_APSupplierID={1} or {1}=0) AND {0}", DALUtil.GennerateCondition("APPOItemArrivalDate", CompareType.LessEqualThan, dteArrivalDate), iSupplierID);
            return dal.GetDataSet(str);
        }
        
        public DataSet GetAllDataBySupplierGreaterThanArrivalDate(DateTime dteArrivalDate, int iSupplierID)
        {
            string str = string.Format(@"Select * 
                                            from APPOItems 
                                            where AAStatus='Alive' AND
                                                       {0} AND FK_APPOID in (Select APPOID from APPOs where AAStatus='Alive' AND (FK_APSupplierID={1} or {1}=0))"
                                                        , DALUtil.GennerateCondition("APPOItemArrivalDate", CompareType.GreaterEqualThan, dteArrivalDate), iSupplierID);
            str = string.Format(@"Select APPOs.FK_APSupplierID as FK_APSupplierID,
                                                APPOs.APPODesc AS APPOItemDesc,                                                
                                                APPOItems.* from APPOItems inner join APPOs on 
                                                FK_APPOID=APPOID where APPOItems.AAStatus='Alive'  AND APPOs.AAStatus='Alive' 
                                                --AND APPOActiveCheck=1 
                                                AND  (APPOs.FK_APSupplierID={1} or {1}=0)
                                                    AND {0}", DALUtil.GennerateCondition("APPOItemArrivalDate", CompareType.GreaterEqualThan, dteArrivalDate), iSupplierID);
            return dal.GetDataSet(str);
        }
        
        public double GetTotalRPOQtyInRange(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strDate=DALUtil.GenerateBeetween("APPOItemArrivalDate",dtFrom,dtTo);
            string strQuery = String.Format(@"SELECT SUM(APPOItemRQty) FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0} 
                                    AND {1}
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive' AND APPOActiveCheck=1
                                                        )", iProductID, strDate);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public DataSet GetAllDataExistRPOQtyInRange(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("APPOItemArrivalDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT * FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0} 
                                    AND {1}
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive' AND APPOActiveCheck=1
                                                        )", iProductID, strDate);

            return dal.GetDataSet(strQuery);
        }

        #region Get SUM Qty AND RQty POItem BY APSemiOrdPlanID --Vinh --19/11/2012

        public double GetSUMQtyBySemiOrdPlan(int iSemiOrdPlanID)
        {
            String str = String.Format(@"SELECT SUM(APPOItemQty) FROM APPOItems WHERE AAStatus='Alive' AND FK_APSemiOrdPlanID IN (SELECT APSemiOrdPlanID FROM APSemiOrdPlans WHERE AAStatus='Alive' AND APSemiOrdPlanID={0})", iSemiOrdPlanID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        #endregion

        #region Get SUM Qty AND RQty POItem BY APSemiDetailOrdPlanID --Vinh --19/11/2012

        public double GetSUMQtyBySemiDetailOrdPlan(int iSemiDetailOrdPlanID)
        {
            String str = String.Format(@"SELECT SUM(APPOItemQty) FROM APPOItems WHERE AAStatus='Alive' AND FK_APSemiDetailOrdPlanID IN (SELECT APSemiDetailOrdPlanID FROM APSemiDetailOrdPlans WHERE AAStatus='Alive' AND APSemiDetailOrdPlanID={0})", iSemiDetailOrdPlanID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        #endregion

        /// <summary>
        /// Trung - 18/12/2012 - Lay POQty cua Thanh Pham theo iSemiProductID va date
        /// </summary>
        /// <param name="iSemiOrdPlanID"></param>
        /// <param name="dtDate"></param>
        /// <returns></returns>
        public double GetSUMQtyBySemiProductAndDate(int iSemiProductID,DateTime dtDate)
        {
            string strDate = DALUtil.GennerateCondition("APPOItemArrivalDate", CompareType.Equal, dtDate);
            String str = String.Format(@"SELECT SUM(APPOItemQty) FROM APPOItems WHERE AAStatus='Alive' AND FK_ICProductID={0} AND {1}", iSemiProductID, strDate);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }

        public DataSet GetAllDataByProductSupplierOrderByArrivalDate(int iProductID,int iSupplierID)
        {
            String strQuery = string.Format(@"Select * from APPOItems where AAStatus='Alive' AND APPOItemRQty>0 AND FK_ICProductID={0}
                                               AND FK_APPOID in (Select APPOID from APPOs where AAStatus='Alive' AND FK_APSupplierID={1})
                                                Order by APPOItemArrivalDate",iProductID,iSupplierID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataByProductSupplierOrderByArrivalDateDesc(int iProductID, int iSupplierID)
        {
            String strQuery = string.Format(@"Select * from APPOItems where AAStatus='Alive' AND APPOItemRQty<APPOItemQty AND FK_ICProductID={0}
                                               AND FK_APPOID in (Select APPOID from APPOs where AAStatus='Alive' AND FK_APSupplierID={1})
                                                Order by APPOItemArrivalDate Desc", iProductID, iSupplierID);
            return dal.GetDataSet(strQuery);
        }

        public APPOItemsInfo GetLowestPriceByProductAndSupplierInRange(int iProductID, int iSupplierID, DateTime FromDate, DateTime ToDate)
        {
            string strDate = DALUtil.GenerateBeetween("APPODate", FromDate, ToDate);
            string strQuery = string.Format(@"select Top 1 APPOs.FK_APSupplierID,APPOItems.* from APPOItems inner join APPOs on APPOs.APPOID=APPOItems.FK_APPOID
                                                where APPOItems.AAStatus='Alive' AND APPOs.AAStatus='Alive'
                                                 AND (APPOs.FK_APSupplierID={1} or {1}=0) AND {2}
                                                AND FK_ICProductID={0}
                                                Order By APPOItemFUnitPrice", iProductID, iSupplierID, strDate);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPOItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public APPOItemsInfo GetNewEstPriceByProductAndSupplierInRange(int iProductID, int iSupplierID)
        {
            string strQuery = string.Format(@"select Top 1 APPOs.FK_APSupplierID,APPOItems.* from APPOItems inner join APPOs on APPOs.APPOID=APPOItems.FK_APPOID
                                                where APPOItems.AAStatus='Alive' AND APPOs.AAStatus='Alive'
                                                 AND (APPOs.FK_APSupplierID={1} or {1}=0)
                                                AND FK_ICProductID={0}
                                                Order By APPODate Desc", iProductID, iSupplierID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPOItemsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public DataSet GetAllDataBySemiOrdPlanID(int iSemiOrdPlanID)
        {
            string strQuery = string.Format(@"Select * from APPOItems where AAStatus='Alive' AND FK_APPOID in (Select APPOID from APPOs where AAStatus='Alive')
                                                  AND APPOItemID in (select FK_APPOItemID from APPOItemSemiOrdPlans where FK_APSemiOrdPlanID={0})",iSemiOrdPlanID);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllDataBySemiDetailOrdPlanID(int iSemiDetailOrdPlanID)
        {
            string strQuery = string.Format(@"Select * from APPOItems where AAStatus='Alive' AND FK_APPOID in (Select APPOID from APPOs where AAStatus='Alive')
                                                  AND APPOItemID in (select FK_APPOItemID from APPOItemSemiDetailOrdPlans where FK_APSemiDetailOrdPlanID={0})", iSemiDetailOrdPlanID);
            return dal.GetDataSet(strQuery);
        }

        public double GetTotalRPOQtyPODateInRange(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("APPODate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT SUM(APPOItemRQty) FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0} 
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive' AND APPOActiveCheck=1 AND {1}
                                                        )", iProductID, strDate);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public DataSet GetAllDataByPODateInRange(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strDate = DALUtil.GenerateBeetween("APPODate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT * FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0} 
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive' AND APPOActiveCheck=1 AND {1}
                                                        )", iProductID, strDate);

            return dal.GetDataSet(strQuery);
        }

        public APPOItemsInfo GetPOItemByPOIDAndProductID(int iPOID, int iProductID)
        {
            String strQuery = String.Format(@"  SELECT * FROM dbo.APPOItems
                                            WHERE AAStatus = 'Alive' AND FK_APPOID={0} AND FK_ICProductID={1}", iPOID, iProductID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (APPOItemsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }

        #region GetPOItem By Product SO ArrivalDate

        public double GetTotalRQtyByProductSOAndArrivalDateInRange(int iProductID,int iARSOID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = GenerateQueryRQtyByProductSOAndArrivalDateInRange(dtFrom, dtTo, iProductID, iARSOID, "SUM(APPOItemRQty)");
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                    return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return 0;
        }
        public DataSet GetAllDataByProductSOAndArrivalDateInRange(int iProductID, int iARSOID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = GenerateQueryRQtyByProductSOAndArrivalDateInRange(dtFrom, dtTo, iProductID, iARSOID, "*");
            return dal.GetDataSet(strQuery);
        }
        private string GenerateQueryRQtyByProductSOAndArrivalDateInRange(DateTime dtFrom, DateTime dtTo, int iProductID, int iARSOID, string strSelect)
        {
            string strDate = DALUtil.GenerateBeetween("APPOItemArrivalDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT {2} FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND (FK_ARSOID={3} or {3}=0)
                                    AND APPOItemRQty > 0
                                    AND FK_ICProductID = {0} AND {1}
                                    AND FK_APPOID IN (SELECT APPOID 
                                                        FROM APPOs 
                                                        WHERE AAStatus = 'Alive' AND APPOActiveCheck=1
                                                        )", iProductID, strDate, strSelect, iARSOID);
            return strQuery;
        }

        #endregion

        #region Lay danh sach POItem cho lich gia cong

        public DataSet GetAllPOItemByOutSourcingCalendar(int iPPOutSourcingCalendarID)
        {
            String str = String.Format(@"SELECT  *
                                        FROM    dbo.APPOItems
                                        WHERE   APPOItemID IN (
                                                SELECT  APPOItems.APPOItemID
                                                FROM    dbo.APPOItems
                                                        INNER JOIN dbo.APPOs ON ( APPOs.APPOID = APPOItems.FK_APPOID
                                                                                  AND APPOs.AAStatus = APPOItems.AAStatus
                                                                                  AND APPOs.AAStatus = 'Alive'
                                                                                )
                                                        INNER JOIN dbo.APPOItemOutSourcingCalendarDetails ON ( APPOItemOutSourcingCalendarDetails.FK_APPOItemID = APPOItems.APPOItemID
                                                                                                      AND APPOItemOutSourcingCalendarDetails.AAStatus = APPOItems.AAStatus
                                                                                                      )
                                                        INNER JOIN dbo.PPOutSourcingCalendarDetails ON ( PPOutSourcingCalendarDetails.PPOutSourcingCalendarDetailID = APPOItemOutSourcingCalendarDetails.FK_PPOutSourcingCalendarDetailID
                                                                                                      AND PPOutSourcingCalendarDetails.AAStatus = APPOItemOutSourcingCalendarDetails.AAStatus
                                                                                                      )
                                                        INNER JOIN dbo.PPOutSourcingCalendars ON ( PPOutSourcingCalendars.PPOutSourcingCalendarID = PPOutSourcingCalendarDetails.FK_PPOutSourcingCalendarID
                                                                                                   AND PPOutSourcingCalendars.AAStatus = APPOItemOutSourcingCalendarDetails.AAStatus
                                                                                                   AND PPOutSourcingCalendars.PPOutSourcingCalendarID = {0}
                                                                                                 ) )"
                                    , iPPOutSourcingCalendarID);
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetRQtyAPPOItems()
        {
            String strQuery = String.Format(@"SELECT 
		                                                APPOItems.FK_ICProductID,
		                                                SUM(APPOItems.APPOItemRQty) AS  APPOItemRQty,
		                                                SUM(APPOItems.APPOItemRStkQty) AS  APPOItemRStkQty
                                                FROM dbo.APPOItems
                                                INNER JOIN dbo.APPOs ON APPOs.APPOID = APPOItems.FK_APPOID AND APPOs.AAStatus = APPOItems.AAStatus
                                                WHERE dbo.APPOs.AAStatus = 'Alive'
                                                AND (APPOItems.APPOItemRQty > 0 OR APPOItems.APPOItemRStkQty > 0)
                                                GROUP BY APPOItems.FK_ICProductID");
            return dal.GetDataSet(strQuery);
        }
        // NhamNDH -09/2017- Lấy danh sách POItem còn RQty từ ngày đến ngày ShpDate
        public DataSet GetDataByProductAndDate(int iProductID, DateTime dtFrom, DateTime dtTo)
        {
            string strQuery = GenerateQueryRQtyAPPOShpDate(dtFrom, dtTo, iProductID, "*");
            return dal.GetDataSet(strQuery);
        }
        private string GenerateQueryRQtyAPPOShpDate(DateTime dtFrom, DateTime dtTo, int iProductID, string strSelect)
        {
            string strDate = DALUtil.GenerateBeetween("APPOShpDate", dtFrom, dtTo);
            string strQuery = String.Format(@"SELECT {2} FROM APPOItems 
                                    WHERE AAStatus='Alive' 
                                    AND APPOItemRQty > 0
                                    AND (FK_ICProductID = {0}
                                          OR FK_ICProductID IN (SELECT FK_ICProductID
                                                                FROM   ICProductIntermediates
                                                                WHERE  ICProductIntermediateFactorNumber > 0
                                                                       AND FK_ICIntermediateProductID = {0} )
                                         )
                                    AND FK_APPOID IN (SELECT APPOID 
                                                      FROM   APPOs 
                                                      WHERE  AAStatus = 'Alive' AND {1}
                                                        )", iProductID, strDate, strSelect);
            return strQuery;
        }
        //
    }
    #endregion
}