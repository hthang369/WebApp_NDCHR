using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region APPOs
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:APPOsController
	//Created Date:Friday, October 16, 2009
	//-----------------------------------------------------------
	
	public class APPOsController:BaseBusinessController
	{
		public APPOsController()
		{
			dal= new DALBaseProvider("APPOs",typeof(APPOsInfo));
		}
        public DataSet GetPO(DateTime FromDate, DateTime ToDate)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.APPOs WHERE AAStatus='Alive' 
                                            AND CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{0}', 112) 
                                            AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{1}', 112)", FromDate.ToString("yyyyMMdd"), ToDate.ToString("yyyyMMdd"));
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllPONotCompleteByShiptmentDate(DateTime dtDate)
        {
            String strQurey = String.Format("SELECT * FROM [dbo].[APPOs] WHERE CONVERT(VARCHAR(10), [APPOShpDate], 112)<= CONVERT(VARCHAR(10), '{0}', 112) AND [APPOStatusCombo]<> '{1}' AND [AAStatus]='{2}'", dtDate.ToString("yyyyMMdd"), "Complete", BusinessObject.DefaultAAStatus);
            return (DataSet)dal.GetDataSet(strQurey);
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dteFDate"></param>
        /// <param name="dteTDate"></param>
        /// <returns></returns>
        public List<APPOsInfo> GetAPPOsByAPPOItemsHighestPrice(int iICProductID, DateTime dteFDate, DateTime dteTDate)
        {
            List<APPOsInfo> lstAPPOs = new List<APPOsInfo>();
            DataSet dsAPPOItems = new DataSet();
            String strQuery = String.Format("SELECT * FROM [dbo].[APPOItems] WHERE [FK_ICProductID] = {0} AND FK_APPOID IN (SELECT [APPOID] FROM [dbo].[APPOs] WHERE CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY APPOItemUnitPrice DESC", iICProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            dsAPPOItems = dal.GetDataSet(strQuery);
            if (dsAPPOItems != null)
            {
                if (dsAPPOItems.Tables[0].Rows.Count > 0)
                {
                    int iMaxUnitPrice = Convert.ToInt32(dsAPPOItems.Tables[0].Rows[0]["APPOItemUnitPrice"]);
                    foreach (DataRow row in dsAPPOItems.Tables[0].Rows)
                    {
                        APPOItemsInfo objAPPOItemsInfo = (APPOItemsInfo)new APPOItemsController().GetObjectFromDataRow(row);
                        if (objAPPOItemsInfo != null)
                        {
                            if (objAPPOItemsInfo.APPOItemUnitPrice == iMaxUnitPrice)
                            {
                                APPOsInfo objAPPOsInfo = (APPOsInfo)new APPOsController().GetObjectByID(objAPPOItemsInfo.FK_APPOID);
                                lstAPPOs.Add(objAPPOsInfo);
                            }

                        }
                    }
                }
            }
            return lstAPPOs;
        }
        /// <summary>
        /// Created By Hoang.Nguyen
        /// Created Date 10.03.08
        /// </summary>
        /// <param name="iICProductID"></param>
        /// <param name="dteFDate"></param>
        /// <param name="dteTDate"></param>
        /// <returns></returns>
        //public List<APPOsInfo> GetAPPOsByAPPOItemsSortOrderByPrice(int iICProductID, DateTime dteFDate, DateTime dteTDate, String strType)
        //{
        //    List<APPOsInfo> lstAPPOs = new List<APPOsInfo>();
        //    DataSet dsAPPOItems = new DataSet();
        //    String strQuery = String.Format("SELECT * FROM [dbo].[APPOItems] WHERE [FK_ICProductID] = {0} AND FK_APPOID IN (SELECT [APPOID] FROM [dbo].[APPOs] WHERE CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY APPOItemUnitPrice {4}", iICProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strType);
        //    dsAPPOItems = dal.GetDataSet(strQuery);
        //    if (dsAPPOItems != null)
        //    {
        //        if (dsAPPOItems.Tables[0].Rows.Count > 0)
        //        {
        //            int iMaxUnitPrice = Convert.ToInt32(dsAPPOItems.Tables[0].Rows[0]["APPOItemUnitPrice"]);
        //            foreach (DataRow row in dsAPPOItems.Tables[0].Rows)
        //            {
        //                APPOItemsInfo objAPPOItemsInfo = (APPOItemsInfo)new APPOItemsController().GetObjectFromDataRow(row);
        //                if (objAPPOItemsInfo != null)
        //                {
        //                    if (objAPPOItemsInfo.APPOItemUnitPrice == iMaxUnitPrice)
        //                    {
        //                        APPOsInfo objAPPOsInfo = (APPOsInfo)new APPOsController().GetObjectByID(objAPPOItemsInfo.FK_APPOID);
        //                        lstAPPOs.Add(objAPPOsInfo);
        //                    }

        //                }
        //            }
        //        }
        //    }
        //    return lstAPPOs;
        //}
        public DataSet GetDataSetAPPOItemsSortOrderByPrice(int iICProductID, DateTime dteFDate, DateTime dteTDate, String strType)
        {
            String strQuery = String.Format("SELECT * FROM [dbo].[APPOItems] WHERE [FK_ICProductID] = {0} AND FK_APPOID IN (SELECT [APPOID] FROM [dbo].[APPOs] WHERE CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus] ='{3}') AND [AAStatus] ='{3}' ORDER BY APPOItemUnitPrice {4}", iICProductID, dteFDate.ToString("yyyyMMdd"), dteTDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strType);
            return (DataSet)dal.GetDataSet(strQuery);
        }
        public List<APPOsInfo> GetListAPPOsByAPPOItems(DataSet dsAPPOItems)
        {
            List<APPOsInfo> lstAPPOs = new List<APPOsInfo>();
            if (dsAPPOItems != null)
            {
                if (dsAPPOItems.Tables[0].Rows.Count > 0)
                {
                    int iMaxUnitPrice = Convert.ToInt32(dsAPPOItems.Tables[0].Rows[0]["APPOItemUnitPrice"]);
                    foreach (DataRow row in dsAPPOItems.Tables[0].Rows)
                    {
                        APPOItemsInfo objAPPOItemsInfo = (APPOItemsInfo)new APPOItemsController().GetObjectFromDataRow(row);
                        if (objAPPOItemsInfo != null)
                        {
                            if (objAPPOItemsInfo.APPOItemUnitPrice == iMaxUnitPrice)
                            {
                                APPOsInfo objAPPOsInfo = (APPOsInfo)new APPOsController().GetObjectByID(objAPPOItemsInfo.FK_APPOID);
                                lstAPPOs.Add(objAPPOsInfo);
                            }

                        }
                    }
                }
            }
            return lstAPPOs;
        }
        
        //hieu.nguyen add
        public List<APPOsInfo> ListObjectsBySupplierIDAndFromDateToDateAndStatus(int iAPSupplierID, DateTime dtFromDate, DateTime dtToDate, String strStatus)
        {
            List<APPOsInfo> lstAPPOs = new List<APPOsInfo>();
            String strQuery = String.Empty;
            //strQuery = String.Format("SELECT * FROM [dbo].[APPOs] WHERE [FK_APSupplierID]={0} AND CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'AND (([APPOStatusCombo]IS NULL) OR ([APPOStatusCombo] = N'{4}')OR ([APPOStatusCombo] LIKE N'%{4}%'))", iAPSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strStatus);
            if (String.IsNullOrEmpty(strStatus))
                strQuery = String.Format("SELECT * FROM [dbo].[APPOs] WHERE [FK_APSupplierID]={0} AND CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'", iAPSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus);
            else
                strQuery = String.Format("SELECT * FROM [dbo].[APPOs] WHERE [FK_APSupplierID]={0} AND CONVERT(VARCHAR(10), [APPODate], 112)>= CONVERT(VARCHAR(10), '{1}', 112) AND CONVERT(VARCHAR(10), [APPODate], 112)<= CONVERT(VARCHAR(10), '{2}', 112) AND [AAStatus]='{3}'AND ([APPOStatusCombo] = N'{4}')", iAPSupplierID, dtFromDate.ToString("yyyyMMdd"), dtToDate.ToString("yyyyMMdd"), BusinessObject.DefaultAAStatus, strStatus);
            DataSet dsAPPOs = dal.GetDataSet(strQuery);
            if (dsAPPOs != null)
            {
                if (dsAPPOs.Tables.Count > 0)
                {
                    foreach (DataRow row in dsAPPOs.Tables[0].Rows)
                    {
                        APPOsInfo objAPPOsInfo = (APPOsInfo)dal.GetObjectFromDataRow(row);
                        if (objAPPOsInfo != null)
                        {
                            lstAPPOs.Add(objAPPOsInfo);
                        }
                    }
                }
            }
            return lstAPPOs;
        }

        public DataSet GetDataSetAPPOsByYearMonthAndFK_SupplierID(int year, int month, int FK_SupplierID)
        {
            string str=string.Format(@"SELECT * FROM [dbo].APPOs WHERE year(APPODate) = {0} AND
		                                month(APPODate) = {1} AND FK_APSupplierID={2} AND AAStatus='Alive'",year,month,FK_SupplierID);
            return dal.GetDataSet(str);
        }

        public int GetCountPOIsDebtBySmallerYearMonthAndSupplierIDAndRAmt(int iSupplierID, int iMonth, int iYear)
        {
            string strQuery = string.Format("Select * from APPOs where AAStatus='Alive' and FK_APSupplierID={0} and APPORAmtTot>0 and datepart(month,APPODate)+ datepart(year,APPODate)*12 <= {1} ", iSupplierID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }

        public int GetCountPOIsDebtByYearMonthAndSupplierIDAndRAmt(int iSupplierID, int iMonth, int iYear)
        {
            string strQuery = string.Format("Select * from APPOs where AAStatus='Alive' and FK_APSupplierID={0} and APPORAmtTot>0 and datepart(month,APPODate)+ datepart(year,APPODate)*12 = {1} ", iSupplierID, iYear * 12 + iMonth);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null) return 0;
            return ds.Tables[0].Rows.Count;
        }

        /// <summary> 
        /// Get Total Amt by Supplier Status and Less than Year.
        /// Status=Empty Get All
        /// Viet Nguyen 12/04/17
        /// </summary>
        public double GetAmtTotalBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth, string strStatus)
        {
            string strQuery = string.Format(@"select SUM(APPOAmtTot) from APPOs where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPODate) + year(APPODate)*12 <={1}", iSupplierID, iMonth + iYear * 12);
            if (!string.IsNullOrEmpty(strStatus))
                strQuery += string.Format(" AND APPOStatusCombo='{0}'", strStatus);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        /// <summary> 
        /// Count by Supplier Status and Less than Year, Month.
        /// Status=Empty Count All
        /// Viet Nguyen 12/04/17
        /// </summary>
        public double CountBySupplierLessThanYearMonth(int iSupplierID, int iYear, int iMonth, string strStatus)
        {
            string strQuery = string.Format(@"select count(*) from APPOs where AAStatus = 'Alive' and FK_APSupplierID ={0} and month(APPODate) + year(APPODate)*12 <={1}", iSupplierID, iMonth + iYear * 12);
            if (!string.IsNullOrEmpty(strStatus))
                strQuery += string.Format(" AND APPOStatusCombo='{0}'", strStatus);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        public DataSet GetLastDataByProductIDAndSupplierID(int iProductID, int iSupplierID)
        {
            String strQuery = String.Format(@"SELECT TOP(1) APPODate, APPOItems.APPOItemUnitPrice 
                                              FROM APPOs, APPOItems
                                              WHERE APPOs.AAStatus = 'Alive' AND APPOItems.AAStatus = 'Alive'
                                              AND APPOItems.FK_ICProductID = {0} AND APPOs.FK_APSupplierID = {1}
                                              AND APPOItems.FK_APPOID = APPOs.APPOID
                                              ORDER BY APPODate DESC", iProductID, iSupplierID);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetHighestDataByProductIDAndSupplierID(int iProductID, int iSupplierID)
        {
            String strQuery = String.Format(@"SELECT TOP(1) APPODate, APPOItems.APPOItemUnitPrice 
                                              FROM APPOs, APPOItems
                                              WHERE APPOs.AAStatus = 'Alive' AND APPOItems.AAStatus = 'Alive'
                                              AND APPOItems.FK_ICProductID = {0} AND APPOs.FK_APSupplierID = {1}
                                              AND APPOItems.FK_APPOID = APPOs.APPOID
                                              ORDER BY APPOItemUnitPrice DESC", iProductID, iSupplierID);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetLowestDataByProductIDAndSupplierID(int iProductID, int iSupplierID)
        {
            String strQuery = String.Format(@"SELECT TOP(1) APPODate, APPOItems.APPOItemUnitPrice 
                                              FROM APPOs, APPOItems
                                              WHERE APPOs.AAStatus = 'Alive' AND APPOItems.AAStatus = 'Alive'
                                              AND APPOItems.FK_ICProductID = {0} AND APPOs.FK_APSupplierID = {1}
                                              AND APPOItems.FK_APPOID = APPOs.APPOID
                                              AND APPOItemUnitPrice > 0
                                              ORDER BY APPOItemUnitPrice", iProductID, iSupplierID);

            return dal.GetDataSet(strQuery);
        }

        #region Get All Amt Cost By From Date To Date AND Supplier --Vinh -- 17/08/2012

        public DataSet GetAllAmtByFromDateToDateANDSupplier(int iSupplier, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(APPODate) AS Year, MONTH(APPODate) AS Month, APSupplierGroupID, SUM(dbo.APPOItems.APPOItemAmtTot) AS Amt
                                        FROM dbo.APPOs INNER JOIN dbo.APPOItems ON APPOID = FK_APPOID INNER JOIN dbo.APSuppliers ON dbo.APPOs.FK_APSupplierID=dbo.APSuppliers.APSupplierID INNER JOIN dbo.APSupplierGroups ON dbo.APSuppliers.FK_APSupplierGroupID=dbo.APSupplierGroups.APSupplierGroupID
                                        WHERE dbo.APPOs.AAStatus='Alive' AND dbo.APPOItems.AAStatus='Alive' AND dbo.APSuppliers.AAStatus='Alive' AND dbo.APSupplierGroups.AAStatus='Alive'
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplier != 0)
            {
                str += String.Format(@" AND dbo.APPOs.FK_APSupplierID={0}", iSupplier);
            }
            str += String.Format(@"GROUP BY YEAR(APPODate), MONTH(APPODate), APSupplierGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All PO By FromDate ToDate AND Supplier --Vinh --20/08/2012

        public DataSet GetAllAPPOByFromDateToDateANDSupplier(int iSupplierGroupID, int iSupplierID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.APPOs
                                        WHERE dbo.APPOs.AAStatus='Alive'
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iSupplierID != 0)
            {
                str += String.Format(@" AND dbo.APPOs.FK_APSupplierID={0}", iSupplierID);
            }
            if (iSupplierGroupID != 0)
            {
                str += String.Format(@" AND dbo.APPOs.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID = {0})", iSupplierGroupID);
            }
            else if (iSupplierGroupID == 0)
            {
                str += String.Format(@" AND dbo.APPOs.FK_APSupplierID IN (SELECT APSupplierID FROM APSuppliers 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_APSupplierGroupID <>0)");
            }
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All PO By Product

        public DataSet GetAllAPPOByProduct(int iProductID)
        {
            String str = String.Format(@"SELECT * FROM APPOs WHERE AAStatus='Alive' AND APPOID IN (SELECT FK_APPOID FROM APPOItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All Amt By FromDate ToDate AND Product --Vinh --26/10/2012

        public DataSet GetAllAmtByFromDateToDateANDProduct(int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT YEAR(APPODate) AS Year, MONTH(APPODate) AS Month, ICProductGroupID, SUM(dbo.APPOItems.APPOItemAmtTot) AS Amt
                                        FROM dbo.APPOs INNER JOIN dbo.APPOItems ON APPOID = FK_APPOID INNER JOIN dbo.ICProducts ON dbo.APPOItems.FK_ICProductID=dbo.ICProducts.ICProductID INNER JOIN dbo.ICProductGroups ON dbo.ICProducts.FK_ICProductGroupID=dbo.ICProductGroups.ICProductGroupID
                                        WHERE dbo.APPOs.AAStatus='Alive' AND dbo.APPOItems.AAStatus='Alive' AND dbo.ICProducts.AAStatus='Alive' AND dbo.ICProductGroups.AAStatus='Alive'
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.APPOItems.FK_ICProductID={0}", iProductID);
            }
            str += String.Format(@" AND dbo.APPOItems.FK_ICProductID IN (SELECT ICProductID FROM ICProducts WHERE AAStatus='Alive' AND ICProductIsStkItm='True')");
            str += String.Format(@"GROUP BY YEAR(APPODate), MONTH(APPODate), ICProductGroupID");
            return dal.GetDataSet(str);
        }

        #endregion

        #region Get All PO By FromDate ToDate AND Product --Vinh --26/10/2012

        public DataSet GetAllAPPOByFromDateToDateANDProduct(int iProductGroupID, int iProductID, DateTime FromDate, DateTime ToDate)
        {
            String str = String.Format(@"SELECT * FROM dbo.APPOs
                                        WHERE dbo.APPOs.AAStatus='Alive'
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  >= ({0} * 12 + {1})
                                        AND (YEAR(APPODate) * 12 +MONTH(APPODate))  <= ({2} * 12 + {3})", FromDate.Year, FromDate.Month, ToDate.Year, ToDate.Month);
            if (iProductID != 0)
            {
                str += String.Format(@" AND dbo.APPOs.APPOID IN (SELECT FK_APPOID FROM APPOItems WHERE AAStatus='Alive' AND FK_ICProductID={0})", iProductID);
            }
            if (iProductGroupID != 0)
            {
                str += String.Format(@" AND dbo.APPOs.APPOID IN (SELECT FK_APPOID FROM APPOItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID = {0} AND ICProductIsStkItm='True'))", iProductGroupID);
            }
            else if (iProductGroupID == 0)
            {
                str += String.Format(@" AND dbo.APPOs.APPOID IN (SELECT FK_APPOID FROM APPOItems WHERE AAStatus='Alive' AND FK_ICProductID IN 
                                                                          (SELECT ICProductID FROM ICProducts 
                                                                          WHERE AAStatus='Alive'
                                                                          AND FK_ICProductGroupID <> 0 AND ICProductIsStkItm='True'))");
            }

            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetListPOByPInvoice(int iPInvoiceID)
        {
            String strQuery = String.Format(@"SELECT  * FROM   APPOs 
                                                WHERE APPOID IN (  
                                                   SELECT DISTINCT dbo.APPOs.APPOID
                                                    FROM         dbo.APPOs INNER JOIN
                                                                        dbo.ICReceiptItems ON dbo.APPOs.APPOID = dbo.ICReceiptItems.FK_APPOID INNER JOIN
                                                                        dbo.ICReceipts ON dbo.ICReceiptItems.FK_ICReceiptID = dbo.ICReceipts.ICReceiptID INNER JOIN
                                                                        dbo.APPInvoiceItemReceiptItems ON dbo.ICReceiptItems.ICReceiptItemID = dbo.APPInvoiceItemReceiptItems.FK_ICReceiptItemID INNER JOIN
                                                                        dbo.APPInvoiceItems ON dbo.APPInvoiceItemReceiptItems.FK_APPInvoiceItemID = dbo.APPInvoiceItems.APPInvoiceItemID INNER JOIN
                                                                        dbo.APPInvoiceReceipts ON dbo.ICReceipts.ICReceiptID = dbo.APPInvoiceReceipts.FK_ICReceiptID INNER JOIN
                                                                        dbo.APPInvoices ON dbo.APPInvoiceItems.FK_APPInvoiceID = dbo.APPInvoices.APPInvoiceID AND 
                                                                        dbo.APPInvoiceReceipts.FK_APPInvoiceID = dbo.APPInvoices.APPInvoiceID
                                                    WHERE dbo.APPOs.AAStatus='Alive'
		                                                AND dbo.ICReceipts.AAStatus='Alive'
		                                                AND dbo.ICReceiptItems.AAStatus='Alive'
		                                                AND dbo.APPInvoiceItems.AAStatus='Alive'
		                                                AND dbo.APPInvoices.AAStatus='Alive'
		                                                AND dbo.APPInvoices.APPInvoiceID={0}
                                                                  )", iPInvoiceID);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetListPOByPmtPctAndNotInOutPmt(DateTime FromDate, DateTime ToDate, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", FromDate, ToDate);
            String strQuery = String.Format(@"SELECT * FROM APPOs WHERE AAStatus='Alive' 
						AND APPOPmtPct >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            return dal.GetDataSet(strQuery);
        }

        public double GetSumPmtPctAmtByPmtPctAndNotInOutPmt(DateTime FromDate, DateTime ToDate, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", FromDate, ToDate);
            String strQuery = String.Format(@"SELECT SUM(APPOPmtPct * APPOAmtTot / 100) FROM APPOs WHERE AAStatus='Alive' 
						AND APPOPmtPct >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            DataSet ds= dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        public double GetSumPmtPctFAmtByPmtPctAndNotInOutPmt(DateTime FromDate, DateTime ToDate, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", FromDate, ToDate);
            String strQuery = String.Format(@"SELECT SUM(APPOPmtPct * APPOFAmtTot / 100) FROM APPOs WHERE AAStatus='Alive' 
						AND APPOPmtPct >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        public DataSet GetListPOByRAmtAndNotInOutPmt(DateTime dtFrom, DateTime dtTo, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM APPOs WHERE AAStatus='Alive' 
						AND APPORAmtTot >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            return dal.GetDataSet(strQuery);
        }

        public double GetSumRAmtByRAmtAndNotInOutPmt(DateTime dtFrom, DateTime dtTo, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM(APPORAmtTot) FROM APPOs WHERE AAStatus='Alive' 
						AND APPORAmtTot >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

        public double GetSumFRAmtByFRAmtAndNotInOutPmt(DateTime dtFrom, DateTime dtTo, int iSupplierID)
        {
            String strDate = DALUtil.GenerateBeetween("APPODate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM(APPOFRAmtTot) FROM APPOs WHERE AAStatus='Alive' 
						AND APPOFRAmtTot >0 
                        AND FK_APSupplierID={1}
                        AND {0}
						AND APPOID NOT IN (
							SELECT FK_APPOID FROM GLVouchers 
							WHERE AAStatus='Alive' 
							AND GLVoucherTypeCombo = 'OutPmt' AND FK_APPOID IS NOT NULL)
                        ", strDate, iSupplierID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return double.Parse(ds.Tables[0].Rows[0][0].ToString());
            return 0;
        }

//        public DataSet GetListPOBySupplierAndInRange(int iSupplierID, DateTime dtFromTemp, DateTime dtToTemp)
//        {
//            String strDate = DALUtil.GenerateBeetween("APPOExpireDate", dtFromTemp, dtToTemp);
//            String strQuery = String.Format(@"SELECT *FROM APPOs WHERE AAStatus='Alive' 
//                                                        AND (FK_APSupplierID={0} OR 0={0})
//                                                        AND APPOExpireDate IS NOT NULL
//                                                        AND {1}",iSupplierID,strDate);

//            return dal.GetDataSet(strQuery);
//        }

        public double GetSumFieldBySupllierInRange(string strFieldNeedSum, int iSupplier, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("APPOExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM({0}) FROM APPOs WHERE AAStatus='Alive' AND FK_APSupplierID={1} AND APPOExpireDate IS NOT NULL AND {2} AND APPOHaveToPayPct>0 AND APPOFRAmtTot>0", strFieldNeedSum, iSupplier, strDate);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            return 0;
        }

        public DataSet GetAllInvoiceBySupplierInRange(int iSupplier, DateTime dtFrom, DateTime dtTo)
        {
            String strDate = DALUtil.GenerateBeetween("APPOExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM APPOs WHERE AAStatus='Alive' AND FK_APSupplierID={0} AND APPOExpireDate IS NOT NULL AND {1} AND APPOHaveToPayPct>0 AND APPOFRAmtTot>0", iSupplier, strDate);
            return GetDataSet(strQuery);
        }


        public double GetSUMPORAmt(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("APPOExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT APPORAmtTot
                                            FROM dbo.APPOs
                                            WHERE AAStatus = 'Alive'
                                            AND {0}", strDateCond);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllPOIncomplete(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("APPOExpireDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT APPOs.* 
                                            FROM dbo.APPOs
                                            WHERE AAStatus = 'Alive'
                                            AND APPORAmtTot > 0
                                            AND {0}", strDateCond);

            return GetDataSet(strQuery);
        }
        public DataSet GetAllDataApproval(string strSubWhere)
        {
            string strQuery = string.Format(@"SELECT APPOID,APPONo,APPOName,APPODate,MAX(ADApprovalProcStepLevel) AS APPOCostTot
                                                FROM APPOs po JOIN ADDocHistorys hs ON po.APPONo = hs.DocNo AND po.AAStatus = 'Alive' AND hs.AAStatus = 'Alive'
                                                JOIN ADApprovalProcSteps app ON hs.FK_ADApprovalProdStepID = ADApprovalProcStepID AND app.AAStatus = 'Alive'
                                                WHERE {0} GROUP BY APPOID,APPONo,APPOName,APPODate", strSubWhere.Substring(0, strSubWhere.LastIndexOf("AND")));
            return GetDataSet(strQuery);
        }
        public DataSet GetAllDataDetail(string strSubWhere)
        {
            string strQuery = string.Format(@"
                                IF OBJECT_ID('tempdb..#ViewKQ') IS NOT NULL
	                                DROP TABLE #ViewKQ
                                SELECT APPOID,APPONo,APPODate,DocType,UserName,ADApprovalProcStepLevel,app.ADApprovalStepDesc,AssignUsers
                                INTO #ViewKQ
                                FROM APPOs po JOIN ADDocHistorys hs ON po.APPONo = hs.DocNo AND po.AAStatus = 'Alive' AND hs.AAStatus = 'Alive'
                                JOIN ADApprovalProcSteps app ON hs.FK_ADApprovalProdStepID = ADApprovalProcStepID AND app.AAStatus = 'Alive'
                                WHERE {0}

                                DECLARE @sql nvarchar(MAX)
                                DECLARE @col_list varchar(MAX)
                                DECLARE @col_list1 varchar(MAX)
                                SELECT @col_list = ISNULL(@col_list + ',', '') + QUOTENAME(CONVERT(varchar(10), ADApprovalProcStepLevel)), 
		                                @col_list1 = ISNULL(@col_list1 + ',', '') + QUOTENAME(CONVERT(varchar(10), ADApprovalProcStepLevel)) + ' AS ' + QUOTENAME('Level ' + CONVERT(varchar(10), ADApprovalProcStepLevel))
                                FROM #ViewKQ
                                GROUP BY ADApprovalProcStepLevel
                                ORDER BY ADApprovalProcStepLevel
                                SET @sql = 'SELECT APPOID,APPONo,APPODate,DocType,' + @col_list1 + '
	                                FROM (SELECT APPOID,APPONo,APPODate,DocType,UserName,ADApprovalProcStepLevel FROM #ViewKQ) b 
	                                PIVOT(max(UserName) FOR ADApprovalProcStepLevel IN(' + @col_list + ')) AS a'
	                                --print @sql
	                                EXEC(@sql)", strSubWhere.Substring(0, strSubWhere.LastIndexOf("AND")));
            return GetDataSet(strQuery);
        }

        
    }
	#endregion
}