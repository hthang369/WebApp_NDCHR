using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region ADApprovalProcs
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:ADApprovalProcsController
	//Created Date:28 Tháng Sáu 2012
	//-----------------------------------------------------------
	
	public class ADApprovalProcsController:BaseBusinessController
	{
		public ADApprovalProcsController()
		{
			dal= new DALBaseProvider("ADApprovalProcs",typeof(ADApprovalProcsInfo));
		}

        public DataSet GetProcByDocumentType(string DocumentType)
        {
            string strQuery = String.Format("SELECT * FROM ADApprovalProcs WHERE AAStatus='Alive' AND ADApprovalProcActive='true' AND ADDocumentType='{0}'", DocumentType);
            return GetDataSet(strQuery);
        }
        public DataSet GetProcByDocumentType(string DocumentType, string DocumentNo)
        {
            string strQuery = String.Format("SELECT * FROM ADApprovalProcs WHERE AAStatus='Alive' AND ADApprovalProcActive='true' AND ADDocumentType='{0}' AND ADApprovalProcNo LIKE '%{1}'", DocumentType, DocumentNo);
            return GetDataSet(strQuery);
        }
        public bool IsInUse(int piProcID)
        {
            string strQuery = String.Format(@"SELECT TOP 1 1
FROM ADApprovalProcs a
INNER JOIN ARCAItems b ON b.FK_ADApprovalProcID = a.ADApprovalProcID 
AND a.AAStatus = 'Alive' AND b.AAStatus = 'Alive' AND a.ADApprovalProcActive='true' AND a.ADApprovalProcID = {0}
INNER JOIN ARSOs c ON c.FK_ARCAID = b.FK_ARCAID AND c.AAStatus = 'Alive'
", piProcID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;

        }
        public bool IsNoDupplicate(string psNo, string psAAModule, int piCurID)
        {
            string strQuery = String.Format(@"SELECT TOP 1 1
FROM ADApprovalProcs a
WHERE AAStatus = 'Alive'
    AND ADApprovalProcNo = '{0}'
    AND ADApprovalProcID <> {1}
", psNo, piCurID);
            if (psAAModule.Length > 0)
                strQuery += string.Format(@"AND AAModule = '{0}'", psAAModule);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;

        }
        public bool IsExistsApprovalProc(string DocumentType, string psAAModule = "")
        {
            ADApprovalProcsInfo _objADApprovalProcs = GetProcByDocumentTypeAndAAModule(DocumentType, psAAModule);
            return _objADApprovalProcs != null;
        }
        public ADApprovalProcsInfo GetProcByDocumentTypeAndAAModule(string DocumentType, string psAAModule)
        {
            string strQuery = String.Format(@"
SELECT TOP 1 * 
FROM ADApprovalProcs 
WHERE AAStatus='Alive' 
    AND ADApprovalProcActive='true' 
    AND ADDocumentType='{0}'"
                , DocumentType);
 if (psAAModule.Length > 0)
 {
     strQuery += String.Format(@"
    AND AAModule = '{0}'"
         , psAAModule);
 }
    strQuery += String.Format(@"
ORDER BY ADApprovalProcID");

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ADApprovalProcsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        public ADApprovalProcsInfo GetApprovalProcIDByDocumentTypeFirstLevelUserAndAAModule(string psModule, string psUser, string psAAModule = "ApprovalProcessConfig")
        {
            string strQuery = String.Format(@"
SELECT a.*
FROM    dbo.ADApprovalProcs a
        INNER JOIN dbo.ADApprovalProcSteps b ON ( a.ADApprovalProcID = b.FK_ADApprovalProcID
                                            AND a.AAStatus = b.AAStatus
                                            AND a.AAStatus = 'Alive'
                                            AND a.ADApprovalProcActive = 1
                                            AND a.ADDocumentType = '{0}'
                                            AND b.ADApprovalProcStepLevel = 1
                                            AND CHARINDEX(';{1};',';' + b.AssignUsers) > 0
                                            )
                                        ", psModule, psUser);
            if (psAAModule.Length > 0)
            {
                strQuery += String.Format(@"
    AND a.AAModule = '{0}'"
                    , psAAModule);
            }
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ADApprovalProcsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }
        public ADApprovalProcsInfo GetApprovalProcIDByDocumentTypeLastLevelUserAndAAModule(string psModule, string psUser, string psAAModule = "ApprovalProcessConfig")
        {
            string strQuery = String.Format(@"
SELECT a.*
FROM    dbo.ADApprovalProcs a
        INNER JOIN dbo.ADApprovalProcSteps b ON ( a.ADApprovalProcID = b.FK_ADApprovalProcID
                                            AND a.AAStatus = b.AAStatus
                                            AND a.AAStatus = 'Alive'
                                            AND a.ADApprovalProcActive = 1
                                            AND a.ADDocumentType = '{0}'
                                            AND CHARINDEX(';{1};',';' + b.AssignUsers) > 0
                                                )
        INNER JOIN (SELECT FK_ADApprovalProcID
                            ,MAX(ADApprovalProcStepLevel) as ADApprovalProcStepLevel
                        FROM ADApprovalProcs a1
                            INNER JOIN ADApprovalProcSteps b1 ON a1.ADApprovalProcID = b1.FK_ADApprovalProcID
                                            AND a1.AAStatus = b1.AAStatus
                                            AND a1.AAStatus = 'Alive'
                                            AND a1.ADApprovalProcActive = 1
                                            AND a1.ADDocumentType = '{0}'
                        GROUP BY FK_ADApprovalProcID
                    ) c ON a.ADApprovalProcID = c.FK_ADApprovalProcID
                        AND b.ADApprovalProcStepLevel = c.ADApprovalProcStepLevel"
                , psModule, psUser);
            if (psAAModule.Length > 0)
            {
                strQuery += String.Format(@"
    AND a.AAModule = '{0}'"
                    , psAAModule);
            }
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (ADApprovalProcsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);

            return null;
        }
        public int CountProcByDocumentType(string DocumentType)
        {
            int iRet = 0;
            DataSet ds = GetProcByDocumentType(DocumentType);
            if (ds != null && ds.Tables.Count > 0)
                iRet = ds.Tables[0].Rows.Count;
            return iRet;
        }
        public DataSet GetProcByDocumentTypeAndUser(string psDocumentType, string psUser, string psAAModule = "")
        {
            string strQuery = String.Format(@"
SELECT a.*
FROM    dbo.ADApprovalProcs a
        INNER JOIN dbo.ADApprovalProcSteps b ON ( a.ADApprovalProcID = b.FK_ADApprovalProcID
                                            AND a.AAStatus = b.AAStatus
                                            AND a.AAStatus = 'Alive'
                                            AND a.ADApprovalProcActive = 1
                                            AND a.ADDocumentType = '{0}'
                                            AND CHARINDEX(';{1};',';' + b.AssignUsers) > 0
                                            )
                                        ", psDocumentType, psUser);
            if (psAAModule.Length > 0)
            {
                strQuery += String.Format(@"
    AND a.AAModule = '{0}'"
                    , psAAModule);
            }
            return dal.GetDataSet(strQuery);
        }
        public int CountProcByDocumentTypeAndUser(string psDocumentType, string psUser, string psAAModule = "")
        {
            int iRet = 0;

            DataSet ds = GetProcByDocumentTypeAndUser(psDocumentType, psUser, psAAModule);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                iRet = ds.Tables[0].Rows.Count;
            return iRet;
        }
        
    }
	#endregion
}