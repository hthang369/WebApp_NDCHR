using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Linq;
namespace ExpertERP.BusinessEntities
{
    #region ADApprovalProcSteps
    //-----------------------------------------------------------
    //Generated By: GMC Studio
    //Class:ADApprovalProcStepsController
    //Created Date:28 Tháng Sáu 2012
    //-----------------------------------------------------------

    public class ADApprovalProcStepsController : BaseBusinessController
    {
        public ADApprovalProcStepsController()
        {
            dal = new DALBaseProvider("ADApprovalProcSteps", typeof(ADApprovalProcStepsInfo));
        }


        public DataSet GetProcStepByProcIDAndUserName(int iProcID, string ADUserName)
        {
            string strQuery = String.Format(@"SELECT * FROM ADApprovalProcSteps WHERE AAStatus='Alive' AND FK_ADApprovalProcID={0} AND (AssignUsers LIKE '%;{1}' OR AssignUsers LIKE '{1};%' OR AssignUsers LIKE '%;{1};%')", iProcID, ADUserName.Trim());
            return GetDataSet(strQuery);
        }

        public DataSet GetAllProcStepByADApprovalProcID(int iADApprovalProcID, string psOrder = "DESC")
        {
            string strQuery = String.Format(@"
SELECT * 
FROM ADApprovalProcSteps 
WHERE AAStatus='Alive' 
    AND FK_ADApprovalProcID={0} 
ORDER BY ADApprovalProcStepLevel DESC"
                , iADApprovalProcID, psOrder);
            return GetDataSet(strQuery);
        }

        public ADApprovalProcStepsInfo GetProcStepNextByADApprovalProcStepID(int iADApprovalProcStepCurrentID)
        {
            string strQuery = String.Format(@"SELECT  StepNext.*
                                                FROM    dbo.ADApprovalProcSteps StepNext
                                                        INNER JOIN dbo.ADApprovalProcSteps StepCurrent ON ( StepCurrent.FK_ADApprovalProcID = StepNext.FK_ADApprovalProcID
                                                                                                            AND StepCurrent.AAStatus = StepNext.AAStatus
                                                                                                            AND StepCurrent.AAStatus = 'Alive'
                                                                                                            AND StepCurrent.ADApprovalProcStepID = {0}
                                                                                                          )
                                                WHERE   StepCurrent.ADApprovalProcStepLevel < StepNext.ADApprovalProcStepLevel
                                                ORDER BY ADApprovalProcStepLevel ASC", iADApprovalProcStepCurrentID);
            DataSet ds = GetDataSet(strQuery);
            List<BusinessObject> lstADApprovalProcSteps = GetListFromDataset(ds);
            if (lstADApprovalProcSteps.Count > 0) return (ADApprovalProcStepsInfo)lstADApprovalProcSteps[0];
            return null;
        }

        public ADApprovalProcStepsInfo GetProcStepPreByADApprovalProcStepID(int iADApprovalProcStepCurrentID)
        {
            DataSet ds = GetAllProcStepPreFromADApprovalProcStepID(iADApprovalProcStepCurrentID);
            List<BusinessObject> lstADApprovalProcSteps = GetListFromDataset(ds);
            if (lstADApprovalProcSteps.Count > 0)
            {
                foreach (ADApprovalProcStepsInfo objADApprovalProcStepInfo in lstADApprovalProcSteps)
                {
                    if (objADApprovalProcStepInfo.ADApprovalProcStepID != iADApprovalProcStepCurrentID)
                        return objADApprovalProcStepInfo;
                }
            }
            return null;
        }

        public DataSet GetAllProcStepPreFromADApprovalProcStepID(int iADApprovalProcStepCurrentID)
        {
            string strQuery = String.Format(@"SELECT  StepPre.*
                                                FROM    dbo.ADApprovalProcSteps StepPre
                                                        INNER JOIN dbo.ADApprovalProcSteps StepCurrent ON ( StepCurrent.FK_ADApprovalProcID = StepPre.FK_ADApprovalProcID
                                                                                                            AND StepCurrent.AAStatus = StepPre.AAStatus
                                                                                                            AND StepCurrent.AAStatus = 'Alive'
                                                                                                            AND StepCurrent.ADApprovalProcStepID = {0}
                                                                                                          )
                                                WHERE   StepCurrent.ADApprovalProcStepLevel >= StepPre.ADApprovalProcStepLevel
                                                ORDER BY ADApprovalProcStepLevel DESC", iADApprovalProcStepCurrentID);
            return GetDataSet(strQuery);
        }

        public DataSet GetProcStepByProcIDAndNextLevel(int iProcID, int p)
        {
            string strQuery = String.Format(@"SELECT AssignUsers FROM ADApprovalProcSteps WHERE AAStatus='Alive' AND FK_ADApprovalProcID={0} AND ADApprovalProcStepLevel ={1}", iProcID, p);
            return GetDataSet(strQuery);
        }

        public DataSet GetProcStepByProcIDAndPreLevel(int iProcID, int p)
        {
            string strQuery = String.Format(@"SELECT AssignUsers FROM ADApprovalProcSteps WHERE AAStatus='Alive' AND FK_ADApprovalProcID={0} AND ADApprovalProcStepLevel ={1}", iProcID, p);
            return GetDataSet(strQuery);
        }

        public DataSet GetProcStepAllByProcIDAndPreLevel(int iProcID, int iRejectLeval)
        {
            string strQuery = String.Format(@"SELECT AssignUsers FROM ADApprovalProcSteps WHERE AAStatus='Alive' AND FK_ADApprovalProcID={0} AND ADApprovalProcStepLevel <={1}", iProcID, iRejectLeval);
            return GetDataSet(strQuery);
        }

        public bool CheckCurrentUser_IsExistApprovalProcess(string strModule, string strUserName, int iObjectID)
        {
            string strQuery = String.Format(@"SELECT AssignUsers FROM ADApprovalProcSteps 
                                                WHERE AAStatus='Alive' 
                                                    AND FK_ADApprovalProcID IN (SELECT ADApprovalProcID 
                                                                                FROM ADApprovalProcs    
                                                                                WHERE AAStatus='Alive' 
                                                                                    AND ADApprovalProcActive=1 
                                                                                    AND ADDocumentType='{0}'
                                                                                    AND ADApprovalProcID = {1})
                                                        ", strModule, iObjectID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    ADApprovalProcStepsInfo Step = (ADApprovalProcStepsInfo)GetObjectFromDataRow(dr);
                    if (Step != null)
                    {
                        string[] Users = Step.AssignUsers.Split(';');
                        if (!string.IsNullOrEmpty(Users.ToList().Find(x => x.Equals(strUserName))))
                            return true;
                        //for (int i = 0; i < Users.Length - 1; i++)
                        //{
                        //    if (Users[i] == strUserName)
                        //        return true;
                        //}
                    }
                }
                return true;
            }

            return false;
        }
        public bool CheckCurrentUser_ApprovalDoc(int piADApprovalProcID, string strUserName)
        {
            string strQuery = String.Format(@"
SELECT Top 1 a.*
FROM    dbo.ADApprovalProcSteps a
    INNER JOIN ADApprovalProcs b ON a.FK_ADApprovalProcID = b.ADApprovalProcID AND b.ADApprovalProcID = {0} AND a.AAStatus = 'Alive' AND b.AAStatus = 'Alive'
ORDER BY ADApprovalProcStepLevel DESC
", piADApprovalProcID);
            DataSet dsADApprovalProcSteps = GetDataSet(strQuery);
            List<BusinessObject> lstADApprovalProcSteps = GetListFromDataset(dsADApprovalProcSteps);
            if (lstADApprovalProcSteps.Count > 0)
            {
                string[] strUsers = ((ADApprovalProcStepsInfo)lstADApprovalProcSteps[0]).AssignUsers.Split(';');
                foreach (string strUser in strUsers)
                {
                    if (strUser == strUserName)
                        return true;
                }
                return false;
            }
            return true;
        }
        public bool CheckCurrentUser_ApprovalDoc(string strModule, string strUserName, int iObjectID)
        {
            //Thang edit - 4/1/2017 kiểm tra user hiện tại có nằm trong quy trình phê duyệt hay ko, và user đó có phải thuộc cấp phê suyệt cuối cùng
            //Thang edit - 8/9/2016 Kiểm tra user hiện tại có nằm trong quy trinh phê duyệt nào ko, hiện tại lấy top 1 không đúng
            //string strQuery = String.Format(@"SELECT Top 1 ADApprovalProcSteps.*
            //                                FROM    dbo.ADApprovalProcSteps
            //                                        INNER JOIN dbo.ADApprovalProcs ON ( ADApprovalProcs.ADApprovalProcID = ADApprovalProcSteps.FK_ADApprovalProcID
            //                                                                            AND ADApprovalProcs.AAStatus = ADApprovalProcSteps.AAStatus
            //                                                                            AND ADApprovalProcs.AAStatus = 'Alive'
            //                                                                            AND ADApprovalProcs.ADDocumentType = '{0}'
            //                                                                          )
            //                                ORDER BY ADApprovalProcStepLevel DESC
            //                            ", strModule);
            string strQuery = String.Format(@"
                                            SELECT TOP 1 WITH TIES ADApprovalProcSteps.*
                                            FROM    dbo.ADApprovalProcSteps
                                                    INNER JOIN dbo.ADApprovalProcs ON ( ADApprovalProcs.ADApprovalProcID = ADApprovalProcSteps.FK_ADApprovalProcID
                                                                                        AND ADApprovalProcs.AAStatus = ADApprovalProcSteps.AAStatus
                                                                                        AND ADApprovalProcs.AAStatus = 'Alive'
                                                                                        AND ADApprovalProcs.ADDocumentType = '{0}'
                                                                                      )
                                            WHERE FK_ADApprovalProcID = {1}
                                            ORDER BY ADApprovalProcStepLevel DESC
                                        ", strModule, iObjectID);
            DataSet dsADApprovalProcSteps = GetDataSet(strQuery);
            if (dsADApprovalProcSteps != null && dsADApprovalProcSteps.Tables.Count > 0 && dsADApprovalProcSteps.Tables[0].Rows.Count > 0)
            {
                string[] strUsers = Convert.ToString(dsADApprovalProcSteps.Tables[0].Rows[0]["AssignUsers"]).Split(';');
                return !string.IsNullOrEmpty(strUsers.ToList().Find(x => x.Equals(strUserName)));
                //foreach (string strUser in strUsers)
                //{
                //    if (strUser == strUserName)
                //        return true;
                //}
            }

            return true;
        }
        public int GetMaxCAStepCount()
        {
            string strQuery = String.Format(@"
SELECT  COUNT(FK_ADApprovalProcID) as Cnt
FROM    ADApprovalProcSteps a
    INNER JOIN ADApprovalProcs b ON a.FK_ADApprovalProcID = b.ADApprovalProcID 
        AND a.AAStatus = 'Alive' 
        AND b.AAStatus = 'Alive' 
        AND b.AAModule = 'CAApprovalProcessConfig'
GROUP BY a.FK_ADApprovalProcID
ORDER BY Cnt DESC
                                        ");
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return Convert.ToInt32(ds.Tables[0].Rows[0][0]) - 1;
            return 0;
        }
        public bool CheckCurrentUser_IsApprovalUser(int piADApprovalProcID, string strUserName)
        {
            if (piADApprovalProcID == 0) return true;
            string strQuery = String.Format(@"
SELECT AssignUsers , AssignPositions
FROM ADApprovalProcSteps a
    INNER JOIN ADApprovalProcs b ON a.FK_ADApprovalProcID = b.ADApprovalProcID 
            AND b.AAStatus='Alive'
            AND b.ADApprovalProcActive=1 
            AND a.AAStatus='Alive' 
            AND b.ADApprovalProcID = {0}
ORDER BY ADApprovalProcStepLevel
", piADApprovalProcID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 1)
            {
                for (int r = 1; r < ds.Tables[0].Rows.Count; r++)
                {
                    ADApprovalProcStepsInfo Step = (ADApprovalProcStepsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[r]);
                    if (Step != null)
                    {
                        if (!string.IsNullOrEmpty(Step.AssignUsers))
                        {
                            string[] Users = Step.AssignUsers.Split(';');
                            for (int i = 0; i < Users.Length - 1; i++)
                            {
                                if (Users[i] == strUserName)
                                    return true;
                            }
                        }
                        else
                        {
                            string sPostionNo = new HRPositionsController().GetObjectNoByUser(strUserName);
                            string[] Postions = Step.AssignPositions.Split(';');
                            for (int i = 0; i < Postions.Length - 1; i++)
                            {
                                if (Postions[i] == sPostionNo)
                                    return true;
                            }
                        }
                    }
                }
                return false;
            }

            return true;
        }
    }
    #endregion
}