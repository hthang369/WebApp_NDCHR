using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
    #region GLTranCfgs
    //-----------------------------------------------------------
    //Generated By: Expert Studio
    //Class:GLTranCfgsController
    //Created Date:Sunday, May 16, 2010
    //-----------------------------------------------------------

    public class GLTranCfgsController : BaseBusinessController
    {
        public GLTranCfgsController()
        {
            dal = new DALBaseProvider("GLTranCfgs", typeof(GLTranCfgsInfo));
        }

        public DataSet GetAllDataByTypeCombox(string typeCombox, bool isDebit)
        {
            string query = "SELECT * FROM GLTranCfgs WHERE AAStatus = 'Alive' AND ";
            if (isDebit)
            {
                query += String.Format("GLTranCfgDebitAccountNo like '{0}%'", typeCombox);
            }
            else
            {
                query += String.Format("GLTranCfgCreditAccountNo like '{0}%'", typeCombox);
            }
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        public DataSet GetAllDataByType(String strType)
        {
            String str = String.Format(@"SELECT * FROM dbo.GLTranCfgs WHERE AAStatus='Alive'");
            if (strType == "AP")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowAPCheck = 'TRUE')");
            }
            else if (strType == "AR")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowARCheck = 'TRUE')");
            }
            else if (strType == "IC")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowICCheck = 'TRUE')");
            }
            else if (strType == "InPmt")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowInPmtCheck = 'TRUE')");
            }
            else if (strType == "OutPmt")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowOutPmtCheck = 'TRUE')");
            }
            else if (strType == "Voucher")
            {
                str += String.Format(@" AND (AllowAllCheck = 'TRUE' OR AllowVoucherCheck = 'TRUE')");
            }
            return dal.GetDataSet(str);
        }
        public DataSet GetAllDataByCurrentUserAndModName(int piUserID, string psModName, int ipOrgTranCfg = 0)
        {
            DataSet ds;
            string query = string.Format(@"
SELECT a.* 
FROM GLTranCfgs a
INNER JOIN (
        SELECT GLTranCfgID 
        FROM GLTranCfgs a 
        INNER JOIN GLTranCfgUsers b ON a.AAStatus = 'Alive' 
            AND a.GLTranCfgID = b.FK_GLTranCfgID 
            AND b.FK_ADUserID = {0}
        UNION
        SELECT GLTranCfgID FROM GLTranCfgs a 
        LEFT JOIN GLTranCfgUsers b ON a.GLTranCfgID = b.FK_GLTranCfgID
        WHERE a.AAStatus = 'Alive'
            AND b.FK_GLTranCfgID is null
        ) b ON a.GLTranCfgID = b.GLTranCfgID
INNER JOIN (
        SELECT GLTranCfgID 
        FROM GLTranCfgs a 
            INNER JOIN GLTranCfgGroups b ON a.FK_GLTranCfgGroupID = b.GLTranCfgGroupID
            INNER JOIN GLTranCfgGroupModules c ON b.GLTranCfgGroupID = c.FK_GLTranCfgGroupID 
                AND c.GLTranCfgGroupModuleName = '{1}'
        WHERE GLTranCfgActiveCheck = 1
        ) c ON a.GLTranCfgID = c.GLTranCfgID
", piUserID, psModName);
            if (ipOrgTranCfg > 0)
            {
                query += string.Format(@"
LEFT JOIN (SELECT FK_GLTranCfgID
        FROM GLTranCfgSources
        WHERE FK_GLTranCfgSourceID = {0}
            AND AAStatus = 'Alive'
        GROUP BY FK_GLTranCfgID
        ) d ON a.GLTranCfgID = d.FK_GLTranCfgID
LEFT JOIN (SELECT FK_GLTranCfgID
        FROM GLTranCfgSources a
        WHERE AAStatus = 'Alive'
        GROUP BY FK_GLTranCfgID
        ) e ON a.GLTranCfgID = e.FK_GLTranCfgID
", ipOrgTranCfg);
                string strSQL = query + string.Format(@"
WHERE d.FK_GLTranCfgID is NOT NULL");
                ds = dal.GetDataSet(strSQL);
                if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                {
                    strSQL = query + string.Format(@"
WHERE d.FK_GLTranCfgID is NULL AND e.FK_GLTranCfgID IS NULL");
                    ds = dal.GetDataSet(strSQL);
                }
            }
            else
                ds = dal.GetDataSet(query);
            return ds;
        }

        public int GetDefaultValueByTranCfgAndModuleName(string moduleName)
        {
            string strQuery = string.Format(@"SELECT GLTranCfgDefaultValueValue FROM GLTranCfgs a JOIN GLTranCfgGroupModules b ON a.FK_GLTranCfgGroupID = b.FK_GLTranCfgGroupID
                                AND a.AAStatus = 'Alive' AND GLTranCfgGroupModuleName LIKE '{0}'
                                JOIN GLTranCfgDefaultValues c ON GLTranCfgID = FK_GLTranCfgID", moduleName);
            DataSet ds = GetDataSet(strQuery);
            if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0) return 0;
            return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
        }
        public bool IsTranCfgHasCheck(int piTranCfgID, string psCheckNo)
        {
            String strQuery = String.Format(@"
SELECT a.* 
FROM dbo.GLTranCfgChecks a
INNER JOIN GLTranCfgs b ON b.AAStatus = 'Alive' 
    AND a.FK_GLTranCfgID = b.GLTranCfgID 
    AND b.GLTranCfgID = {0}
    AND a.GLTranCfgCheckValue = 1
INNER JOIN GLTranCfgGroupChecks c ON a.FK_GLTranCfgGroupCheckID = c.GLTranCfgGroupCheckID 
    AND GLTranCfgGroupCheckNo = '{1}'", piTranCfgID, psCheckNo);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
    && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return true;

            return false;
        }
        public bool IsSameBaseCurrency(int piTranCfgID1, int piTranCfgID2)
        {
            String strQuery = String.Format(@"
SELECT TOP 1 1 
FROM (SELECT GLTranCfgBaseCurrencyCheck 
        FROM GLTranCfgs
        WHERE GLTranCfgID = {0} AND AAStatus = 'Alive'
    ) a
INNER JOIN (SELECT GLTranCfgBaseCurrencyCheck 
        FROM GLTranCfgs
        WHERE GLTranCfgID = {1} AND AAStatus = 'Alive'
        ) b ON a.GLTranCfgBaseCurrencyCheck = b.GLTranCfgBaseCurrencyCheck
", piTranCfgID1, piTranCfgID2);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
    && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return true;

            return false;
        }
        public bool IsBaseCurrencyVND(int piTranCfgID)
        {
            GLTranCfgsInfo GLTranCfgsInfo = (GLTranCfgsInfo)GetObjectByID(piTranCfgID);
            if (GLTranCfgsInfo != null)
                return GLTranCfgsInfo.GLTranCfgBaseCurrencyCheck;
            return false;
        }
    }
    #endregion
}