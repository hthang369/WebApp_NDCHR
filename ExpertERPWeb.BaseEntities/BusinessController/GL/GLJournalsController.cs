using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;

namespace ExpertERP.BusinessEntities
{
    #region GLJournals
    //-----------------------------------------------------------
    //Generated By: Expert Studio
    //Class:GLJournalsController
    //Created Date:Thursday, January 06, 2011
    //-----------------------------------------------------------

    public enum ObjectType
    {
        Employee = 1,
        Customer = 2,
        Supplier = 3,
        All = 4
    }

    public enum AccountType
    {
        None = 0,
        Debit = 1,
        Credit = 2

    }

    public partial class GLJournalsController : BaseBusinessController
    {
        public GLJournalsController()
        {
            dal = new DALBaseProvider("GLJournals", typeof(GLJournalsInfo));
        }

        public DataSet GetDataByNoAndSourceLedger(string DocNo, string sorceLedger)
        {
            string strQuery = String.Format("SELECT * FROM GLJournals where GLJournalDocumentNo = '{0}' and GLSourceLedger = '{1}'", DocNo, sorceLedger);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetDatabyNo(String strGLJournalNo)
        {
            String strSQL = "Select * from GLJournals where GLJournalNo='" + strGLJournalNo + "'";
            DataSet ds = dal.GetDataSet(strSQL);
            return ds;
        }

        public DataSet GetDatabyDocNo(String strGLJournalDocNo)
        {
            String strSQL = "Select * from GLJournals where GLJournalDocumentNo='" + strGLJournalDocNo + "'";
            DataSet ds = dal.GetDataSet(strSQL);
            return ds;
        }

        public DataSet GetDatabyDocNoAndPrefix(String strGLJournalDocNo, String strPrefix)
        {
            String strSQL = String.Format(@"Select * from GLJournals where GLJournalDocumentNo='{0}' AND GLJournalNo like '{1}%'", strGLJournalDocNo, strPrefix);
            DataSet ds = dal.GetDataSet(strSQL);
            return ds;
        }

        public double GetTotalCostByAccByPeriodByYear(int period, int year, string accountNo, bool isGetDebit, bool isGetCredit)
        {
            double result = 0;
            string debit = "0=0";
            string credit = "0=0";
            if (isGetCredit)
            {
                credit = string.Format("FK_GLCreditAccountID in(select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{0}%')", accountNo);
            }
            if (isGetDebit)
            {
                debit = string.Format("FK_GLDebitAccountID in(select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{0}%')", accountNo);
            }

            String strSQL = string.Format("Select sum(GLJournalAmt) from GLJournals where GLJournalPeriod = {0} AND GLJournalYear = {1} AND " +
                "({2} OR {3})", period, year, credit, debit);
            DataSet ds = dal.GetDataSet(strSQL);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }
        public DataSet GetAllDataByJournalDateAndTypeSubLedger(DateTime fromDate, DateTime toDate, string type, string JournalNo, string strContainDebitAcc, string strStartDebitAcc, string strContainCreditAcc, string strStartCreditAcc, ref string strQuery)
        {
            string query = "SELECT * FROM GLJournals WHERE 0 = 0 ";
            if (fromDate.Year != 1)
                query += String.Format(" AND GLJournalDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format(" AND GLJournalDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            if (type.Trim().Length != 0)
                query += String.Format(" AND GLJournalSubLedger = '{0}'", type);
            if (!String.IsNullOrEmpty(JournalNo))
            {
                query += String.Format(" AND GLJournalNo LIKE '%{0}%'", JournalNo);
            }
            if (!string.IsNullOrEmpty(strContainDebitAcc))
            {
                query += string.Format(@" AND FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE AAStatus='Alive' AND GLAccountNo LIKE '%{0}%')", strContainDebitAcc);
            }
            if (!string.IsNullOrEmpty(strStartDebitAcc))
            {
                query += string.Format(@" AND FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE AAStatus='Alive' AND GLAccountNo LIKE '{0}%')", strStartDebitAcc);
            }
            if (!string.IsNullOrEmpty(strContainCreditAcc))
            {
                query += string.Format(@" AND FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE AAStatus='Alive' AND GLAccountNo LIKE '%{0}%')", strContainCreditAcc);
            }
            if (!string.IsNullOrEmpty(strStartCreditAcc))
            {
                query += string.Format(@" AND FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE AAStatus='Alive' AND GLAccountNo LIKE '{0}%')", strStartCreditAcc);
            }
            strQuery = query;
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        public double GetCostAmt(int iPeriod, int iYear, string strAccountNo)
        {
            string strQueryDebit = string.Format(@" select  sum(GLJournalAmt) as NO
                                             from GLJournals 
	                                         where FK_GLDebitAccountID in( select GLAccountID from GLAccounts where GLAccountNo like'{2}%' ) and datepart(month,GLJournalDate)={0} and datepart(year,GLJournalDate)={1}

                                             ", iPeriod, iYear, strAccountNo);
            string strQueryCredit = string.Format(@" select  sum(GLJournalAmt) as CO 
                                                    from GLJournals where FK_GLCreditAccountID in( select GLAccountID from GLAccounts where GLAccountNo like '{2}%' ) and datepart(month,GLJournalDate)={0} and datepart(year,GLJournalDate)={1}
                                                ", iPeriod, iYear, strAccountNo);
            DataSet dsDebit = GetDataSet(strQueryDebit);
            DataSet dsCredit = GetDataSet(strQueryCredit);
            double dDebit = 0;
            double dCredit = 0;

            if (dsDebit != null && dsDebit.Tables[0].Rows.Count > 0)
            {
                if (!String.IsNullOrEmpty(dsDebit.Tables[0].Rows[0][0].ToString()))
                    dDebit = Convert.ToDouble(dsDebit.Tables[0].Rows[0][0]);
            }
            if (dsCredit != null && dsCredit.Tables[0].Rows.Count > 0)
            {
                if (!String.IsNullOrEmpty(dsCredit.Tables[0].Rows[0][0].ToString()))
                    dCredit = Convert.ToDouble(dsCredit.Tables[0].Rows[0][0]);
            }
            return dDebit - dCredit;

        }

        public double GetCostAmtByBranch(int iBRBranchID, int iPeriod, int iYear, string strAccountNo)
        {
            string strQueryDebit = string.Format(@" select  sum(GLJournalAmt) as NO
                                             from GLJournals 
	                                         where FK_GLDebitAccountID in( select GLAccountID from GLAccounts where GLAccountNo like'{2}%' ) and datepart(month,GLJournalDate)={0} and datepart(year,GLJournalDate)={1} and [FK_BRBranchID]={3}

                                             ", iPeriod, iYear, strAccountNo, iBRBranchID);
            string strQueryCredit = string.Format(@" select  sum(GLJournalAmt) as CO 
                                                    from GLJournals where FK_GLCreditAccountID in( select GLAccountID from GLAccounts where GLAccountNo like '{2}%' ) and datepart(month,GLJournalDate)={0} and datepart(year,GLJournalDate)={1} and [FK_BRBranchID]={3}
                                                ", iPeriod, iYear, strAccountNo, iBRBranchID);
            DataSet dsDebit = GetDataSet(strQueryDebit);
            DataSet dsCredit = GetDataSet(strQueryCredit);
            double dDebit = 0;
            double dCredit = 0;

            if (dsDebit != null && dsDebit.Tables[0].Rows.Count > 0)
            {
                try
                {
                    dDebit = Convert.ToDouble(dsDebit.Tables[0].Rows[0][0]);
                }
                catch (Exception)
                {
                    dDebit = 0;
                }

            }
            if (dsCredit != null && dsCredit.Tables[0].Rows.Count > 0)
            {
                try
                {
                    dCredit = Convert.ToDouble(dsCredit.Tables[0].Rows[0][0]);
                }
                catch
                {
                    dCredit = 0;
                }
            }
            return dDebit - dCredit;

        }

        public double GetTotAmountByAccountID(string accountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bIgnoreBeginBalance)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";
            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}'", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));

            if (bIgnoreBeginBalance == true)
            {
                strQuery += String.Format(@" AND GLJournalPeriod <> 0");
            }

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotAmountByAccountNo(string accountNo, DateTime fromDate, DateTime toDate, AccountType accountType, bool isEqual, bool bIgnoreBeginBalance, bool isExcept911, int iCurrencyID, int iHomeCurrencyID, String strColumnRefer, int iTagetObjectID)
        {
            double dAmt = 0;
            string equal = "";
            string colAccount = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";

            if (accountType == AccountType.Debit)
                colAccount = "FK_GLDebitAccountID";
            else
                colAccount = "FK_GLCreditAccountID";

            string strObjectCond = String.Empty;
            if (string.IsNullOrEmpty(strColumnRefer) == false && iTagetObjectID >= 0)
                strObjectCond = String.Format(@"{0}={1}", strColumnRefer, iTagetObjectID);

            string strQuery = String.Empty;
            if (iCurrencyID > 0 && iCurrencyID != iHomeCurrencyID)
            {
                strQuery = string.Format(@"SELECT sum(GLJournalFAmt) from GLJournals 
                                                where {0} IN (select GLAccountID from GLAccounts
                                                            where AAStatus = 'Alive' and GLAccountNo like '{1}%') 
                                                                and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}'", colAccount, accountNo,
                                                                        String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            }
            else
                strQuery = string.Format(@"SELECT sum(GLJournalAmt) from GLJournals 
                                                where {0} IN (select GLAccountID from GLAccounts
                                                            where AAStatus = 'Alive' and GLAccountNo like '{1}%') 
                                                                and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}'", colAccount, accountNo,
                                                                        String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));

            if (bIgnoreBeginBalance == true)
                strQuery += String.Format(@" AND GLJournalPeriod <> 0");
            if (isExcept911 == true)
                strQuery += " AND ([GLJournalSubLedger]<>'AccTransfer')";

            if (String.IsNullOrEmpty(strObjectCond) == false)
                strQuery += String.Format(@" AND {0}", strObjectCond);

            if (iCurrencyID > 0 && iCurrencyID != iHomeCurrencyID)
                strQuery += String.Format(@" AND FK_GECurrencyID = {0}", iCurrencyID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                dAmt = (double)ds.Tables[0].Rows[0][0];
            }

            return dAmt;
        }

        public double GetTotAmountByAccountID_FAmt(string accountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bIgnoreBeginBalance, String strColumnRefer, int iTagetObjectID)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strTaget = "";
            if (iTagetObjectID > 0)
                strTaget = String.Format(@"{0}={1}", strColumnRefer, iTagetObjectID);
            else
                strTaget = String.Format(@"{0}>0", strColumnRefer);

            string strQuery = string.Format("select sum(GLJournalFAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}' AND {5}", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate), strTaget);

            if (bIgnoreBeginBalance == true)
            {
                strQuery += String.Format(@" AND GLJournalPeriod <> 0");
            }

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetBeginBalance(string accountNo, DateTime dtStartDateFisCall, bool isDebit)
        {
            double result = 0;
            String debit = String.Empty;
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate <= '{2}'", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", dtStartDateFisCall));

            strQuery += String.Format(@" AND GLJournalPeriod = 0");

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetOpeningBalance(string accountNo, DateTime dtStartDateFisCall, bool isDebit, int iCurrencyID, int iHomeCurrencyID, String strColumnRefer, int iTagetObject)
        {
            String strDateCond = DALUtil.GennerateCondition("GLJournalDate", CompareType.Equal, dtStartDateFisCall);

            double dAmt = 0;
            String debit = String.Empty;
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strTagetCond = "";
            if (iTagetObject >= 0 && string.IsNullOrEmpty(strColumnRefer) == false)
                strTagetCond = String.Format(@"{0}={1}", strColumnRefer, iTagetObject);
            //else
            //    strTaget = String.Format(@"{0} > 0", strColumnRefer);

            string strQuery = String.Empty;
            if (iCurrencyID > 0 && iCurrencyID != iHomeCurrencyID)
                strQuery = string.Format(@"SELECT SUM(GLJournalFAmt) from GLJournals 
                                                WHERE {0} IN (SELECT GLAccountID FROM GLAccounts
                                                                WHERE AAStatus = 'Alive' and GLAccountNo like '{1}%')"
                                                                , debit, accountNo, strDateCond, strTagetCond);
            else
                strQuery = string.Format(@"SELECT SUM(GLJournalAmt) from GLJournals 
                                                WHERE {0} IN (SELECT GLAccountID FROM GLAccounts
                                                                WHERE AAStatus = 'Alive' and GLAccountNo like '{1}%')"
                                                                , debit, accountNo, strDateCond, strTagetCond);
            strQuery += String.Format(@" AND {0}", strDateCond);
            strQuery += String.Format(@" AND GLJournalPeriod = 0");
            if (String.IsNullOrEmpty(strTagetCond) == false)
                strQuery += String.Format(@" AND {0}", strTagetCond);

            if (iCurrencyID > 0 && iCurrencyID != iHomeCurrencyID)
                strQuery += String.Format(@" AND FK_GECurrencyID = {0}", iCurrencyID);

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
                dAmt = (double)ds.Tables[0].Rows[0][0];

            return dAmt;
        }

        public double GetBeginBalance_FAmt(string accountNo, DateTime dtStartDateFisCall, bool isDebit, String strColumnRefer, int iTagetObject)
        {
            double result = 0;
            String debit = String.Empty;
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strTaget = "";
            if (iTagetObject > 0)
                strTaget = String.Format(@"{0}={1}", strColumnRefer, iTagetObject);
            else
                strTaget = String.Format(@"{0}>0", strColumnRefer);

            string strQuery = string.Format("select sum(GLJournalFAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate = '{2}' AND {3}", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", dtStartDateFisCall), strTaget);

            strQuery += String.Format(@" AND GLJournalPeriod = 0");

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public DataSet GetAllJournalByPeriodAndYear(int iPeriod, int iYear)
        {
            string strQuery = string.Format("Select * from GLJournals  where datepart(month,GLJournalDate)={0} and datepart(year,GLJournalDate)={1} ", iPeriod, iYear);
            return GetDataSet(strQuery);

        }

        public double GetTotAmountByAccountID(string accountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bExcept911, bool bIgnoreBeginBalance)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";
            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}'", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            if (bExcept911)
                strQuery += " AND ([GLJournalSubLedger]<>'AccTransfer')";

            if (bIgnoreBeginBalance == true)
                strQuery += " AND ([GLJournalPeriod] <> 0)";

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotAmountByAccountID(string accountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bExcept911, bool bIgnoreBeginBalance, String strColumnRefer, int iTagetObject)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strTaget = "";
            if (iTagetObject > 0)
                strTaget = String.Format(@"{0}={1}", strColumnRefer, iTagetObject);
            else
                strTaget = String.Format(@"{0}>0", strColumnRefer);

            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}' AND {5}", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate), strTaget);
            if (bExcept911)
                strQuery += " AND ([GLJournalSubLedger]<>'AccTransfer')";

            if (bIgnoreBeginBalance == true)
                strQuery += " AND ([GLJournalPeriod] <> 0)";

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotAmountByAccountID_FAmt(string accountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bExcept911, bool bIgnoreBeginBalance, String strColumnRefer, int iTagetObject)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strTaget = "";
            if (iTagetObject > 0)
                strTaget = String.Format(@"{0}={1}", strColumnRefer, iTagetObject);
            else
                strTaget = String.Format(@"{0}>0", strColumnRefer);

            string strQuery = string.Format("select sum(GLJournalFAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}' AND {5}", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate), strTaget);
            if (bExcept911)
                strQuery += " AND ([GLJournalSubLedger]<>'AccTransfer')";

            if (bIgnoreBeginBalance == true)
                strQuery += " AND ([GLJournalPeriod] <> 0)";

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotAmountByAccountID(string accountNo, int iCustomerID, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual, bool bExcept911, bool bIgnoreBeginBalance)
        {
            double result = 0;
            string equal = "";
            string debit = "";
            if (isEqual)
                equal = "<=";
            else
                equal = "<";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";
            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and GLJournalDate >= '{2}' and GLJournalDate {3} '{4}'", debit, accountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), equal, String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            if (bExcept911)
                strQuery += " AND ([GLJournalSubLedger]<>'AccTransfer')";

            if (iCustomerID > 0)
                strQuery += String.Format(" AND (FK_ARCustomerID = {0} OR  FK_ARCustomerIDCredit = {0})", iCustomerID);

            if (bIgnoreBeginBalance == true)
                strQuery += " AND ([GLJournalPeriod] <> 0)";

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetTotAmountByAccountID(string accountNo, String strOppositeAccountNo, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqual)
        {
            double result = 0;
            //string equal = "";
            string accountID = "";
            string oppositeAccountID = "";
            //if (isEqual)
            //    equal = "<=";
            //else
            //    equal = "<";
            if (isEqual)
                toDate = toDate.AddDays(1);
            if (isDebit)
            {
                accountID = "FK_GLDebitAccountID";
                oppositeAccountID = "FK_GLCreditAccountID";
            }
            else
            {
                accountID = "FK_GLCreditAccountID";
                oppositeAccountID = "FK_GLDebitAccountID";
            }
            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{1}%') and {2} IN (select GLAccountID from GLAccounts" +
            " where AAStatus = 'Alive' and GLAccountNo like '{3}%') and GLJournalDate >= '{4}' and GLJournalDate < '{5}'", accountID, accountNo, oppositeAccountID, strOppositeAccountNo,
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));

            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public double GetAmountByAccountID(int period, int year, int srcAccID, bool isDebit)
        {
            string debit = "";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strQueryDebit = string.Format("SELECT sum(GLJournalAmt) FROM GLJournals where {0} = {1} and GLJournalPeriod = {2} and GLJournalYear = {3}", debit, srcAccID, period, year);
            DataSet ds = dal.GetDataSet(strQueryDebit);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                return (double)ds.Tables[0].Rows[0][0];
            }
            return 0;
        }

        public double GetAmountByAccountID(int period, int year, int srcAccID, bool isDebit, bool bExcept911)
        {
            string debit = "";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            string strQueryDebit = string.Format("SELECT sum(GLJournalAmt) FROM GLJournals where {0} = {1} and GLJournalPeriod = {2} and GLJournalYear = {3}", debit, srcAccID, period, year);
            if (bExcept911)
                strQueryDebit += " AND GLJournalSubLedger<>'AccTransfer'";

            DataSet ds = dal.GetDataSet(strQueryDebit);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                return (double)ds.Tables[0].Rows[0][0];
            }
            return 0;
        }

        public double GetAmountAccountAndChildren(int period, int year, String strAccountNo, bool isDebit)
        {
            string debit = "";
            if (isDebit)
                debit = "FK_GLDebitAccountID";
            else
                debit = "FK_GLCreditAccountID";

            String strQueryAccountAndChilds = String.Format("SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%' AND AAStatus = 'Alive'", strAccountNo);

            string strQueryDebit = string.Format("SELECT SUM(GLJournalAmt) FROM GLJournals where {0} in ({1}) and GLJournalPeriod = {2} and GLJournalYear = {3}", debit, strQueryAccountAndChilds, period, year);
            DataSet ds = dal.GetDataSet(strQueryDebit);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                return (double)ds.Tables[0].Rows[0][0];
            }
            return 0;
        }

        public void DeleteAllObjectByType(int period, int year, string type)
        {
            string strQuery = String.Format("delete from GLJournals where GLSourceLedger = '{0}' and GLJournalPeriod = {1} and GLJournalYear = {2}", type, period, year);
            GMCDbUtil.ExecuteQuery(strQuery);
        }

        public void DeleteAllObjectByNoAndSourceLegder_InPeriod(DateTime fromDate, DateTime toDate, string No, string SourceLedger)
        {
            string query = String.Format("delete from GLJournals where GLJournalNo = '{0}' and GLSourceLedger = '{1}'", No, SourceLedger);
            if (fromDate.Year != 1)
                query += String.Format("AND GLJournalDate >= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate));
            if (toDate.Year != 1)
                query += string.Format("AND GLJournalDate <= '{0}' ", String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));

            GMCDbUtil.ExecuteQuery(query);
        }

        public void DeleteAllObjectByNoAndSourceLegder(string No, string SourceLedger)
        {
            string query = String.Format("delete from GLJournals where GLJournalDocumentNo = '{0}' and GLSourceLedger = '{1}'", No, SourceLedger);
            GMCDbUtil.ExecuteQuery(query);
        }

        public void DeleteAllJournalBySourceLegder(string strSourceLedger, int iYear, int iPeriod)
        {
            string query = String.Format(@"DELETE GLJournals 
                                            WHERE GLSourceLedger = '{0}'
                                            AND MONTH(GLJournalDate) = {1}
                                            AND YEAR(GLJournalDate) = {2}", strSourceLedger, iPeriod, iYear);
            GMCDbUtil.ExecuteQuery(query);
        }


        public void DeleteAllObjectByNoInPeriod(string DocNo, int iPeriod, int iYear)
        {
            string query = String.Format(@"DELETE from GLJournals 
                                                WHERE GLJournalNo = '{0}'
                                                AND MONTH(GLJournalDate) = {1}
                                                AND YEAR(GLJournalDate) = {2}", DocNo, iPeriod, iYear);
            GMCDbUtil.ExecuteQuery(query);
        }

        public void DeleteAllObjectByDocumentNo(string No)
        {
            string query = String.Format("delete from GLJournals where GLJournalDocumentNo = '{0}'", No);
            GMCDbUtil.ExecuteQuery(query);
        }

        public void UpdateAllObjectNoByDocNoAndSourceLegder(string oldDocNo, String newDocNo, string SourceLedger)
        {
            string query = String.Format("UPDATE GLJournals SET GLJournalDocumentNo = '{0}' WHERE GLJournalDocumentNo = '{1}' and GLSourceLedger = '{2}'", newDocNo, oldDocNo, SourceLedger);
            GMCDbUtil.ExecuteQuery(query);
        }

        public DataSet GetAllDataByPeriodAndTypeSubLedger(int period, int year, string type)
        {
            string strQuery = String.Format("Select * from GLJournals where GLJournalSubLedger = '{0}' and GLJournalPeriod = {1} and GLJournalYear = {2}", type, period, year);
            return dal.GetDataSet(strQuery);
        }

        public double GetTotAmountByAccountID(int accountID, int accountIDDU, DateTime fromDate, DateTime toDate, bool isDebit, bool isEqualDU, string
             arrayOption)
        {
            string optionQuery = "";
            if (arrayOption.Contains("@NgayNhap"))
            {
                optionQuery = arrayOption.Replace("@NgayNhap", "GLJournalDate");
                if (arrayOption.Contains("@TuNgay"))
                {
                    optionQuery = optionQuery.Replace("@TuNgay", "'" + String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate) + "'");
                    if (arrayOption.Contains("@DenNgay"))
                    {
                        optionQuery = optionQuery.Replace("@DenNgay", "'" + String.Format("{0:yyyy/M/d HH:mm:ss}", toDate) + "'");
                    }
                }
                else
                {
                    if (arrayOption.Contains("@DenNgay"))
                    {
                        optionQuery = optionQuery.Replace("@DenNgay", "'" + String.Format("{0:yyyy/M/d HH:mm:ss}", toDate) + "'");
                    }
                }
                optionQuery = optionQuery.Replace(",", " and ");
                optionQuery = " and " + optionQuery;
            }
            else
            {
                optionQuery = string.Format("and GLJournalDate >= '{0}' and GLJournalDate <= '{1}'",
            String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));
            }


            double result = 0;
            string equalDU = "";
            string debit = "";
            string credit = "";

            if (isEqualDU)
                equalDU = "=";
            else
                equalDU = "<>";

            if (isDebit)
            {
                debit = "FK_GLDebitAccountID";
                credit = "FK_GLCreditAccountID";
            }
            else
            {
                debit = "FK_GLCreditAccountID";
                credit = "FK_GLDebitAccountID";
            }
            credit += equalDU + accountIDDU;
            optionQuery = optionQuery.Replace("[", "");
            optionQuery = optionQuery.Replace("]", "");
            string strQuery = string.Format("select sum(GLJournalAmt) from GLJournals where {0} = '{1}' {2}", debit, accountID, optionQuery);

            if (accountIDDU != 0)
            {
                strQuery += " and " + credit;
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0].ToString().Length > 0)
            {
                result = (double)ds.Tables[0].Rows[0][0];
            }
            return result;
        }

        public DataSet GetAllJournals(DateTime fromDate, DateTime toDate, String strSubLedger, String strJournalNo, string AccountNo, int iCurrencyID, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", fromDate, toDate);
            string strQuery = String.Format(@"SELECT * FROM GLJournals WHERE {0} ", strDateCond);

            if (iCurrencyID > 0)
                strQuery += String.Format(@" AND FK_GECurrencyID = {0}", iCurrencyID);

            if (strSubLedger.Trim().Length != 0)
                strQuery += String.Format(" AND GLJournalSubLedger = '{0}'", strSubLedger);
            if (!String.IsNullOrEmpty(strJournalNo))
                strQuery += String.Format(" AND GLJournalNo LIKE '%{0}%'", strJournalNo);

            strQuery += String.Format("AND (FK_GLDebitAccountID IN (select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{0}%') "
            + "or FK_GLCreditAccountID IN (select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{1}%'))", AccountNo, AccountNo);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }
        public DataSet GetAllJournalAccs(DateTime fromDate, DateTime toDate, int iAccountID, int iCurrencyID, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", fromDate, toDate);
            string strQuery = String.Format(@"
WITH    #temp ( GLAccountID,aLevel,ParentID,sort )
          AS ( SELECT   GLAccountID ,
                        1 AS aLevel,
                        FK_GLAccountParentID,
                        CAST(RIGHT('0000000000' + CAST(GLAccountID as varchar), 10) as varchar(500)) AS sort
               FROM     GLAccounts
               WHERE    AAStatus = 'Alive'
                        AND GLAccountID = {0}
               UNION ALL
               SELECT   b.GLAccountID ,
                        a.alevel + 1,
                        FK_GLAccountParentID,
                        CAST(a.sort + CAST(RIGHT('0000000000' + CAST(b.GLAccountID as varchar), 10) as varchar(10)) as varchar(500))
               FROM     #temp AS a ,
                        GLAccounts AS b
               WHERE    a.GLAccountID = b.FK_GLAccountParentID
                        AND b.AAStatus = 'Alive'
             )

    SELECT  GLAccountID
    INTO #tAccounts
    FROM    #temp
    ORDER BY sort,aLevel
", iAccountID);

            String sTemplate = @"SELECT {0} as FK_GLAccountID,FK_GECurrencyID,{1} as FK_GLRecipAccountID,
{2} AS ArisingDebit,
{3} AS FArisingDebit,
{4} AS ArisingCredit,
{5} AS FArisingCredit
{6}
FROM GLJournals a
INNER JOIN #tAccounts b ON {0} = b.GLAccountID 
WHERE " + strDateCond;
            if (iCurrencyID > 0)
                sTemplate += String.Format(@" AND FK_GECurrencyID = {0}", iCurrencyID);

            sTemplate += @"
GROUP BY {0},{1},FK_GECurrencyID";

            strQuery += String.Format(sTemplate, "FK_GLDebitAccountID", "FK_GLCreditAccountID", "SUM(GLJournalAmt)", "SUM(GLJournalFAmt)", "CAST(0 as float)", "CAST(0 as float)", "INTO #tKQ");

            strQuery += @"
UNION ALL
" + String.Format(sTemplate, "FK_GLCreditAccountID", "FK_GLDebitAccountID", "CAST(0 as float)", "CAST(0 as float)", "SUM(GLJournalAmt)", "SUM(GLJournalFAmt)", "");

            strQuery += string.Format(@"
SELECT '5' as Sort,
    a.FK_GLAccountID,
    a.FK_GLRecipAccountID,
    a.FK_GECurrencyID,
    SUM(ArisingDebit) AS ArisingDebit,
    SUM(FArisingDebit) AS FArisingDebit,
    SUM(ArisingCredit) AS ArisingCredit,
    SUM(FArisingCredit) AS FArisingCredit,
    MAX(GLAccountName) as JournalDesc
FROM #tKQ a
INNER JOIN GLAccounts b ON a.FK_GLRecipAccountID = b.GLAccountID AND b.AAStatus = 'Alive'
GROUP BY FK_GLAccountID,
    FK_GLRecipAccountID,
    a.FK_GECurrencyID
ORDER BY FK_GLAccountID,FK_GLRecipAccountID
DROP TABLE #tKQ
DROP TABLE #tAccounts
"
                );

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }
        public DataSet GetAllJournalVCs(DateTime fromDate, DateTime toDate, int iAccountID, int iCurrencyID, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", fromDate, toDate);
            string strQuery = String.Format(@"
WITH    #temp ( GLAccountID,aLevel,ParentID,sort )
          AS ( SELECT   GLAccountID ,
                        1 AS aLevel,
                        FK_GLAccountParentID,
                        CAST(RIGHT('0000000000' + CAST(GLAccountID as varchar), 10) as varchar(500)) AS sort
               FROM     GLAccounts
               WHERE    AAStatus = 'Alive'
                        AND GLAccountID = {0}
               UNION ALL
               SELECT   b.GLAccountID ,
                        a.alevel + 1,
                        FK_GLAccountParentID,
                        CAST(a.sort + CAST(RIGHT('0000000000' + CAST(b.GLAccountID as varchar), 10) as varchar(10)) as varchar(500))
               FROM     #temp AS a ,
                        GLAccounts AS b
               WHERE    a.GLAccountID = b.FK_GLAccountParentID
                        AND b.AAStatus = 'Alive'
             )

    SELECT  GLAccountID
    INTO #tAccounts
    FROM    #temp
    ORDER BY sort,aLevel
", iAccountID);

            String sTemplate = @"SELECT GLJournalNo, GLJournalDate, GLJournalDocumentNo, GLJournalDocDate, GLJournalHDesc,
{0} as FK_GLAccountID,FK_GECurrencyID,{1} as FK_GLRecipAccountID,
{2} AS ArisingDebit,
{3} AS FArisingDebit,
{4} AS ArisingCredit,
{5} AS FArisingCredit
{6}
FROM GLJournals a
INNER JOIN #tAccounts b ON {0} = b.GLAccountID 
WHERE " + strDateCond;
            if (iCurrencyID > 0)
                sTemplate += String.Format(@" AND FK_GECurrencyID = {0}", iCurrencyID);

            sTemplate += @"
GROUP BY {0},{1},a.FK_GECurrencyID,GLJournalNo,GLJournalDate,GLJournalDocumentNo,GLJournalDocDate,GLJournalHDesc";

            strQuery += String.Format(sTemplate, "FK_GLDebitAccountID", "FK_GLCreditAccountID", "SUM(GLJournalAmt)", "SUM(GLJournalFAmt)", "CAST(0 as float)", "CAST(0 as float)", "INTO #tKQ");

            strQuery += @"
UNION ALL
" + String.Format(sTemplate, "FK_GLCreditAccountID", "FK_GLDebitAccountID", "CAST(0 as float)", "CAST(0 as float)", "SUM(GLJournalAmt)", "SUM(GLJournalFAmt)", "");

            strQuery += string.Format(@"
SELECT '5' as Sort,
    a.FK_GLAccountID,
    a.FK_GLRecipAccountID,
    a.FK_GECurrencyID,
    SUM(ArisingDebit) AS ArisingDebit,
    SUM(FArisingDebit) AS FArisingDebit,
    SUM(ArisingCredit) AS ArisingCredit,
    SUM(FArisingCredit) AS FArisingCredit,
    GLJournalNo as JournalNo, GLJournalDate as JournalDate, GLJournalDocumentNo as DocNo, GLJournalDocDate as JournalDocDate, GLJournalHDesc AS JournalDesc
FROM #tKQ a
INNER JOIN GLAccounts b ON a.FK_GLRecipAccountID = b.GLAccountID AND b.AAStatus = 'Alive'
GROUP BY FK_GLAccountID,
    FK_GLRecipAccountID,
    a.FK_GECurrencyID,
    b.GLAccountNo,
    GLJournalNo,GLJournalDate,GLJournalDocumentNo,GLJournalDocDate,GLJournalHDesc
ORDER BY FK_GLAccountID,GLJournalDate,GLJournalNo
DROP TABLE #tKQ
DROP TABLE #tAccounts
"
);

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;

        }
        public DataSet GetAllJournals(DateTime fromDate, DateTime toDate, string AccountNo)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", fromDate, toDate);
            string strQuery = String.Format(@"SELECT * FROM GLJournals WHERE {0} ", strDateCond);

            strQuery += String.Format("AND (FK_GLDebitAccountID IN (select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{0}%') "
            + "or FK_GLCreditAccountID IN (select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{1}%'))", AccountNo, AccountNo);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalsByDebitAccountID(int intDebitAccountID)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE FK_GLDebitAccountID = {0}", intDebitAccountID);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalsByCreditAccountIDAndDocNoAndSubLedger_InPeriod(int iCreditAccountID, String strDocumentNo, String strSubLedger, int iYear, int iPeriod)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("FK_GLCreditAccountID = {0}", iCreditAccountID);
            strQuery += String.Format("AND GLJournalDocumentNo = '{0}' ", strDocumentNo);
            strQuery += String.Format("AND GLJournalSubLedger = '{0}' ", strSubLedger);
            strQuery += String.Format("AND GLJournalYear = {0} ", iYear);
            strQuery += String.Format("AND GLJournalPeriod = {0}", iPeriod);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllJournalsBySubLedger_InPeriod(String strSubLedger, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("GLJournalSubLedger = '{0}' ", strSubLedger);
            strQuery += String.Format("AND GLJournalYear = {0} ", iYear);
            strQuery += String.Format("AND GLJournalPeriod = {0} ", iPeriod);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllJournalsDocumentNoAndSourceLedger(String strDocumentNo, String strSubLedger)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE GLJournalDocumentNo = '{0}' AND GLSourceLedger = '{1}'", strDocumentNo, strSubLedger);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetObjectByDocumentNoAndProductID(String strDocumentNo, int iICProductID)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE GLJournalDocumentNo = '{0}' AND FK_ICProductID = '{1}'", strDocumentNo, iICProductID);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalByAccountNo(String strAccountNo)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format(" FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%')", strAccountNo);
            strQuery += String.Format("OR FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%')", strAccountNo);

            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalByAccountNo(String strAccountNo, DateTime dtFrom, DateTime dtTo)
        {
            String strInRange = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("( FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%')", strAccountNo);
            strQuery += String.Format("OR FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%'))", strAccountNo);
            strQuery += String.Format(" AND {0}", strInRange);

            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalByAccountNo(String strAccountNo, DateTime dtFrom, DateTime dtTo, int iCurrency, int iHomeCurrencyID)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("( FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%')", strAccountNo);
            strQuery += String.Format("OR FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%'))", strAccountNo);
            strQuery += String.Format(" AND GLJournalDate >= '{0}'", String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom));
            strQuery += String.Format(" AND GLJournalDate <= '{0}'", String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            if (iCurrency != iHomeCurrencyID && iCurrency > 0)
                strQuery += String.Format(" AND FK_GECurrencyID ={0}", iCurrency);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalByAccountNo(String strAccountNo, DateTime dtFrom, DateTime dtTo, ObjectType objectType, int ObjectID, int iCurrencyID, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strWhere = "";
            if (ObjectID >= 0)
            {
                if (objectType == ObjectType.Employee)
                    strWhere += String.Format(" AND (FK_HREmployeeID = {0} OR FK_HREmployeeIDCredit = {0} OR 0={0})", ObjectID);
                else if (objectType == ObjectType.Customer)
                    strWhere += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0} OR 0={0})", ObjectID);
                else if (objectType == ObjectType.Supplier)
                    strWhere += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0} OR 0={0})", ObjectID);
                else if (iCurrencyID > 0) // && iCurrencyID != iHomeCurrencyID
                {
                    //(LINHCLH's Code - Sua loc theo ma ngoai te ObjectID = > iCurrencyID
                    strWhere += String.Format(" AND FK_GECurrencyID = {0}", iCurrencyID);
                    //)
                }
            }

            String strQuery = String.Format(@"SELECT A.* FROM
                                                                ( SELECT *,0 AS Type FROM GLJournals WHERE {0} {1} AND FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{2}%') 
                                                                  UNION ALL
                                                                  SELECT *,1 AS Type FROM GLJournals WHERE {0} {1} AND FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{2}%') 
                                                                 ) AS A
                                            ORDER BY A.GLJournalDate,A.Type,A.GLJournalDocumentNo 
", strDateCond, strWhere, strAccountNo);

            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllAccountDoiungs(String strAccountNo, DateTime dtFrom, DateTime dtTo, ObjectType objectType, int ObjectID, int iCurrencyID, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQueryDebit = String.Format(@"select GLJournalDocumentNo AS DocumentNo,
                                                    GLSourceLedger AS  SourceLedger,
                                                    GLJournalDate AS JournalDate,
                                                    FK_GLDebitAccountID AS AccountID,
                                                    DebitAccount.GLAccountNo AS AccountNo,
                                                    CreditAccount.GLAccountNo AS AccountDoiUngNo,
                                                    CreditAccount.GLAccountName AS AccountDoiUngName,
                                                    GLJournalAmt AS DebitAmt,
                                                    GLJournalFAmt AS DebitFAmt,
                                                    0 as CreditAmt,
                                                    0 AS CreditFAmt,
                                                    GLJournals.FK_GECurrencyID AS FK_GECurrencyID,
                                                    GLJournals.GLJournalExRate AS ExcRate

                                                    FROM GLJournals, GLAccounts AS DebitAccount, GLAccounts AS CreditAccount
                                                    WHERE 
                                                    GLJournals.FK_GLDebitAccountID = DebitAccount.GLAccountID
                                                    AND GLJournals.FK_GLCreditAccountID = CreditAccount.GLAccountID
                                                    AND DebitAccount.GLAccountID > 0
                                                    AND CreditAccount.GLAccountID > 0
                                                    AND {0}
                                                    AND DebitAccount.GLAccountNo like '{1}%'", strDateCond, strAccountNo);

            String strQueryCredit = String.Format(@"SELECT GLJournalDocumentNo AS DocumentNo,
                                                    GLSourceLedger AS  SourceLedger,
                                                    GLJournalDate AS JournalDate,
                                                    FK_GLCreditAccountID AS AccountID,
                                                    CreditAccount.GLAccountNo AS AccountNo,
                                                    DebitAccount.GLAccountNo AS AccountDoiUngNo,
                                                    DebitAccount.GLAccountName AS AccountDoiUngName,
                                                    0 AS DebitAmt,
                                                    0 AS DebitFAmt,
                                                    GLJournalAmt AS CreditAmt,
                                                    GLJournalFAmt AS CreditFAmt,
                                                    GLJournals.FK_GECurrencyID AS FK_GECurrencyID,
                                                    GLJournals.GLJournalExRate AS ExcRate

                                                    FROM GLJournals, GLAccounts AS DebitAccount, GLAccounts AS CreditAccount
                                                    WHERE 
                                                    GLJournals.FK_GLDebitAccountID = DebitAccount.GLAccountID
                                                    AND GLJournals.FK_GLCreditAccountID = CreditAccount.GLAccountID
                                                    AND DebitAccount.GLAccountID > 0
                                                    AND CreditAccount.GLAccountID > 0
                                                    AND {0}
                                                    AND CreditAccount.GLAccountNo like '{1}%'", strDateCond, strAccountNo);

            if (ObjectID >= 0)
            {
                if (objectType == ObjectType.Employee)
                {
                    strQueryDebit += String.Format(" AND (GLJournals.FK_HREmployeeID = {0} OR GLJournals.FK_HREmployeeIDCredit = {0})", ObjectID);
                    strQueryCredit += String.Format(" AND (GLJournals.FK_HREmployeeID = {0} OR GLJournals.FK_HREmployeeIDCredit = {0})", ObjectID);
                }
                else if (objectType == ObjectType.Customer)
                {
                    strQueryDebit += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0})", ObjectID);
                    strQueryCredit += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0})", ObjectID);
                }
                else if (objectType == ObjectType.Supplier)
                {
                    strQueryDebit += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0})", ObjectID);
                    strQueryCredit += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0})", ObjectID);
                }
                else if (iCurrencyID > 0 && iCurrencyID != iHomeCurrencyID)
                {
                    strQueryDebit += String.Format(" AND FK_GECurrencyID = {0}", ObjectID);
                }
            }

            String strQuery = String.Format(@"{0}
                                                UNION ALL
                                              {1}", strQueryDebit, strQueryCredit);

            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        public double GetSumAmtByAccountAndCostCenterInPeriod(int iAccountID, int iCostCenterID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                    WHERE FK_GLDebitAccountID = {0} AND FK_GLCostCenterID = {1} 
                                                    AND GLJournalPeriod = {2} AND GLJournalYear = {3}",
                                                    iAccountID, iCostCenterID, iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public double GetSumAmtByAccountAndCostCenterInYear(int iAccountID, int iCostCenterID, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                    WHERE FK_GLDebitAccountID = {0} AND FK_GLCostCenterID = {1} 
                                                    AND GLJournalYear = {2}",
                                                    iAccountID, iCostCenterID, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public double GetSumAmtByAccountAndCostCenterAndBranchInRangeTime(int iAccountID, int iCostCenterID, int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                    WHERE FK_GLDebitAccountID = {0} AND FK_GLCostCenterID = {1}  AND FK_BRBranchID = {2}
                                                    AND GLJournalDate >= '{3}'
                                                    AND GLJournalDate <= '{4}'",
                                                    iAccountID, iCostCenterID, iBranchID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public double GetSumCostAmtInPeriod(int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                    WHERE FK_GLCostCenterID IN ( SELECT GLCostCenterID FROM GLCostCenters WHERE AAStatus = 'Alive' )
                                                    AND GLJournalPeriod = {0} AND GLJournalYear = {1}",
                                                    iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public double GetSumCostAmtByBranchInRangeTime(int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                    WHERE FK_BRBranchID = {0}
                                                    AND FK_GLCostCenterID IN ( SELECT GLCostCenterID FROM GLCostCenters WHERE AAStatus = 'Alive' )
                                                    AND  GLJournalDate >= '{1}'
                                                    AND  GLJournalDate <= '{2}'",
                                                    iBranchID, String.Format("{0:yyyy/M/d HH:mm:ss}", dtFrom), String.Format("{0:yyyy/M/d HH:mm:ss}", dtTo));
            DataSet ds = dal.GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllJournalsByAccountAndCostCenterInPeriod(int iAccountID, int iCostCenterID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM GLJournals 
                                                    WHERE FK_GLDebitAccountID = {0} AND FK_GLCostCenterID = {1} 
                                                    AND GLJournalPeriod = {2} AND GLJournalYear = {3}",
                                                    iAccountID, iCostCenterID, iPeriod, iYear);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllJournalsByAccountAndCostCenterInYear(int iAccountID, int iCostCenterID, int iYear)
        {
            String strQuery = String.Format(@"SELECT * FROM GLJournals 
                                                    WHERE FK_GLDebitAccountID = {0} AND FK_GLCostCenterID = {1} 
                                                    AND GLJournalYear = {2}",
                                                    iAccountID, iCostCenterID, iYear);

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllJournalsByCostCenterAndBranchInRangeTime(int iCostCenterID, int iBranchID, DateTime dtFrom, DateTime dtTo)
        {
            String strQuery = String.Format(@"SELECT * FROM GLJournals 
                                                    WHERE FK_GLCostCenterID = {0} AND FK_BRBranchID = {1} 
                                                    AND (CONVERT(VARCHAR(20), [GLJournalDate], 112) >= CONVERT(VARCHAR(20),'{2}', 112))
                                                    AND (CONVERT(VARCHAR(20), [GLJournalDate], 112) <= CONVERT(VARCHAR(20),'{3}', 112))",
                                                    iCostCenterID, iBranchID, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"));

            return dal.GetDataSet(strQuery);
        }

        public void DeleteJournalByAccountIDAndPeriod(int iAccountID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"Delete FROM GLJournals 
                                                    WHERE (FK_GLDebitAccountID = {0} OR FK_GLCreditAccountID = {0})
                                                    AND GLJournalYear = {1} AND GLJournalPeriod = {2}",
                                                    iAccountID, iYear, iPeriod);

            dal.GetDataSet(strQuery);
        }

        public DataSet GetAllJournalFromDateToDate(DateTime fromDate, DateTime toDate)
        {
            string strQuery = string.Format("select * from GLJournals where  GLJournalAmt > 0 And GLJournalDate >= '{0}' and GLJournalDate <= '{1}'", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), String.Format("{0:yyyy/M/d HH:mm:ss}", toDate));

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllJournalByGLJournalPeriodAndGLJournalYear(int iPeriod, int iYear)
        {
            string strQuery = string.Format("select * from GLJournals where  GLJournalPeriod={0} and GLJournalYear={1}", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public void DeleteJournalByGLJournalPeriodAndGLJournalYear(int iPeriod, int iYear)
        {
            string strQuery = string.Format("DELETE GLJournals WHERE  GLJournalPeriod = {0} AND GLJournalYear = {1} AND GLJournalID NOT IN (SELECT GLJournalID FROM GLJournals WHERE GLJournalNo LIKE 'DK_CN%')", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
        }

        public void DeleteJournalByGLJournalPeriodAndGLJournalYear_OpeningBalance(int iPeriod, int iYear)
        {
            string strQuery = string.Format("DELETE GLJournals WHERE GLJournalPeriod = {0} AND GLJournalYear = {1} AND GLJournalNo LIKE 'DK_CN%'", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
        }

        public DataSet GetJournalByAccountIDFromDateToDate(DateTime fromDate, DateTime toDate, int iAccountID)
        {
            string strQuery = string.Format("select * from GLJournals where  GLJournalAmt > 0 And GLJournalDate >= '{0}' and GLJournalDate <= '{1}' And (FK_GLDebitAccountID = {2} Or FK_GLCreditAccountID = {2})", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), String.Format("{0:yyyy/M/d HH:mm:ss}", toDate), iAccountID);

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetJournalByAccountNoFromDateToDate(DateTime fromDate, DateTime toDate, String strAccountNo)
        {
            string strQuery = string.Format("select * from GLJournals where  GLJournalAmt > 0 And GLJournalDate >= '{0}' and GLJournalDate <= '{1}' And (FK_GLDebitAccountID In (Select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{2}%') Or FK_GLCreditAccountID In (Select GLAccountID from GLAccounts where AAStatus = 'Alive' and GLAccountNo like '{2}%')) ", String.Format("{0:yyyy/M/d HH:mm:ss}", fromDate), String.Format("{0:yyyy/M/d HH:mm:ss}", toDate), strAccountNo);

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        #region CostAccounting
        public DataSet GetAllJournalHasCostDistribution(DateTime dtFrom, DateTime dtTo)
        {
            String strRangeTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@" SELECT * FROM GLJournals WHERE FK_GLCostDistID > 0 AND {0}", strRangeTimeCond);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByCostDistAndCostCenter(DateTime dtFrom, DateTime dtTo)
        {
            String strRangeTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@"SELECT 
                                                GLAccounts.GLAccountID AS AccountID,
                                                GLAccounts.GLAccountNo AS AccountNo,
                                                GLAccounts.GLAccountName AS AccountName,
                                                GLCostCenters.GLCostCenterID AS CostCenterID,
                                                GLCostCenters.GLCostCenterNo AS CostCenterNo,
                                                GLCostCenters.GLCostCenterName AS CostCenterName,
                                                GLCostDists.GLCostDistID AS CostDistID,
                                                GLCostDists.GLCostDistNo AS CostDistNo,
                                                GLCostDists.GLCostDistName AS CostDistName,
                                                SUM(GLJournals.GLJournalAmt) AS JournalAmt

                                                FROM GLJournals, dbo.GLCostDists, dbo.GLCostCenters, dbo.GLAccounts

                                                WHERE GLJournals.FK_GLCostDistID = GLCostDistID
                                                AND GLJournals.FK_GLCostCenterID = GLCostCenterID
                                                AND GLJournals.FK_GLDebitAccountID = GLAccounts.GLAccountID
                                                AND GLAccounts.AAStatus = 'Alive'
                                                AND GLCostDists.AAStatus = 'Alive'
                                                AND GLCostCenters.AAStatus = 'Alive'
                                                AND {0}
                                                GROUP BY GLAccounts.GLAccountID ,
                                                GLAccounts.GLAccountNo ,
                                                GLAccounts.GLAccountName ,
                                                GLCostCenters.GLCostCenterID ,
                                                GLCostCenters.GLCostCenterNo,
                                                GLCostCenters.GLCostCenterName ,
                                                GLCostDists.GLCostDistID,
                                                GLCostDists.GLCostDistNo,
                                                GLCostDists.GLCostDistName
                                                ", strRangeTimeCond);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllJournalByAccountAndCostDistribution(int iAccountID, int iCostDistID, DateTime dtFrom, DateTime dtTo)
        {
            String strRangeTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@" SELECT * 
                                            FROM GLJournals 
                                            WHERE FK_GLCostDistID > 0 
                                            AND {0}
                                            AND FK_GLDebitAccountID = {1}
                                            AND FK_GLCostDistID = {2}", strRangeTimeCond, iAccountID, iCostDistID);

            return GetDataSet(strQuery);
        }
        #endregion

        #region ProfitAccounting
        public DataSet GetAllJournalHasProfitDistribution(DateTime dtFrom, DateTime dtTo)
        {
            String strRangeTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@" SELECT * FROM GLJournals WHERE FK_GLProfitDistID > 0 AND {0}", strRangeTimeCond);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllJournalByAccountAndProfitDistribution(int iAccountID, int iProfitDistID, DateTime dtFrom, DateTime dtTo)
        {
            String strRangeTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@" SELECT * 
                                            FROM GLJournals 
                                            WHERE FK_GLProfitDistID > 0 
                                            AND {0}
                                            AND FK_GLDebitAccountID = {1}
                                            AND FK_GLProfitDistID = {2}", strRangeTimeCond, iAccountID, iProfitDistID);

            return GetDataSet(strQuery);
        }
        #endregion

        public DataSet GetAllJournalByObjectType(int iAccountID, ObjectType objectType, int ObjectID, DateTime dtFrom, DateTime dtTo, int iHomeCurrencyID)
        {
            String strTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            string strAccount = "1";
            if (iAccountID > 0)
                strAccount = String.Format("(FK_GLDebitAccountID = {0} OR FK_GLCreditAccountID = {0})", iAccountID);
            String strQuery = String.Format(@"SELECT * FROM GLJournals 
                                                WHERE {0}
                                                        AND {1}", strAccount, strTimeCond);

            if (objectType == ObjectType.Employee)
                strQuery += String.Format(" AND (FK_HREmployeeID = {0} OR FK_HREmployeeIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Customer)
                strQuery += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Supplier)
                strQuery += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0} OR 0={0})", ObjectID);
            else if (ObjectID > 0 && ObjectID != iHomeCurrencyID)
            {
                if (ObjectID > 0 && iHomeCurrencyID != ObjectID)
                    strQuery += String.Format(" AND FK_GECurrencyID = {0}", ObjectID);
            }
            return GetDataSet(strQuery);
        }

        public double GetSumAmtByObjectTypeByAccountType(AccountType accountType, int iAccountID, ObjectType objectType, int ObjectID, int iHomeCurrencyID, DateTime dtFrom, DateTime dtTo, bool bIgnoreBeginBalance)
        {
            String strTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM(GLJournalAmt) FROM GLJournals 
                                                WHERE {0}", strTimeCond);

            if (accountType == AccountType.Debit)
                strQuery += String.Format(" AND FK_GLDebitAccountID = {0}", iAccountID);
            else if (accountType == AccountType.Credit)
                strQuery += String.Format(" AND FK_GLCreditAccountID = {0}", iAccountID);

            if (objectType == ObjectType.Employee)
                strQuery += String.Format(" AND (FK_HREmployeeID = {0} OR FK_HREmployeeIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Customer)
                strQuery += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Supplier)
                strQuery += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0} OR 0={0})", ObjectID);
            else if (ObjectID > 0 && ObjectID != iHomeCurrencyID)
                strQuery += String.Format(" AND (FK_GECurrencyID = {0} OR 0={0})", ObjectID);
            if (bIgnoreBeginBalance == true)
            {
                strQuery += String.Format(@" AND GLJournalPeriod <> 0");
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public double GetSumFAmtByObjectTypeByAccountType(AccountType accountType, int iAccountID, ObjectType objectType, int ObjectID, DateTime dtFrom, DateTime dtTo, int iHomeCurrencyID, bool bIgnoreBeginBalance)
        {
            String strTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT SUM(GLJournalFAmt) FROM GLJournals 
                                                WHERE {0}", strTimeCond);

            if (accountType == AccountType.Debit)
                strQuery += String.Format(" AND FK_GLDebitAccountID = {0}", iAccountID);
            else if (accountType == AccountType.Credit)
                strQuery += String.Format(" AND FK_GLCreditAccountID = {0}", iAccountID);

            if (objectType == ObjectType.Employee)
                strQuery += String.Format(" AND (FK_HREmployeeID = {0} OR FK_HREmployeeIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Customer)
                strQuery += String.Format(" AND (FK_ARCustomerID = {0} OR FK_ARCustomerIDCredit = {0} OR 0={0})", ObjectID);
            else if (objectType == ObjectType.Supplier)
                strQuery += String.Format(" AND (FK_APSupplierID = {0} OR FK_APSupplierIDCredit = {0} OR 0={0})", ObjectID);
            else if (ObjectID > 0 && ObjectID != iHomeCurrencyID)
            {
                if (ObjectID > 0 && iHomeCurrencyID != ObjectID)
                    strQuery += String.Format(" AND FK_GECurrencyID = {0}", ObjectID);
            }
            if (bIgnoreBeginBalance == true)
            {
                strQuery += String.Format(@" AND GLJournalPeriod <> 0");
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllJournalsBySourceLedger(String strSourceLedger, int iPeriod, int iYear)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("GLSourceLedger = '{0}' ", strSourceLedger);
            strQuery += String.Format("AND GLJournalYear = {0} ", iYear);
            strQuery += String.Format("AND GLJournalPeriod = {0} ", iPeriod);

            return GetDataSet(strQuery);
        }

        public double GetSumAmt(String strSelect, String strWhereCond, DateTime dtFrom, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT {0} FROM GLJournals WHERE  {1} AND {2}", strSelect, strTimeCond, strWhereCond);

            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllJournalsByCreditAccountIDAndDocNoAndSourceLedger(int iCreditAccountID, String strDocumentNo, String strSourceLedger, int iYear, int iPeriod)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE ");
            strQuery += String.Format("FK_GLCreditAccountID = {0}", iCreditAccountID);
            strQuery += String.Format("AND GLJournalDocumentNo = '{0}' ", strDocumentNo);
            strQuery += String.Format("AND GLSourceLedger = '{0}' ", strSourceLedger);
            strQuery += String.Format("AND GLJournalYear = {0} ", iYear);
            strQuery += String.Format("AND GLJournalPeriod = {0}", iPeriod);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllJournalsByDebitAccount(int iDebitAccountID, bool IncludeChildAccount)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE FK_GLDebitAccountID = {0}", iDebitAccountID);

            if (IncludeChildAccount == true)
            {
                GLAccountsInfo Account = (GLAccountsInfo)new GLAccountsController().GetObjectByID(iDebitAccountID);
                if (Account != null)
                {
                    strQuery += String.Format(@" OR FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccountNo LIKE '{0}%')", Account.GLAccountNo);
                }
            }

            DataSet ds = GetDataSet(strQuery);
            return ds;
        }

        #region Get All By DebitNote Account --Vinh --27/11/2012

        public DataSet GetAllDataByDebitAccount(int iDebitAccountID)
        {
            String str = String.Format(@"SELECT * FROM GLJournals WHERE FK_GLDebitAccountID = {0}", iDebitAccountID);
            return dal.GetDataSet(str);
        }

        #endregion

        public DataSet GetAllJournalsDocumentNoAndSubLedger(String strDocumentNo, String strSubLedger)
        {
            String strQuery = String.Format("SELECT * FROM GLJournals WHERE GLJournalDocumentNo = '{0}' AND GLJournalSubLedger = '{1}'", strDocumentNo, strSubLedger);
            DataSet ds = GetDataSet(strQuery);
            return ds;
        }
        /// <summary>
        /// Trung - 08-01-2013
        /// </summary>
        /// <param name="iPeriod"></param>
        /// <param name="iYear"></param>
        /// <returns></returns>
        public List<string> GetListAccountNo_DauKi_CongNo(int iPeriod, int iYear)
        {
            string strQuery = string.Format("SELECT GLAccountNo FROM GLAccounts WHERE AAStatus='Alive' AND  (GLAccountID IN (SELECT FK_GLDebitAccountID FROM GLJournals where  GLJournalPeriod={0} and GLJournalYear={1} and GLJournalNo LIKE 'DK_CN%') OR GLAccountID IN (SELECT FK_GLCreditAccountID FROM GLJournals where  GLJournalPeriod={0} and GLJournalYear={1} and GLJournalNo LIKE 'DK_CN%'))", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            List<string> lst = new List<string>();
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if (dr[0] != DBNull.Value && !lst.Contains(dr[0].ToString()))
                        lst.Add(dr[0].ToString());
                }
            }

            return lst;
        }

        public DataSet GetAllJournalByAccountNoNotInLandedCost(AccountType type, String strAccountNo, DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM GLJournals WHERE
                                                GLJournalDocumentNo NOT IN 
                                                    (SELECT DocNo FROM APLandedCostSourceItems 
                                                        WHERE DocNo <> NULL AND FK_APLandedCostID IN (SELECT APLandedCostID FROM APLandedCosts WHERE APLandedCosts.AAStatus = 'Alive') )
                                                AND {0}AND GLSourceLedger IN ('Outpmt','VoucherOrg', 'PInvoiceReceipt', 'PInvoiceImportReceipt')", strDateCond);

            if (type == AccountType.Debit)
                strQuery += String.Format(@" AND FK_GLDebitAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccounts.AAStatus = 'ALive' AND GLAccountNo like '{0}%')", strAccountNo);
            else if (type == AccountType.Credit)
                strQuery += String.Format(@" AND FK_GLCreditAccountID IN (SELECT GLAccountID FROM GLAccounts WHERE GLAccounts.AAStatus = 'ALive' AND GLAccountNo like '{0}%')", strAccountNo);


            return GetDataSet(strQuery);

        }

        public DataSet GetAllJournals(DateTime dtFrom, DateTime dtTo)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * FROM GLJournals WHERE {0}", strDateCond);

            return GetDataSet(strQuery);

        }


        /// <summary>
        /// Trung - 09-01-2013
        /// </summary>
        /// <param name="AccountID"></param>
        /// <param name="CostCenterID"></param>
        /// <param name="CostDistID"></param>
        /// <param name="accountType"></param>
        /// <param name="dtFrom"></param>
        /// <param name="dtTo"></param>
        /// <returns></returns>
        public DataSet GetAllJournalByAccount_CostCenter_CostDist_AccountTypeInRange(int AccountID, int CostCenterID, int CostDistID, AccountType accountType, DateTime dtFrom, DateTime dtTo)
        {
            String strTimeCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);
            String strAccount = "";
            if (accountType == AccountType.Debit)
                strAccount = String.Format("FK_GLDebitAccountID={0}", AccountID);
            else
                strAccount = String.Format("FK_GLCreditAccountID={0}", AccountID);
            String strQuery = String.Format(@"SELECT * FROM GLJournals WHERE  {0} AND {1} AND GLJournalAmt > 0  AND FK_GLCostCenterID={2} AND FK_GLCostDistID={3}", strTimeCond, strAccount, CostCenterID, CostDistID);

            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataByLastestChildAccountAndObjectType(string strAccountNo1, string strAccountNo2, ObjectType objectType, int iObjectID)
        {
            string strColumn = "";
            string str = "";
            if (objectType == ObjectType.Supplier)
                strColumn = "FK_APSupplierID";
            else if (objectType == ObjectType.Customer)
                strColumn = "FK_ARCustomerID";
            else if (objectType == ObjectType.Employee)
                strColumn = "FK_HREmployeeID";

            if (iObjectID == 0)
                str = String.Format(@"{0} <> 0", strColumn);
            else
                str = String.Format(@"({0} = {1} OR {0}Credit = {1})", strColumn, iObjectID);

            string strQuery = String.Format(@"SELECT DISTINCT FK_GLDebitAccountID,{2} 
                                                    FROM dbo.GLJournals 
                                                    WHERE FK_GLDebitAccountID IN (  SELECT GLAccountID FROM GLAccounts 
                                                                                                            WHERE AAStatus='Alive' 
                                                                                                            AND (GLAccountNo LIKE '{0}%' OR GLAccountNo LIKE '{1}%')
                                                                                                            AND GLAccountID NOT IN (SELECT FK_GLAccountParentID FROM GLAccounts WHERE AAStatus = 'Alive'))
                                                        AND {3}
                                            UNION ALL

                                            SELECT DISTINCT FK_GLCreditAccountID,{2} 
                                                    FROM dbo.GLJournals 
                                                    WHERE FK_GLCreditAccountID IN (  SELECT GLAccountID FROM GLAccounts 
                                                                                                            WHERE AAStatus='Alive' 
                                                                                                            AND (GLAccountNo LIKE '{0}%' OR GLAccountNo LIKE '{1}%')
                                                                                                            AND GLAccountID NOT IN (SELECT FK_GLAccountParentID FROM GLAccounts WHERE AAStatus = 'Alive'))
                                                           AND {3}", strAccountNo1, strAccountNo2, strColumn, str);
            return GetDataSet(strQuery);
        }


        public void DeleteJournalByDocNo(string strDocNo)
        {
            if (strDocNo.Length == 0)
                return;
            String strQuery = String.Format(@"DELETE GLJournals WHERE GLJournalDocumentNo='{0}'", strDocNo);
            GetDataSet(strQuery);
        }

        public DataSet GetAllDataInRangeByObjectNameAndPostStatus(string strTableName, String strColumnType, String strTypeValue, DateTime dtFrom, DateTime dtTo, string strPostStatus)
        {
            String strPrefix = strTableName.Remove(strTableName.Length - 1);
            String strDate = DALUtil.GenerateBeetween(String.Format("{0}Date", strPrefix), dtFrom, dtTo);
            String strQuery = String.Format(@"SELECT * 
                                                FROM {0} 
                                                WHERE AAStatus='Alive' 
                                                AND (AAPostStatus='{1}' OR ''='{1}' )
                                                AND {2} ", strTableName, strPostStatus, strDate);
            if (strColumnType.Length > 0)
                strQuery += String.Format(@" AND {0}='{1}'", strColumnType, strTypeValue);

            return GetDataSet(strQuery);
        }
        public DataSet GetDataInitAsset(int iAssetID = 0, string sAccSource = "", string sNotAccSource = "", bool bGetAllJrnl = false)
        {
            /*string strSQL = @"SELECT      GLAccountID INTO #tAssetAccIDs
    FROM    GLAccounts 
    WHERE   GLAccountTypeCombo = 'FA' 
            AND AAStatus = 'Alive'

SELECT      GLAccountID INTO #tAssetSrcAccIDs
    FROM    GLAccounts 
    WHERE   AAStatus = 'Alive' 
            AND (GLAccountNo LIKE '{0}%')
            AND ('{1}' = '' OR NOT (GLAccountNo LIKE '{1}%'))


SELECT  GLJournalID as FK_GLJournalID
        ,FK_FAAssetID
        ,GLJournalAmt as FAAssetInitJournalOrgAmt
        ,GLJournalFAmt as FAAssetInitJournalOrgFAmt
        ,GLJournalAmt - CASE WHEN b.FK_GLJournalID is null 
                            THEN 0 ELSE b.FAAssetInitJournalAmt 
                        END
                       - CASE WHEN e.FK_GLJournalID is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalAmt
                        END as FAAssetInitJournalRAmt
        ,GLJournalFAmt - CASE WHEN b.FK_GLJournalID is null 
                            THEN 0 ELSE b.FAAssetInitJournalFFAmt 
                        END 
                       - CASE WHEN e.FK_GLJournalID is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalFAmt 
                        END as FAAssetInitJournalRFAmt
INTO #tKQ
FROM    GLJournals a
        INNER JOIN  #tAssetAccIDs c ON a.FK_GLDebitAccountID = c.GLAccountID
        INNER JOIN  #tAssetSrcAccIDs d ON a.FK_GLCreditAccountID = d.GLAccountID AND GLSourceLedger <> 'AssetUpgrade'
        LEFT JOIN   (SELECT FK_GLJournalID
                            ,SUM(FAAssetInitJournalAmt) as FAAssetInitJournalAmt
                            ,SUM(FAAssetInitJournalFAmt) as FAAssetInitJournalFFAmt
                        FROM FAAssetInitJournals
                        WHERE AAStatus = 'Alive' AND FK_FAAssetID <> {2}
                        GROUP BY FK_GLJournalID
                    ) b ON a.GLJournalID = b.FK_GLJournalID
        LEFT JOIN   (SELECT FK_GLJournalID
                            ,SUM(FAAssetUpgradeInitJournalAmt) as FAAssetUpgradeInitJournalAmt
                            ,SUM(FAAssetUpgradeInitJournalFAmt) as FAAssetUpgradeInitJournalFAmt
                        FROM FAAssetUpgradeInitJournals
                        WHERE AAStatus = 'Alive'
                        GROUP BY FK_GLJournalID
                    ) e ON a.GLJournalID = e.FK_GLJournalID

if {3} = 1
BEGIN
    SELECT  a.* 
        INTO #tKQ2
    FROM GLJournals a 
        INNER JOIN #tKQ b ON a.GLJournalID = b.FK_GLJournalID 
            AND FAAssetInitJournalRAmt > 0
    UPDATE #tKQ2 
        SET AASelected = 0
            ,GLJournalItemQty = GLJournalAmt
            ,GLJournalItemUPrice = GLJournalFAmt
            ,GLJournalAmt = FAAssetInitJournalRAmt
            ,GLJournalFAmt = FAAssetInitJournalRFAmt
            ,GLJournalItemAmt = FAAssetInitJournalRAmt
            ,GLJournalTempAmt = FAAssetInitJournalRFAmt
    FROM #tKQ2 a
        INNER JOIN #tKQ b ON a.GLJournalID = b.FK_GLJournalID 
    SELECT * 
        FROM #tKQ2
    DROP TABLE #tKQ2
END
ELSE
    SELECT  CAST(CASE WHEN FK_FAAssetID = {2} AND {2} > 0 THEN 1 ELSE 0 END as bit) as AASelected,*
            ,FAAssetInitJournalRAmt as FAAssetInitJournalAmt
            ,FAAssetInitJournalRFAmt as FAAssetInitJournalFAmt
    FROM #tKQ 
    WHERE FAAssetInitJournalRAmt > 0

DROP TABLE #tKQ 
DROP TABLE #tAssetAccIDs
DROP TABLE #tAssetSrcAccIDs";*/
            //Thang edit - 27/10/2015 lấy tập hợp các chứng từ theo tổng của từng chứng từ và không lấy theo từng chi tiết của chứng từ
            string strSQLQuery = @"SELECT      GLAccountID INTO #tAssetAccIDs
    FROM    GLAccounts 
    WHERE   GLAccountTypeCombo = 'FA' 
            AND AAStatus = 'Alive'

SELECT      GLAccountID INTO #tAssetSrcAccIDs
    FROM    GLAccounts 
    WHERE   AAStatus = 'Alive' 
            AND (GLAccountNo LIKE '{0}%')
            AND ('{1}' = '' OR NOT (GLAccountNo LIKE '{1}%'))

SELECT  a.GLJournalDocumentNo
        ,a.GLSourceLedger
        ,FK_FAAssetID
        ,MAX(a.GLJournalID) as FK_GLJournalID
        ,SUM(GLJournalAmt) as FAAssetInitJournalOrgAmt
        ,SUM(GLJournalFAmt) as FAAssetInitJournalOrgFAmt
        ,CAST(0 as float) as FAAssetInitJournalRAmt
        ,CAST(0 as float) as FAAssetInitJournalRFAmt
INTO #tKQ
FROM    GLJournals a
        INNER JOIN  #tAssetAccIDs c ON a.FK_GLDebitAccountID = c.GLAccountID
        INNER JOIN  #tAssetSrcAccIDs d ON a.FK_GLCreditAccountID = d.GLAccountID AND GLSourceLedger <> 'AssetUpgrade'
GROUP BY a.GLJournalDocumentNo
        ,a.GLSourceLedger
        ,FK_FAAssetID

UPDATE #tKQ SET
        FAAssetInitJournalRAmt = FAAssetInitJournalOrgAmt - CASE WHEN b.GLJournalDocumentNo is null 
                            THEN 0 ELSE b.FAAssetInitJournalAmt 
                        END
                       - CASE WHEN e.GLJournalDocumentNo is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalAmt
                        END
        ,FAAssetInitJournalRFAmt = FAAssetInitJournalOrgFAmt - CASE WHEN b.GLJournalDocumentNo is null 
                            THEN 0 ELSE b.FAAssetInitJournalFFAmt 
                        END 
                       - CASE WHEN e.GLJournalDocumentNo is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalFAmt 
                        END
FROM    #tKQ a
        LEFT JOIN   (SELECT GLJournalDocumentNo,GLSourceLedger
                            ,SUM(FAAssetInitJournalAmt) as FAAssetInitJournalAmt
                            ,SUM(FAAssetInitJournalFAmt) as FAAssetInitJournalFFAmt
                        FROM FAAssetInitJournals
                        WHERE AAStatus = 'Alive' AND FK_FAAssetID <> {2}
                        GROUP BY GLJournalDocumentNo,GLSourceLedger
                    ) b ON a.GLJournalDocumentNo = b.GLJournalDocumentNo AND a.GLSourceLedger = b.GLSourceLedger
        LEFT JOIN   (SELECT GLJournalDocumentNo,GLSourceLedger
                            ,SUM(FAAssetUpgradeInitJournalAmt) as FAAssetUpgradeInitJournalAmt
                            ,SUM(FAAssetUpgradeInitJournalFAmt) as FAAssetUpgradeInitJournalFAmt
                        FROM FAAssetUpgradeInitJournals
                        WHERE AAStatus = 'Alive'
                        GROUP BY GLJournalDocumentNo,GLSourceLedger
                    ) e ON a.GLJournalDocumentNo = e.GLJournalDocumentNo AND a.GLSourceLedger = e.GLSourceLedger

if {3} = 1
BEGIN
    SELECT  a.* 
        INTO #tKQ2
    FROM GLJournals a 
        INNER JOIN #tKQ b ON a.GLJournalDocumentNo = b.GLJournalDocumentNo AND a.GLSourceLedger = b.GLSourceLedger
            AND FAAssetInitJournalRAmt > 0
    UPDATE #tKQ2 
        SET AASelected = 0
            ,GLJournalItemQty = GLJournalAmt
            ,GLJournalItemUPrice = GLJournalFAmt
            ,GLJournalAmt = FAAssetInitJournalRAmt
            ,GLJournalFAmt = FAAssetInitJournalRFAmt
            ,GLJournalItemAmt = FAAssetInitJournalRAmt
            ,GLJournalTempAmt = FAAssetInitJournalRFAmt
    FROM #tKQ2 a
        INNER JOIN #tKQ b ON a.GLJournalID = b.FK_GLJournalID 
    SELECT * 
        FROM #tKQ2
    DROP TABLE #tKQ2
END
ELSE
    SELECT  CAST(CASE WHEN FK_FAAssetID = {2} AND {2} > 0 THEN 1 ELSE 0 END as bit) as AASelected,*
            ,FAAssetInitJournalRAmt as FAAssetInitJournalAmt
            ,FAAssetInitJournalRFAmt as FAAssetInitJournalFAmt
    FROM #tKQ 
    WHERE FAAssetInitJournalRAmt > 0

DROP TABLE #tKQ 
DROP TABLE #tAssetAccIDs
DROP TABLE #tAssetSrcAccIDs";
            String strQuery = String.Format(strSQLQuery
 , sAccSource.Replace(",", "%' OR GLAccountNo LIKE'")
 , sNotAccSource.Replace(",", "%' OR GLAccountNo LIKE'")
 , iAssetID
 , Convert.ToSByte(bGetAllJrnl)
 );
            return GetDataSet(strQuery);
        }
        public bool IsUseInitAssset(string strLastPostDocumentNo, string strSourceLedger)
        {
            return IsUseInTable(strLastPostDocumentNo, strSourceLedger, "FAAssetInitJournals");
        }
        public bool IsUseUnionAssset(string strLastPostDocumentNo, string strSourceLedger)
        {
            return IsUseInTable(strLastPostDocumentNo, strSourceLedger, "GLUnionAssetConstructionItems");
        }
        public DataSet GetDataInitUpgradeAsset(int iAssetID, bool bGetAllJrnl = false)
        {
            String strQuery = String.Format(@"
DECLARE @iAssetID int
DECLARE @bAllJrnl bit
SET @iAssetID = {0}
SET @bAllJrnl = {1}
SELECT      GLAccountID INTO #tAssetAccIDs
    FROM    GLAccounts a INNER JOIN FAAssets b ON a.GLAccountID = b.FK_GLAssetAccountID
            AND b.FAAssetID = @iAssetID AND b.AAStatus = 'Alive'
    WHERE   a.AAStatus = 'Alive'


SELECT  GLJournalID as FK_GLJournalID
        ,FK_FAAssetID
        ,GLJournalAmt as FAAssetUpgradeInitJournalOrgAmt
        ,GLJournalFAmt as FAAssetUpgradeInitJournalOrgFAmt
        ,GLJournalAmt - CASE WHEN b.FK_GLJournalID is null 
                            THEN 0 ELSE b.FAAssetInitJournalAmt 
                        END
                       - CASE WHEN e.FK_GLJournalID is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalAmt
                        END as FAAssetUpgradeInitJournalRAmt
        ,GLJournalFAmt - CASE WHEN b.FK_GLJournalID is null 
                            THEN 0 ELSE b.FAAssetInitJournalFFAmt 
                        END 
                       - CASE WHEN e.FK_GLJournalID is null 
                            THEN 0 ELSE e.FAAssetUpgradeInitJournalFAmt 
                        END as FAAssetUpgradeInitJournalRFAmt
INTO #tKQ
FROM    GLJournals a
        INNER JOIN  #tAssetAccIDs c ON a.FK_GLDebitAccountID = c.GLAccountID AND GLSourceLedger <> 'AssetUpgrade'
        LEFT JOIN   (SELECT FK_GLJournalID
                            ,SUM(FAAssetInitJournalAmt) as FAAssetInitJournalAmt
                            ,SUM(FAAssetInitJournalFAmt) as FAAssetInitJournalFFAmt
                        FROM FAAssetInitJournals
                        WHERE AAStatus = 'Alive'
                        GROUP BY FK_GLJournalID
                    ) b ON a.GLJournalID = b.FK_GLJournalID
        LEFT JOIN   (SELECT FK_GLJournalID
                            ,SUM(FAAssetUpgradeInitJournalAmt) as FAAssetUpgradeInitJournalAmt
                            ,SUM(FAAssetUpgradeInitJournalFAmt) as FAAssetUpgradeInitJournalFAmt
                        FROM FAAssetUpgradeInitJournals
                        WHERE AAStatus = 'Alive'
                        GROUP BY FK_GLJournalID
                    ) e ON a.GLJournalID = e.FK_GLJournalID

if @bAllJrnl = 1
BEGIN
    SELECT  a.* 
        INTO #tKQ2
    FROM GLJournals a 
        INNER JOIN #tKQ b ON a.GLJournalID = b.FK_GLJournalID 
            AND FAAssetUpgradeInitJournalRAmt > 0
    UPDATE #tKQ2 
        SET AASelected = 0
            ,GLJournalItemQty = GLJournalAmt
            ,GLJournalItemUPrice = GLJournalFAmt
            ,GLJournalAmt = FAAssetUpgradeInitJournalRAmt
            ,GLJournalFAmt = FAAssetUpgradeInitJournalRFAmt
            ,GLJournalItemAmt = FAAssetUpgradeInitJournalRAmt
            ,GLJournalTempAmt = FAAssetUpgradeInitJournalRFAmt
    FROM #tKQ2 a
        INNER JOIN #tKQ b ON a.GLJournalID = b.FK_GLJournalID 
    SELECT * 
        FROM #tKQ2
    DROP TABLE #tKQ2
END
ELSE
    SELECT  CAST(CASE WHEN FK_FAAssetID = @iAssetID AND @iAssetID > 0 THEN 1 ELSE 0 END as bit) as AASelected,*
            ,FAAssetUpgradeInitJournalRAmt as FAAssetUpgradeInitJournalAmt
            ,FAAssetUpgradeInitJournalRFAmt as FAAssetUpgradeInitJournalFAmt
    FROM #tKQ 
    WHERE FAAssetUpgradeInitJournalRAmt > 0

DROP TABLE #tKQ 
DROP TABLE #tAssetAccIDs
"
 , iAssetID
 , Convert.ToSByte(bGetAllJrnl)
 );
            return GetDataSet(strQuery);
        }
        public bool IsUseInitAsssetUpgrade(string strLastPostDocumentNo, string strSourceLedger)
        {
            return IsUseInTable(strLastPostDocumentNo, strSourceLedger, "FAAssetUpgradeInitJournals");
        }
        public bool IsUseInitEquipment(string strLastPostDocumentNo, string strSourceLedger)
        {
            return IsUseInTable(strLastPostDocumentNo, strSourceLedger, "GLEquipmentInitJournals");
        }
        public bool IsUseInTable(string strLastPostDocumentNo, string strSourceLedger, string sTable, string sFieldNameDocNo = "GLJournalDocumentNo", string sFieldNameSL = "GLSourceLedger")
        {
            String strQuery = String.Format(@"
SELECT TOP 1 1 
    FROM {2} a 
    -- INNER JOIN GLJournals b ON a.FK_GLJournalID = b.GLJournalID 
    WHERE
            {3} = '{0}'
            AND {4} = '{1}'
", strLastPostDocumentNo, strSourceLedger, sTable, sFieldNameDocNo, sFieldNameSL);
            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return true;

            return false;
        }
        public Boolean DeleteDataBySubLedgerANDDate_Import(String strSubLedger)
        {
            try
            {
                String str = String.Format(@"DELETE dbo.GLJournals
                                            WHERE GLJournalSubLedger LIKE '{0}'
                                            ", strSubLedger);
                dal.GetDataSet(str);
            }
            catch
            {
                return false;
            }

            return true;
        }

        public Boolean DeleteDataBySubLedgerANDDate(String strSubLedger, String strJournalDocumentNo, DateTime dtFrom, DateTime dtTo)
        {
            try
            {
                String str = String.Format(@"DELETE dbo.GLJournals
                                            WHERE GLJournalSubLedger LIKE '{0}' AND GLJournalDocumentNo = '{1}'
                                            AND CONVERT(VARCHAR, GLJournalDate, 112) >= '{2}'
                                            AND CONVERT(VARCHAR, GLJournalDate, 112) <= '{3}'
                                            ", strSubLedger, strJournalDocumentNo, dtFrom.ToString("yyyyMMdd"), dtTo.ToString("yyyyMMdd"));
                dal.GetDataSet(str);
            }
            catch
            {
                return false;
            }

            return true;
        }

        public List<String> GetAllSubLedgers()
        {
            List<String> lstAllSubLedgers = new List<String>();
            String str = String.Format(@"SELECT DISTINCT GLJournalSubLedger FROM dbo.GLJournals
                                        WHERE GLJournalSubLedger IS NOT NULL
                                        OR GLJournalSubLedger != ''");
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        String strSubLedger = Convert.ToString(dr[0]);
                        if (String.IsNullOrEmpty(strSubLedger)) continue;
                        lstAllSubLedgers.Add(strSubLedger);
                    }
                    catch { }
                }
            }
            return lstAllSubLedgers;
        }

        public bool IsCheckJournalUseInitAssset(string strSourceLedger)
        {
            String strQuery = String.Format(@"
                                                SELECT TOP 1 1 
                                                    FROM FAAssetInitJournals a
                                                        INNER JOIN GLJournals b ON a.FK_GLJournalID = b.GLJournalID 
                                                              AND GLJournalSubLedger = '{0}'
", strSourceLedger);
            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return true;

            return false;
        }
        public bool IsCheckJournalUseUnionAssset(string strSourceLedger)
        {
            String strQuery = String.Format(@"
                                                SELECT TOP 1 1 
                                                    FROM GLUnionAssetConstructionItems a
                                                        INNER JOIN GLJournals b ON a.FK_GLJournalID = b.GLJournalID 
                                                              AND GLJournalSubLedger = '{0}'
", strSourceLedger);
            DataSet ds = GetDataSet(strQuery);

            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return true;

            return false;
        }

        //V.Hung add 26/08/2015 
        public bool IsUseInitCostPrepaid(string strLastPostDocumentNo, string strSourceLedger)
        {
            return IsUseInTable(strLastPostDocumentNo, strSourceLedger, "GLCostAllocates", "GLCostAllocateDocNo", "GLCostAllocateSourceLedger");
        }
        //Thang add 3/12/2015 kiem tra 1 chứng từ đã tồn tại trong GLJournal hay chưa
        public bool CheckDocExitsJournal(string docNo, string sourceLedger)
        {
            DataSet ds = GetDataByNoAndSourceLedger(docNo, sourceLedger);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;
        }
        public DataSet GetAllDataByCostCenterIDAndPeriod(int iPPCostCenterID, int iPeriod, int iYear, int pICProductID = 0)
        {
            string strSubQuery = string.Empty;
            if (pICProductID > 0)
            {
                strSubQuery = string.Format(@"
                                                 AND FK_ICProductID='{0}'
                                                ", pICProductID);
            }

            string strQuery = string.Format(@"
                                        SELECT  *
                                        FROM    dbo.GLJournals
                                        WHERE   GLJournalPeriod =  '{1}' 
                                                AND GLJournalYear = '{2}'
                                                AND FK_PPCostCenterID='{0}' 
                                                {3}       
                                                AND FK_GLDebitAccountID IN (
                                                                            SELECT  FK_GLAccountID 
                                                                            FROM    dbo.PPCostFactorItems )                                    
                                        ", iPPCostCenterID, iPeriod, iYear, strSubQuery);

            return GetDataSet(strQuery);
        }
        public DataSet GetDataInitAgreement(int iLoanAgreementID = 0)
        {
            string strWhere = string.Empty;
            if (iLoanAgreementID != 0)
                strWhere = string.Format("WHERE FK_GLLoanAgreementID = {0}", iLoanAgreementID);
            string strQuery = string.Format(@"
            IF OBJECT_ID('tempdb..#tAssetAccIDs') IS NOT NULL
                DROP TABLE #tAssetAccIDs
            IF OBJECT_ID('tempdb..#tKQ') IS NOT NULL
                DROP TABLE #tKQ
            
            SELECT  GLAccountID 
            INTO #tAssetAccIDs
            FROM    GLAccounts 
            WHERE   GLAccountTypeCombo = 'Loan' 
                    AND AAStatus = 'Alive'

            SELECT  GLJournalID as FK_GLJournalID
                    ,GLJournalNo
                    ,GLJournalDate
                    ,GLJournalHDesc
                    ,FK_GLDebitAccountID
                    ,FK_GLCreditAccountID
                    ,FK_APSupplierID
                    ,FK_GLLoanAgreementID
                    ,GLJournalAmt as GLLoanAgreementInitJournalOrgAmt
                    ,GLJournalFAmt as GLLoanAgreementInitJournalOrgFAmt
                    ,GLJournalAmt - CASE WHEN b.FK_GLJournalID is null 
                                        THEN 0 ELSE b.GLLoanAgreementInitJournalAmt 
                                    END as GLLoanAgreementInitJournalRAmt
                    ,GLJournalFAmt - CASE WHEN b.FK_GLJournalID is null 
                                        THEN 0 ELSE b.GLLoanAgreementInitJournalFAmt 
                                    END as GLLoanAgreementInitJournalRFAmt
            INTO #tKQ
            FROM    GLJournals a
                    INNER JOIN  #tAssetAccIDs c ON a.FK_GLCreditAccountID = c.GLAccountID AND GLJournalPeriod <> 0
                    LEFT JOIN   (SELECT FK_GLJournalID
                                        ,SUM(GLLoanAgreementInitJournalAmt) as GLLoanAgreementInitJournalAmt
                                        ,SUM(GLLoanAgreementInitJournalFAmt) as GLLoanAgreementInitJournalFAmt
                                    FROM GLLoanAgreementInitJournals
                                    WHERE AAStatus = 'Alive'
                                    GROUP BY FK_GLJournalID
                                ) b ON a.GLJournalID = b.FK_GLJournalID
            {0}

            SELECT  CAST(CASE WHEN FK_GLLoanAgreementID = 0 AND 0 > 0 THEN 1 ELSE 0 END as bit) as AASelected,*
                    ,GLLoanAgreementInitJournalRAmt as GLLoanAgreementInitJournalAmt
                    ,GLLoanAgreementInitJournalRFAmt as GLLoanAgreementInitJournalFAmt
            FROM #tKQ 
            WHERE GLLoanAgreementInitJournalRAmt > 0", strWhere);
            return GetDataSet(strQuery);
        }

        #region H.Việt - Lấy những tập phí và YTCP phát sinh trong tháng
        public DataSet GetAllCostCenterInGLJournalByPeriod(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"
                                        SELECT  *
                                        FROM    dbo.GLJournals
                                        WHERE   GLJournalPeriod = '{0}' 
                                                AND GLJournalYear = '{1}' 
                                                AND FK_PPCostCenterID<>0 
                                                AND FK_GLDebitAccountID IN (
                                                                            SELECT  FK_GLAccountID 
                                                                            FROM    dbo.PPCostFactorItems )
                                                
                                        ", iPeriod, iYear);

            return GetDataSet(strQuery);
        }
        #endregion

        public double GetDirectValueInPeriodAndByCostCenterID(int iPPCostCenterID, int iPeriod, int iYear, int iPPCostFactorID = 0)
        {
            string subQuery = string.Empty;
            if (iPPCostFactorID > 0)
            {
                subQuery = string.Format(@"WHERE FK_PPCostFactorID = {0}", iPPCostFactorID);
            }


            string strQuery = string.Format(@"
                            SELECT  ( SELECT    ISNULL(SUM(GLJournalAmt),0)
                                      FROM      GLJournals
                                      WHERE     GLJournalPeriod = '{2}'  
                                                AND GLJournalYear='{3}'
                                                AND FK_GLDebitAccountID <> 0
                                                --AND FK_GLDebitAccountID={2}
                                                AND FK_PPCostCenterID = '{0}'
                                                AND FK_GLDebitAccountID IN (
                                                SELECT  FK_GLAccountID 
                                                FROM    dbo.PPCostFactorItems 
                                                {1}
                                                 )
                                                                               
                                    )
                                    - ( SELECT  ISNULL(SUM(GLJournalAmt),0) 
                                        FROM    GLJournals
                                        WHERE   GLJournalPeriod = '{2}'
                                                AND GLJournalYear='{3}'
                                                AND FK_GLCreditAccountID <> 0
                                                --AND FK_GLCreditAccountID={3}
                                                AND FK_PPCostCenterID = '{0}'
                                               -- AND FK_GLCreditAccountID
                                                AND FK_GLCreditAccountID IN (
                                                SELECT  FK_GLAccountID 
                                                FROM    dbo.PPCostFactorItems
                                                {1} )
                                      ) AS total            
                            ", iPPCostCenterID, subQuery, iPeriod, iYear);
            double DirectValue = 0;
            DataSet ds = GetDataSet(strQuery);
            if (ds != null || ds.Tables[0].Rows.Count > 0)
            {
                DirectValue = Convert.ToDouble(ds.Tables[0].Rows[0]["total"]);
            }

            return DirectValue;
        }
        public void UpdateLoanAgreementInitJournal(int iJournalID, int iLoanAgreementID)
        {
            string strQuery = string.Format(@"UPDATE GLJournals SET FK_GLLoanAgreementID = {0} WHERE GLJournalID = {1}
                UPDATE GLVoucherItems SET FK_GLLoanAgreementID = {0}
                FROM GLVouchers a 
                JOIN GLVoucherItems b ON a.GLVoucherID = b.FK_GLVoucherID AND b.AAStatus = 'Alive'
                JOIN GLJournals c ON a.GLVoucherNo = c.GLJournalDocumentNo AND a.AAStatus = 'Alive' AND GLVoucherItemID = GLJournalDocumentItemID
                WHERE GLJournalID = {1}
                        ", iLoanAgreementID, iJournalID);
            RunQuery(strQuery);
        }
        public double GetAmtTotByPPCostCenterID(int pPPCostCenterID, int pPeriod, int pYear, int pGLDebitAccountID = 0)
        {
            string subQuery = string.Empty;
            if (pGLDebitAccountID > 0)
            {
                subQuery = string.Format("AND FK_GLDebitAccountID={0} ", pGLDebitAccountID);
            }
            string strQuery = string.Format(@"
                                        SELECT  SUM(GLJournalAmt)
                                        FROM    dbo.GLJournals
                                        WHERE   GLJournalPeriod =  {1}
                                                AND GLJournalYear = {2}
                                                AND FK_PPCostCenterID={0}  
                                                     {3}             
                                                AND FK_GLDebitAccountID IN (
                                                                            SELECT  FK_GLAccountID 
                                                                            FROM    dbo.PPCostFactorItems )                                      
                                        ", pPPCostCenterID, pPeriod, pYear, subQuery);


            DataSet ds = GetDataSet(strQuery);
            double dGLJournAmt = 0;
            if (ds != null)
            {
                if (ds.Tables[0].Rows.Count > 0 || ds.Tables[0].Rows[0][0] == null)
                {
                    dGLJournAmt = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
                }
            }
            return dGLJournAmt;
        }

        //H.Việt - Lấy những sản phẩm phát sinh trong kỳ nhưng không có nhập kho hoặc dở dang - 2017.14.04
        public DataSet GetProductNotInICReceiptAndInCompleteStatistic(int pPeriod, int pYear, string pInCompleteStatistcModuleName, string pICRecetipModulName)
        {
            string strQuery = string.Format(@"
                                             IF OBJECT_ID('tempdb..#table') IS NOT NULL
                                            DROP TABLE #table;
	                                                                                        --Lấy thông tin tổng hợp của dở dang đầu kỳ và nhập kho
                                            SELECT ICReceiptItems.FK_ICProductID FK_ICProductID ,
                                                ICReceiptItems.FK_PPCostCenterID FK_PPCostCenterID ,
                                                0 AS PPProductionCostingCalcResultAmtTot ,
                                                ICReceiptItems.ICReceiptItemQty PPProductionCostingCalcResultQty ,
                                                ( SELECT    ISNULL(SUM(PPInCompleteStatisticItemQty), 0) PPInCompleteStatisticItemQty
                                                    FROM      dbo.PPInCompleteStatisticItems
                                                    WHERE     FK_PPInCompleteStatisticItemParentID IN (
                                                            SELECT  PPInCompleteStatisticItemID
                                                            FROM    dbo.PPInCompleteStatisticItems
                                                            WHERE   FK_PPInCompleteStatisticID IN (
                                                                    SELECT  PPInCompleteStatisticID
                                                                    FROM    dbo.PPInCompleteStatistics
                                                                    WHERE   MONTH(PPInCompleteStatisticDate) = {0}
                                                                            AND YEAR(PPInCompleteStatisticDate) = {1}
                                                                            AND AAModule = '{2}'
                                                                            AND AAStatus = 'Alive' )
                                                                    AND FK_ICProductID = ICReceiptItems.FK_ICProductID
                                                                    AND FK_PPCostCenterID = ICReceiptItems.FK_PPCostCenterID )
                                                ) AS PPProductionCostingCalcResultOBWIPQty ,
                                                ( SELECT    ISNULL(SUM(PPInCompleteStatisticItemAmt), 0) PPInCompleteStatisticItemAmt
                                                    FROM      dbo.PPInCompleteStatisticItems
                                                    WHERE     FK_PPInCompleteStatisticItemParentID IN (
                                                            SELECT  PPInCompleteStatisticItemID
                                                            FROM    dbo.PPInCompleteStatisticItems
                                                            WHERE   FK_PPInCompleteStatisticID IN (
                                                                    SELECT  PPInCompleteStatisticID
                                                                    FROM    dbo.PPInCompleteStatistics
                                                                    WHERE   MONTH(PPInCompleteStatisticDate) = {0}
                                                                            AND YEAR(PPInCompleteStatisticDate) = {1}
                                                                            AND AAModule = '{2}'
                                                                            AND AAStatus = 'Alive' )
                                                                    AND FK_ICProductID = ICReceiptItems.FK_ICProductID
                                                                    AND FK_PPCostCenterID = ICReceiptItems.FK_PPCostCenterID )
                                                ) AS PPProductionCostingCalcResultOBWIPAmt
                                            INTO   #table
                                            FROM   dbo.ICReceiptItems
                                            WHERE  FK_ICReceiptID IN ( SELECT  ICReceiptID
                                                                    FROM    dbo.ICReceipts
                                                                    WHERE   MONTH(ICReceiptDate) = {0}
                                                                            AND YEAR(ICReceiptDate) = {1}
                                                                            AND AAModule LIKE '{3}'
                                                                            AND AAStatus = 'Alive' )
                                                AND AAStatus = 'Alive'
                                                AND AAStatus = 'Alive'
                                                AND FK_PPCostCenterID > 0
                                            GROUP BY ICReceiptItems.FK_ICProductID ,
                                                ICReceiptItems.FK_PPCostCenterID ,
                                                ICReceiptItems.ICReceiptItemQty
                                            UNION
                                            SELECT FK_ICProductID ,
                                                FK_PPCostCenterID ,
                                                0 AS PPProductionCostingCalcResultAmtTot ,
                                                PPInCompleteStatisticItems.PPInCompleteStatisticItemQty PPProductionCostingCalcResultQty ,
                                                ISNULL(SUM(PPInCompleteStatisticItemQty), 0) PPProductionCostingCalcResultOBWIPQty ,
                                                ISNULL(SUM(PPInCompleteStatisticItemAmt), 0) PPProductionCostingCalcResultOBWIPAmt
                                            FROM   dbo.PPInCompleteStatisticItems
                                            WHERE  FK_PPInCompleteStatisticID IN (
                                                SELECT  PPInCompleteStatisticID
                                                FROM    dbo.PPInCompleteStatistics
                                                WHERE   AAStatus = 'Alive'
                                                        AND MONTH(PPInCompleteStatisticDate) = {0}
                                                        AND YEAR(PPInCompleteStatisticDate) = {1}
                                                        AND AAModule = '{2}' )
                                                AND AAStatus = 'Alive'
                                            GROUP BY FK_ICProductID ,
                                                FK_PPCostCenterID ,
                                                PPInCompleteStatisticItems.PPInCompleteStatisticItemQty;                                                  
                                                                                            --Lấy thông tin sản phẩm không tồn tại trong nhập kho và dở dang                                 
                                             SELECT FK_ICProductFGID,GLJournalDocumentNo,FK_PPCostCenterID
                                             FROM   dbo.GLJournals
                                             WHERE  GLJournalPeriod={0}
	                                               AND GLJournalYear={1}
                                                    AND FK_ICProductFGID > 0
                                                    AND FK_ICProductFGID NOT IN ( SELECT    FK_ICProductID
                                                                                  FROM      #table
                                                                                  GROUP BY  FK_ICProductID )
                                            
                                            ", pPeriod, pYear, pInCompleteStatistcModuleName, pICRecetipModulName);
            return GetDataSet(strQuery);
        }

        public DataSet GetAllDataCostingByCostCenterAndPeriod(int pPeriod, int pYear, int pPPCostCenterID)
        {
            string strQuery = string.Format(@"   
                                  SELECT FK_ICProductFGID ,
										--FK_GLDebitAccountID,
                                        SUM(GLJournalAmt) GLJournalAmt ,
                                        PPCostFactorItems.FK_PPCostFactorID FK_GLDebitAccountID
                                    FROM   dbo.GLJournals
                                        JOIN dbo.PPCostFactorItems ON PPCostFactorItems.FK_GLAccountID = GLJournals.FK_GLDebitAccountID
                                    WHERE  GLJournalPeriod = {0}
                                        AND GLJournalYear = {1}
                                        AND FK_PPCostCenterID = {2}
                                        AND PPCostFactorItems.FK_GLAccountID IN (
                                        SELECT  GLAccountID
                                        FROM    dbo.GLAccounts
                                        WHERE   AAStatus = 'Alive'
                                                AND ( GLAccountNo LIKE '621%'
                                                        OR GLAccountNo LIKE '622%'
                                                        OR GLAccountNo LIKE '627%'
                                                    ) )
                                    GROUP BY FK_ICProductFGID ,
                                        PPCostFactorItems.FK_PPCostFactorID;
                                            ", pPeriod, pYear, pPPCostCenterID);
            return GetDataSet(strQuery);
        }

    }
    #endregion
}