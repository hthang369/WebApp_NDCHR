using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region GLPeriodCostAllocates
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:GLPeriodCostAllocatesController
	//Created Date:02 February 2013
	//-----------------------------------------------------------
	
	public class GLPeriodCostAllocatesController:BaseBusinessController
	{
		public GLPeriodCostAllocatesController()
		{
			dal= new DALBaseProvider("GLPeriodCostAllocates",typeof(GLPeriodCostAllocatesInfo));
		}

        // V.Hung add 28/07/2015 kiểm tra đã tồn tại phiếu phân bổ theo kỳ.
        public bool CheckExitPeriodAndYear(int iPeriod, int iYear)
        {
            string strQuery = String.Format("Select * from GLPeriodCostAllocates where AAStatus = 'Alive' and Period = {0} "
                                + " and Year = {1}", iPeriod, iYear);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds!=null && ds.Tables.Count>0 && ds.Tables[0].Rows.Count>0)
            {
                return true;
            }
            return false;
        }
        public bool CheckExitAfterPeriodAndYear(int iPeriod, int iYear)
        {
            string strQuery = string.Format(@"SELECT  *
            FROM    dbo.GLPeriodCostAllocates
            WHERE   AAStatus = 'Alive'
                    AND ( Period + Year
                          * 12 ) > ( {0} + {1} * 12 )", iPeriod, iYear);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        public GLPeriodCostAllocatesInfo LayKyPhanBoMoiNhat()
        {
            string strQuery = string.Format(@"SELECT TOP 1
                                                        *
                                                FROM    dbo.GLPeriodCostAllocates
                                                WHERE   ( dbo.GLPeriodCostAllocates.Year * 12
                                                          + dbo.GLPeriodCostAllocates.Period ) = ( SELECT   MAX(dbo.GLPeriodCostAllocates.Period
                                                                                                              + dbo.GLPeriodCostAllocates.Year
                                                                                                              * 12)
                                                                                                   FROM     dbo.GLPeriodCostAllocates
                                                                                                   WHERE    AAStatus = 'Alive'
                                                                                                 )
                                                        AND dbo.GLPeriodCostAllocates.AAStatus = 'Alive'");
            DataSet ds = GetDataSet(strQuery);
            GLPeriodCostAllocatesInfo objGLPeriodCostAllocateInfo = null;
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                objGLPeriodCostAllocateInfo = (GLPeriodCostAllocatesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return objGLPeriodCostAllocateInfo;
        }


        public DataSet GetAllDataByCostAllocateAndAfterDate(int iCostAllocateID, DateTime dtDateTime)
        {
            string strQuery = string.Format(@"SELECT  dbo.GLPeriodCostAllocates.*
                                                    FROM    dbo.GLPeriodCostAllocateItems
                                                            INNER JOIN dbo.GLPeriodCostAllocates ON dbo.GLPeriodCostAllocateItems.FK_GLPeriodCostAllocateID = dbo.GLPeriodCostAllocates.GLPeriodCostAllocateID
                                                                                                AND dbo.GLPeriodCostAllocates.AAStatus = 'Alive'
                                                                                                AND FK_GLCostAllocateID = {0}
                                                                                                AND CONVERT(NVARCHAR(10), GLPeriodCostAllocateDate, 112) > CONVERT(NVARCHAR(10), '{1}', 112) ", iCostAllocateID, dtDateTime.ToString("yyyyMMdd"));
            return GetDataSet(strQuery);
        }

        // V.Hung add 24/08/2015 Lấy kỳ phân bổ sớm nhất của chi phí trả trước
        public GLPeriodCostAllocatesInfo LayKyPhanBoSomNhat()
        {
            string strQuery = string.Format(@"SELECT TOP 1
                                                        *
                                                FROM    dbo.GLPeriodCostAllocates
                                                WHERE   ( dbo.GLPeriodCostAllocates.Year * 12
                                                          + dbo.GLPeriodCostAllocates.Period ) = ( SELECT   MIN(dbo.GLPeriodCostAllocates.Period
                                                                                                              + dbo.GLPeriodCostAllocates.Year
                                                                                                              * 12)
                                                                                                   FROM     dbo.GLPeriodCostAllocates
                                                                                                   WHERE    AAStatus = 'Alive'
                                                                                                 )
                                                        AND dbo.GLPeriodCostAllocates.AAStatus = 'Alive'");
            DataSet ds = GetDataSet(strQuery);
            GLPeriodCostAllocatesInfo objGLPeriodCostAllocateInfo = null;
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                objGLPeriodCostAllocateInfo = (GLPeriodCostAllocatesInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }
            return objGLPeriodCostAllocateInfo;
        }

        
	}
	#endregion
}