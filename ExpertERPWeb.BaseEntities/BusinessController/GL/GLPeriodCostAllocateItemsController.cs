using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
namespace ExpertERP.BusinessEntities
{
	#region GLPeriodCostAllocateItems
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:GLPeriodCostAllocateItemsController
	//Created Date:02 February 2013
	//-----------------------------------------------------------
	
	public class GLPeriodCostAllocateItemsController:BaseBusinessController
	{
		public GLPeriodCostAllocateItemsController()
		{
			dal= new DALBaseProvider("GLPeriodCostAllocateItems",typeof(GLPeriodCostAllocateItemsInfo));
		}

        public DataSet GetItemInPeriod(int iCostAllocateID, int iPeriod, int iYear)
        {
            String strQuery = String.Format(@"SELECT * 
                                                FROM GLPeriodCostAllocateItems
                                                WHERE
                                                FK_GLCostAllocateID = {0} 
                                                AND
                                                FK_GLPeriodCostAllocateID IN (SELECT GLPeriodCostAllocateID 
                                                                                FROM GLPeriodCostAllocates
                                                                                WHERE AAStatus = 'Alive'
                                                                                AND Period = {0} AND Year = {1})",iCostAllocateID, iPeriod, iYear);

            return GetDataSet(strQuery);
        }

        public Double GetSumAllocateAmt(int iCostAllocateID)
        {
            String strQuery = String.Format(@"SELECT SUM(GLPeriodCostAllocateItemAmt) 
                                                FROM GLPeriodCostAllocateItems
                                                WHERE
                                                FK_GLCostAllocateID = {0} 
                                                AND
                                                FK_GLPeriodCostAllocateID IN (SELECT GLPeriodCostAllocateID 
                                                                                FROM GLPeriodCostAllocates
                                                                                WHERE AAStatus = 'Alive')", iCostAllocateID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public Double GetSumFAllocateAmt(int iCostAllocateID)
        {
            String strQuery = String.Format(@"SELECT SUM(GLPeriodCostAllocateItemFAmt) 
                                                FROM GLPeriodCostAllocateItems
                                                WHERE
                                                FK_GLCostAllocateID = {0} 
                                                AND
                                                FK_GLPeriodCostAllocateID IN (SELECT GLPeriodCostAllocateID 
                                                                                FROM GLPeriodCostAllocates
                                                                                WHERE AAStatus = 'Alive')", iCostAllocateID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0
                && ds.Tables[0].Rows[0][0] != null && ds.Tables[0].Rows[0][0] != DBNull.Value)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public Double GetCountAllocate(int iCostAllocateID)
        {
            String strQuery = String.Format(@"SELECT Count(*) 
                                                FROM GLPeriodCostAllocateItems
                                                WHERE
                                                FK_GLCostAllocateID = {0} 
                                                AND
                                                FK_GLPeriodCostAllocateID IN (SELECT GLPeriodCostAllocateID 
                                                                                FROM GLPeriodCostAllocates
                                                                                WHERE AAStatus = 'Alive')", iCostAllocateID);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);

            return 0;
        }

        public DataSet GetAllPeriodCostAllocateItems(int iCostAllocateID)
        {
            String strQuery = String.Format(@"SELECT * 
                                                FROM GLPeriodCostAllocateItems
                                                WHERE
                                                FK_GLCostAllocateID = {0} 
                                                AND
                                                FK_GLPeriodCostAllocateID IN (SELECT GLPeriodCostAllocateID 
                                                                                FROM GLPeriodCostAllocates
                                                                                WHERE AAStatus = 'Alive')", iCostAllocateID);

            return GetDataSet(strQuery);
        }
        // lấy phân bổ chi phí trả trước đầu kỳ
        public double GetSumPeriodCostAlloCateFirsAmtDate(int iYear, int iMonth, int CostAllocateID)
        {
            String strQuery = "";
            if (iMonth > 0)
            {
                strQuery = String.Format(@" SELECT SUM(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate)*12 + MONTH(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <{0} *12 + {1}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={2}", iYear, iMonth, CostAllocateID);
            }
            else
            {
                strQuery = String.Format(@" SELECT SUM(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <{0}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={1}", iYear, CostAllocateID);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        public double GetSumPeriodCostAlloCateFAmtFirsDate(int iYear, int iMonth, int CostAllocateID)
        {
            String strQuery = "";
            if (iMonth > 0)
            {
                strQuery = String.Format(@" SELECT SUM(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemFAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate)*12 + MONTH(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <{0} *12 + {1}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={2}", iYear, iMonth, CostAllocateID);
            }
            else
            {
                strQuery = String.Format(@" SELECT SUM(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemFAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <{0}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={1}", iYear, CostAllocateID);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }

        // lấy tổng số tháng đã phân bổ sau khi phân bổ kỳ hiện tại
        public double GetCountCostAlloCate(int iYear, int iMonth, int CostAllocateID)
        {
            String strQuery = "";
            if (iMonth > 0)
            {
                strQuery = String.Format(@" SELECT COUNT(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate)*12 + MONTH(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <={0} *12 + {1}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={2}", iYear, iMonth, CostAllocateID);
            }
            else
            {
                strQuery = String.Format(@" SELECT COUNT(dbo.GLPeriodCostAllocateItems.GLPeriodCostAllocateItemAmt)	             
		                                        FROM dbo.GLPeriodCostAllocateItems
		                                        WHERE FK_GLPeriodCostAllocateID IN 
		                                        (
			                                        SELECT GLPeriodCostAllocates.GLPeriodCostAllocateID
					                                FROM GLPeriodCostAllocates
					                                WHERE GLPeriodCostAllocates.AAStatus = 'Alive'
						                            AND	YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate) <={0}
		                                        )
		                                        AND GLPeriodCostAllocateItems.FK_GLCostAllocateID ={1}", iYear, CostAllocateID);
            }
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0][0] != DBNull.Value)
            {
                return Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        // lấy phân bổ chi phí trả trước trong năm

        public DataSet GetAllGLCostAllocates()
        {
            String strQuery = String.Format(@"  SELECT  *
                                                FROM    dbo.GLCostAllocates GLCostAllocates
                                                WHERE   GLCostAllocates.AAStatus = 'Alive'
                                                ORDER BY GLCostAllocates.GLCostAllocateStartDate");
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetDatasetPeriodCostAllocateItem(int iYear, int iMonth)
        {
            String strQuery = String.Format(@"  SELECT  GLPeriodCostAllocateItems.*
                                                FROM    dbo.GLPeriodCostAllocates GLPeriodCostAllocates
                                                        INNER JOIN dbo.GLPeriodCostAllocateItems GLPeriodCostAllocateItems ON GLPeriodCostAllocateItems.FK_GLPeriodCostAllocateID = GLPeriodCostAllocates.GLPeriodCostAllocateID
                                                                                                              AND GLPeriodCostAllocates.AAStatus = 'Alive'
                                                                                                              AND GLPeriodCostAllocates.AAStatus = 'Alive'
                                                                                                              AND YEAR(GLPeriodCostAllocates.GLPeriodCostAllocateDate) = {0}
                                                                                                              AND ( MONTH(GLPeriodCostAllocates.GLPeriodCostAllocateDate) = {1}
                                                                                                              OR {1} = 0
                                                                                                              )
                                                        INNER JOIN dbo.GLCostAllocates GLCostAllocates ON GLCostAllocates.GLCostAllocateID = GLPeriodCostAllocateItems.FK_GLCostAllocateID
                                                                                                          AND GLCostAllocates.AAStatus = 'Alive'
                                                ORDER BY GLCostAllocates.GLCostAllocateStartDate", iYear, iMonth);
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetDatasetPeriodCostAllocate(int iYear, int iMonth)
        {
            String strQuery = String.Format(@"  SELECT *
	                                            FROM GLPeriodCostAllocates
	                                            WHERE AAStatus = 'Alive'
                                                AND	YEAR(GLPeriodCostAllocateDate)={0} 
                                                AND (MONTH(GLPeriodCostAllocateDate)={1} OR {1}=0)", iYear, iMonth);
            return dal.GetDataSet(strQuery);
        }

        public double GetLastAllocateAmt(int iCostAllocateID)
        {
            double dbAllocateAmt = 0;
            string strQuery = string.Format(@"SELECT TOP 1 GLPeriodCostAllocateItemAmt
                                    FROM    GLPeriodCostAllocateItems
                                            INNER JOIN dbo.GLPeriodCostAllocates ON dbo.GLPeriodCostAllocateItems.FK_GLPeriodCostAllocateID = dbo.GLPeriodCostAllocates.GLPeriodCostAllocateID
                                                                                    AND dbo.GLPeriodCostAllocates.AAStatus = 'Alive'
                                                                                    AND FK_GLCostAllocateID={0}
                                    ORDER BY GLPeriodCostAllocateDate DESC ,
                                            GLPeriodCostAllocateID DESC",iCostAllocateID);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                dbAllocateAmt = Convert.ToDouble(ds.Tables[0].Rows[0][0]);
            }

            return dbAllocateAmt;

        }

        public DataSet GetAllDataQueryCostAllocate(int iPeriod = 0, int iYear = 0, bool viewDetail = false)
        {
            string strPeriod = "", strYear = "", strViewDetail = "", strViewCols = "";
            if (iPeriod > 0) strPeriod = string.Format(" AND Period = {0}", iPeriod);
            if (iYear > 0) strYear = string.Format(" AND Year = {0}", iYear);
            if (viewDetail)
            {
                strViewDetail = " LEFT JOIN GLCostDistDtls as c ON a.FK_GLCostDistID = c.FK_GLCostDistID";
                strViewCols = ",c.GLTOF01Combo,c.GLTOF02Combo,c.GLTOF03Combo,c.GLTOF04Combo";
            }
            string strQuery = string.Format(@"SELECT a.FK_GLPeriodCostAllocateID,
                                                FK_GLCostAllocateID,a.FK_GLCostDistID,
                                                GLPeriodCostAllocateItemAmt as ViewQueryDeprAmt,
                                                GLPeriodCostAllocateItemFAmt as ViewQueryDeprFAmt,
                                                GLPeriodCostAllocateItemAllocateAmt as ViewQueryItemAmt,
                                                (GLPeriodCostAllocateItemAllocateAmt / GLPeriodCostAllocateItemExRate) as ViewQueryItemFAmt,
                                                GLPeriodCostAllocateItemRAmt as ViewQueryCurrentNetBookAmt,
                                                (GLPeriodCostAllocateItemRAmt / GLPeriodCostAllocateItemExRate) as ViewQueryCurrentNetBookFAmt,
                                                GLPeriodCostAllocateItemLastRAmt as ViewQueryNetBookAmt,
                                                (GLPeriodCostAllocateItemLastRAmt / GLPeriodCostAllocateItemExRate) as ViewQueryNetBookFAmt {2}
                                            FROM GLPeriodCostAllocateItems as a
                                            JOIN GLPeriodCostAllocates as b ON a.FK_GLPeriodCostAllocateID = b.GLPeriodCostAllocateID {3}
                                            WHERE b.AAStatus = 'Alive' {0} {1}
                                            ORDER BY Period, Year", strPeriod, strYear, strViewCols, strViewDetail);
            return GetDataSet(strQuery);
        }
	}
	#endregion
}