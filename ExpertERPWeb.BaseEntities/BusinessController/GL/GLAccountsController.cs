using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;


namespace ExpertERP.BusinessEntities
{
	#region GLAccounts
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:GLAccountsController
	//Created Date:Friday, May 16, 2008
	//-----------------------------------------------------------
	
	public class GLAccountsController:BaseBusinessController
	{
		public GLAccountsController()
		{
			dal= new DALBaseProvider("GLAccounts",typeof(GLAccountsInfo));
		}
        public DataSet GetAllDataContaisnAccountNo(String AccountNo)
        {
            String query = string.Format("select * from GLAccounts where GLAccountNo like '{0}%' and GLAccountNo <> '{1}' AND AAStatus = 'Alive'", AccountNo,AccountNo);
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        public DataSet GetAllAccountChild()
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.GLAccounts AS Account1 
                            WHERE Account1.AAStatus = 'Alive'
                            AND Account1.GLAccountID NOT IN
                            (SELECT Account2.FK_GLAccountParentID FROM dbo.GLAccounts AS Account2 WHERE AAStatus = 'Alive')");

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAccountByIDAndAllAccountChild(int iAccountID)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.GLAccounts WHERE AAStatus ='Alive' AND (FK_GLAccountParentID={0} OR GLAccountID={0})", iAccountID);

            return dal.GetDataSet(strQuery);
        }

        public bool CheckHaveChildAccount(int iAccountID)
        {
            string strQuery = string.Format(@"SELECT TOP 1 1 FROM dbo.GLAccounts WHERE AAStatus ='Alive' AND FK_GLAccountParentID={0}", iAccountID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;
        }
        public DataSet GetAllAccountChildType(String strTypeAccount)
        {
            String strQuery = String.Format(@"SELECT * FROM dbo.GLAccounts AS Account1 
                            WHERE Account1.AAStatus = 'Alive'
                            AND Account1.GLAccountID NOT IN
                            (SELECT Account2.FK_GLAccountParentID FROM dbo.GLAccounts AS Account2 WHERE AAStatus = 'Alive')");
            if (strTypeAccount == "Credit")
            {
                strQuery += " AND (LEFT(GLAccountNo,1)=6 OR LEFT(GLAccountNo,1)=8)";
            }
            else if (strTypeAccount == "Debit")
            {
                strQuery += " AND (LEFT(GLAccountNo,1)=5 OR LEFT(GLAccountNo,1)=7)";
            }

            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllAccountByNo(String AccountNo, bool isIncludeChild, int iLevel)
        {
            String strQuery = String.Format("SELECT * FROM GLAccounts WHERE AAStatus = 'Alive'");
            if (String.IsNullOrEmpty(AccountNo) == false)
            {
                if (isIncludeChild == false)
                    strQuery += string.Format(" AND GLAccountNo = '{0}'", AccountNo);
                else
                    strQuery += string.Format("AND GLAccountNo like '{0}%'", AccountNo);
            }

            if (iLevel > 0)
                strQuery += String.Format(" AND GLAccountLevel <=  {0}", iLevel);

            DataSet ds = dal.GetDataSet(strQuery);
            return ds;
        }

        public DataSet GetAllAccountByNo(String AccountNo1, String AccountNo2, String AccountNo3, bool isIncludeChild)
        {
            String query = String.Empty;
            if (isIncludeChild == false)
                query = string.Format("select * from GLAccounts where (GLAccountNo = '{0}' OR GLAccountNo = '{1}' OR GLAccountNo = '{2}') AND AAStatus = 'Alive'", AccountNo1, AccountNo2, AccountNo3);
            else
                query = string.Format("select * from GLAccounts where (GLAccountNo like '{0}%' OR GLAccountNo like '{1}%' OR GLAccountNo like '{2}%') AND AAStatus = 'Alive'", AccountNo1, AccountNo2, AccountNo3);

            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        #region Get All Data StartWith AccountNo --Vinh --24/12/2012 --Lấy tất cả các Account mà các ký tự bắt đầu bằng chuỗi nhập vào

        public DataSet GetAllDataStartWithAccountNo(String AccountNo)
        {
            String query = string.Format(@"select * from GLAccounts 
                                where GLAccountNo like N'{0}%' AND AAStatus = 'Alive'
                                AND GLAccountID NOT IN (SELECT FK_GLAccountParentID FROM GLAccountS WHERE AAStatus = 'Alive')", AccountNo);
            DataSet ds = dal.GetDataSet(query);
            return ds;
        }

        #endregion

        public DataSet GetAllChildAccounts(string strAccountNo)
        {
            String strQuery = String.Format(@"SELECT * FROM GLAccounts 
                                                        WHERE AAStatus='Alive' 
                                                        AND GLAccountNo LIKE '{0}%' 
                                                        AND GLAccountID NOT IN (SELECT FK_GLAccountParentID
                                                                                        FROM GLAccounts WHERE AAStatus='Alive')",
                                                                                                                               strAccountNo);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllChildAccountIsLastLevel(string strAccountNo1,string strAccountNo2)
        {
            String strQuery = String.Format(@"SELECT * FROM GLAccounts 
                                                        WHERE AAStatus='Alive' 
                                                        AND (GLAccountNo LIKE '{0}%' OR GLAccountNo LIKE '{1}%')
                                                        AND GLAccountLevel = (SELECT MAX(GLAccountLevel) 
                                                                                        FROM GLAccounts WHERE AAStatus='Alive' 
                                                                                        AND GLAccountNo LIKE '{0}%')", strAccountNo1,strAccountNo2);
            return dal.GetDataSet(strQuery);
        }

        public DataSet GetAllAccountHasCurrency(DateTime dtFrom, DateTime dtTo, int iHomeCurrencyID)
        {
            String strDateCond = DALUtil.GenerateBeetween("GLJournalDate", dtFrom, dtTo);

            String strQuery = String.Format(@"SELECT DISTINCT GLAccounts.*
                                                FROM dbo.GLJournals, dbo.GLAccounts
                                                WHERE 
                                                GLAccounts.AAStatus = 'Alive'
                                                AND FK_GECurrencyID != {0}
                                                AND FK_GLDebitAccountID = GLAccountID
                                                AND {1}
                                                UNION ALL

                                                SELECT DISTINCT GLAccounts.*
                                                FROM dbo.GLJournals, dbo.GLAccounts
                                                WHERE 
                                                GLAccounts.AAStatus = 'Alive'
                                                AND FK_GECurrencyID != {0}
                                                AND FK_GLCreditAccountID = GLAccountID
                                                AND {1}", iHomeCurrencyID, strDateCond);

            return GetDataSet(strQuery);
        }
        //(LINHCLH - 07.03.2014 - Kiem tra tai khoan da phat sinh chua
        public bool isAccountInUse(int iAccountID)
        {
            if (iAccountID == 0) return false;
            String strQuery = String.Format(@"SELECT TOP 1 1
                                                FROM dbo.GLJournals a
                                                WHERE (a.FK_GLDebitAccountID = {0} OR a.FK_GLCreditAccountID = {0})", iAccountID);
            DataSet ds = dal.GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return true;
            return false;
        }
     
		//(LINHCLH - 10.07.2014 - Lay tai khoan cha mac dinh
        public int GetFirstParentID(string sAccountNo)
        {
            if (sAccountNo.Length == 0) return 0;
            String strQuery;
            DataSet ds;
            for (int i = 1;i<sAccountNo.Length;i++)
            {
                strQuery = String.Format(@"SELECT TOP 1 GLAccountID
                                                FROM dbo.GLAccounts a
                                                WHERE AAStatus = 'Alive' AND GLAccountNo = '{0}'",sAccountNo.Substring(0,sAccountNo.Length-i));
                ds = dal.GetDataSet(strQuery);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
            }
            return 0;
        }
        public DataSet GetAllChildByKey(string spKey = "", bool bGetDummy = true)
        {
            if (spKey.Length > 0)
                spKey = string.Format(@"
                            AND ({0})", spKey);
            String strQuery = string.Empty;
            if (bGetDummy)
                strQuery += String.Format(@"SELECT Top 1 * FROM dbo.GLAccounts WHERE GLAccountID = 0
UNION ALL
");
            strQuery += String.Format(@"SELECT a.* FROM dbo.GLAccounts a
    LEFT JOIN  GLAccounts b ON a.GLAccountID = b.FK_GLAccountParentID AND b.AAStatus = 'Alive'
    INNER JOIN  (SELECT GLAccountID 
                    FROM GLAccounts 
                    WHERE AAStatus = 'Alive' {0}
                ) z ON a.GLAccountID = z.GLAccountID
    WHERE b.FK_GLAccountParentID is null
    ORDER BY GLAccountNo", spKey);

            return dal.GetDataSet(strQuery);
        }
        public DataSet GetAllChildByAccountType(string sType)
        {
            return GetAllChildByKey(string.Format("GLAccountTypeCombo = '{0}'",sType));
        }
        #region Kiểm tra tài khoản có bắt buộc chọn đối tượng --Vinh

        public Boolean KiemTraTaiKhoanCoBatBuocChonDoiTuong(int iGLAccountID)
        {
            String str = String.Format(@"   SELECT * FROM dbo.GLAccounts
                                            WHERE AAStatus = 'Alive'
                                            AND (GLAccountBalanceCombo LIKE 'NC' OR GLAccountTypeCombo IN ('AP','AR'))
                                            AND GLAccountID = {0}", iGLAccountID);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        #endregion
        #region LINHCLH - 17/04/2014 - Lay ds tai khoan con cua 1 tk
        public DataSet GetAllChildByID(int piID,bool pbLastLevel = false)
        {
            string strSQL;
            strSQL = string.Format(@"DECLARE @iLV AS INT
                    SET @iLV = 0

                    SELECT  CAST(GLAccountID as int) GLAccountID ,
                            @iLV AS lv
                    INTO    #tKQ
                    FROM    dbo.GLAccounts 
                    WHERE   AAStatus = 'Alive' AND GLAccountID = {0}

                    WHILE 1 = 1 
                    BEGIN
                        INSERT  INTO #tKQ
                                SELECT  a.GLAccountID ,
                                        @iLV + 1
                                FROM    GLAccounts a
                                        INNER JOIN #tKQ b ON b.lv = @iLV
                                                                AND a.FK_GLAccountParentID = b.GLAccountID
                        IF NOT EXISTS ( SELECT TOP 1 1
                                        FROM    #tKQ
                                        WHERE   lv = @iLV + 1 ) 
                            BREAK
                        SET @iLV = @iLV + 1
                    END
                    SELECT a.* FROM GLAccounts as a 
                        INNER JOIN #tKQ b ON a.GLAccountID = b.GLAccountID ", piID);

            if (pbLastLevel)
            {
                strSQL = strSQL + String.Format(@"
                    --(TK chi tiet nhat
                    INNER JOIN (
                    SELECT a.GLAccountID
	                    FROM   GLAccounts a
			                     LEFT JOIN GLAccounts b ON a.GLAccountID = b.FK_GLAccountParentID AND  a.AAStatus = 'Alive' AND b.AAStatus ='Alive'
	                    WHERE  b.FK_GLAccountParentID IS NULL) as c ON a.GLAccountID = b.GLAccountID
                    --)");
            }
            strSQL = strSQL + string.Format(@"
                WHERE b.lv > 0");

            return GetDataSet(strSQL);
        }
        public DataSet GetAllParentByID(int piID,bool pbRootLevel = false)
        {
            string strSQL;
            strSQL = string.Format(@"DECLARE @iLV AS INT
                    SET @iLV = 0

                    SELECT  CAST(GLAccountID as int) GLAccountID ,
                            @iLV AS lv
                    INTO    #tKQ
                    FROM    dbo.GLAccounts 
                    WHERE   AAStatus = 'Alive' AND GLAccountID = {0}
                    DECLARE @iID AS INT
                    WHILE 1 = 1 
                    BEGIN
	                    SELECT @iID = a.FK_GLAccountParentID
                                FROM    GLAccounts a
                                        INNER JOIN #tKQ b ON b.lv = @iLv AND a.GLAccountID = b.GLAccountID
                        IF @iID = 0 OR @iID IS null
		                    BREAK
	                    SET @iLV = @iLV + 1
                        INSERT  INTO #tKQ VALUES(@iID,@iLV)
                    END
                    ", piID);

            if (pbRootLevel)
                strSQL = strSQL + String.Format(@"SELECT TOP 1 a.* FROM GLAccounts a
                    INNER JOIN #tKQ b ON a.GLAccountID = b.GLAccountID
                    ORDER BY b.LV DESC");
            else
                strSQL = strSQL + String.Format(@"SELECT a.* FROM GLAccounts a
                    INNER JOIN #tKQ b ON a.GLAccountID = b.GLAccountID
                    WHERE lv > 0");

            return GetDataSet(strSQL);
        }
        #endregion
        public DataSet GetAllChildByBiPattern(string sPatern)
        {
            DataSet ds = null;
            if (sPatern.Contains("-"))
            {
                string[] arrAccount = sPatern.Split('-');
                int iStart = 0, iEnd = 0; 
                bool bLike = arrAccount[0].Contains("*");
                arrAccount[0] = arrAccount[0].Replace("*", "%");
                arrAccount[1] = arrAccount[1].Replace("*", "%");
                ds = GetAllChildByKey(string.Format("GLAccountNo LIKE '{0}'", arrAccount[0].Replace("*", "%")), false);

                try
                {
                    iStart = Convert.ToInt32(arrAccount[0]);

                    if (arrAccount.Length == 2)
                        iEnd = Convert.ToInt32(arrAccount[1]);
                    else
                        iEnd = iStart;
                }
                catch (System.Exception ex)
                { 

                }

                iStart++;
                string sAccNo;
                for(;iStart < iEnd; iStart++)
                {
                    sAccNo = iStart.ToString();
                    if (bLike)
                        sAccNo+="%";
                    ds.Tables[0].Merge(GetAllChildByKey(string.Format("GLAccountNo LIKE '{0}'", sAccNo), false).Tables[0]);
                }
            }
            else
            {
                ds = GetAllChildByKey(string.Format("GLAccountNo LIKE '{0}'", sPatern.Replace("*", "%")), false);
            }
            return ds;
        }

        //Thang - 29/9/2015 lấy tất cả tài khoản thuộc 1 loại tai khoản nào đó
        public DataSet GetAllDataByAccountType(string type, bool isDummy = false)
        {
            string strQuery = "select * from GLAccounts where (AAStatus = 'Alive' and GLAccountTypeCombo = '{0}')";
            if (isDummy) strQuery += " or AAStatus = 'Dummy'";
            return dal.GetDataSet(string.Format(strQuery, type));
        }
        //Thang - 5/10/2015 kiểm tra 1 tài khoản có thuộc nhóm được chỉ định
        public GLAccountsInfo CheckAccountByType(string accNo,string accType)
        {
            string strQuery = string.Format(@"select * from GLAccounts 
                                                where AAStatus = 'Alive' and 
                                                GLAccountTypeCombo = '{0}' and 
                                                GLAccountNo = '{1}' and
                                                GLAccountID NOT IN (select FK_GLAccountParentID from GLAccounts where AAStatus = 'Alive')", accType, accNo);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (GLAccountsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }

        public GLAccountsInfo GetChildAccountByNo(string strAccountNo)
        {
            string strQuery = string.Format(@"SELECT * FROM dbo.GLAccounts 
                                                WHERE AAStatus = 'Alive' and
                                                GLAccountNo = '{0}' and
                                                GLAccountID NOT IN (select FK_GLAccountParentID from GLAccounts where AAStatus = 'Alive')", strAccountNo);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                return (GLAccountsInfo)GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            return null;
        }
        //Thang - add - 23/9/2016
        public string GetListAccountID(string strAccountList)
        {
            string strNewAccountList = string.Empty;

            string strWhere = string.Join("','", strAccountList.Split(';'));
            string strQuery = string.Format("SELECT STUFF((SELECT ',' + CAST(GLAccountID AS VARCHAR) FROM GLAccounts WHERE GLAccountNo IN('{0}') FOR XML PATH('')),1,1,'')", strWhere);
            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                strNewAccountList = Convert.ToString(ds.Tables[0].Rows[0][0]);
            return strNewAccountList;
        }

        public DataSet GetDataNotInFactorItem(string accNo)
        {
            string strQuery = null;
            if (accNo != "635")
            {
                strQuery = string.Format(@"SELECT GLAccountID FROM GLAccounts 
                                           WHERE AAStatus = 'Alive' AND GLAccountNo LIKE '{0}%'
                                                    AND GLAccounts.GLAccountID NOT IN (SELECT FK_GLAccountParentID FROM GLAccounts WHERE AAStatus = 'Alive')
                                                    AND GLAccounts.GLAccountID NOT IN (SELECT FK_GLAccountID FROM dbo.PPCostFactorItems WHERE FK_GLAccountID IS NOT NULL) 
                                           ORDER BY GLAccountID DESC"
                               , accNo);
            }
            else
            {
                strQuery = string.Format(@"SELECT GLAccountID FROM GLAccounts 
                                           WHERE AAStatus = 'Alive' AND (GLAccountNo LIKE '{0}%' or GLAccountNo LIKE '811%')
                                                    AND GLAccounts.GLAccountID NOT IN (SELECT FK_GLAccountParentID FROM GLAccounts WHERE AAStatus = 'Alive')
                                                    AND GLAccounts.GLAccountID NOT IN (SELECT FK_GLAccountID FROM dbo.PPCostFactorItems WHERE FK_GLAccountID IS NOT NULL) 
                                           ORDER BY GLAccountID DESC"
                              , accNo);
            }
            return GetDataSet(strQuery);

        }


    }
	#endregion
}