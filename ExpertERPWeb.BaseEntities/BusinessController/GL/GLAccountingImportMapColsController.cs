using System;
using System.Data;
using System.Text;
using System.Collections.Generic;
using ExpertWebLib;
using System.Linq;
namespace ExpertERP.BusinessEntities
{
	#region GLAccountingImportMapCols
	//-----------------------------------------------------------
	//Generated By: GMC Studio
	//Class:GLAccountingImportMapColsController
	//Created Date:Monday, September 8, 2014
	//-----------------------------------------------------------
	
	public class GLAccountingImportMapColsController:BaseBusinessController
	{
		public GLAccountingImportMapColsController()
		{
			dal= new DALBaseProvider("GLAccountingImportMapCols",typeof(GLAccountingImportMapColsInfo));
		}

        public GLAccountingImportMapColsInfo GetColumnMap(String strTableName, String strColumnName, String strSubledger, String strType)
        {
            String str = String.Format(@"   SELECT * FROM dbo.GLAccountingImportMapCols
                                            WHERE GLAccountingImportMapColTableName LIKE '{0}'
                                            AND GLAccountingImportMapColColumnName LIKE '{1}'
                                            AND GLAccountingImportMapColSubLedger LIKE '{2}'
                                            AND GLAccountingImportMapColType = '{3}'
                                            ", strTableName, strColumnName, strSubledger, strType);
            DataSet ds = dal.GetDataSet(str);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return (GLAccountingImportMapColsInfo)dal.GetObjectFromDataRow(ds.Tables[0].Rows[0]);
            }

            return null;
        }

        public DataSet GetDataBySubLedger(String strSubLedger)
        {
            String strQuery = String.Format(@"SELECT  a.GLAccountingImportMapColColumnName
                                                ,b.AAColumnAliasCaption    
                                            FROM    GLAccountingImportMapCols a
                                                    INNER JOIN ( SELECT AATableName ,
                                                                        AAColumnAliasName ,
                                                                        AAColumnAliasCaption
                                                                 FROM   dbo.AAColumnAlias a
                                                                        INNER JOIN ( SELECT MAX(AAColumnAliasID) AS AAColumnAliasID
                                                                                     FROM   dbo.AAColumnAlias
                                                                                     GROUP BY AAColumnAliasName ,
                                                                                            AATableName
                                                                                   ) b ON a.AAColumnAliasID = b.AAColumnAliasID
                                                               ) b ON b.AATableName = a.GLAccountingImportMapColTableName
                                                                      AND b.AAColumnAliasName = a.GLAccountingImportMapColColumnName");
            if (String.IsNullOrEmpty(strSubLedger) == false)
            {
                strQuery += String.Format(@"
                            WHERE GLAccountingImportMapColSubLedger = '{0}'", strSubLedger);
            }
            return dal.GetDataSet(strQuery);
        }
        public DataSet GetDataBySubLedger(String strSubLedger, string psTable)
        {
            String strQuery = String.Format(@"SELECT  a.AAColumnAliasName AS GLAccountingImportMapColColumnName
                                                ,a.AAColumnAliasCaption
                                            FROM    ( SELECT AATableName ,
                                                                        AAColumnAliasName ,
                                                                        AAColumnAliasCaption
                                                                 FROM   dbo.AAColumnAlias a
                                                                        INNER JOIN ( SELECT MAX(AAColumnAliasID) AS AAColumnAliasID
                                                                                     FROM   dbo.AAColumnAlias
                                                                                     WHERE AATableName = '{0}'
                                                                                     GROUP BY AAColumnAliasName ,
                                                                                            AATableName
                                                                                    
                                                                                   ) b ON a.AAColumnAliasID = b.AAColumnAliasID
                                                                 WHERE AATableName = '{0}'
                                                               ) a
                                                    LEFT JOIN GLAccountingImportMapCols b ON a.AATableName = b.GLAccountingImportMapColTableName
                                                                      AND a.AAColumnAliasName = b.GLAccountingImportMapColColumnName", psTable);
            if (String.IsNullOrEmpty(strSubLedger) == false)
            {
                strQuery += String.Format(@"
                            AND GLAccountingImportMapColSubLedger = '{0}'", strSubLedger);
            }

            strQuery += " WHERE b.GLAccountingImportMapColTableName is null";

            return dal.GetDataSet(strQuery);
        }

        public List<GLAccountingImportMapColsInfo> GetObjectByGLAccountingImportMapColMapColumnName(String strGLAccountingImportMapColsMapColumnName)
        {
            List<GLAccountingImportMapColsInfo> lstGLAccountingImportMapCols = new List<GLAccountingImportMapColsInfo>();
            String strQuery = String.Format(@" SELECT *
                                                FROM dbo.GLAccountingImportMapCols
                                                WHERE GLAccountingImportMapColMapColumnName = '{0}'
                                                ", strGLAccountingImportMapColsMapColumnName);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    GLAccountingImportMapColsInfo obj = new GLAccountingImportMapColsInfo();
                    obj.GLAccountingImportMapColTableName = dr["GLAccountingImportMapColTableName"].ToString();
                    obj.GLAccountingImportMapColColumnName = dr["GLAccountingImportMapColColumnName"].ToString();
                    obj.GLAccountingImportMapColMapColumnName = dr["GLAccountingImportMapColMapColumnName"].ToString();
                    obj.GLAccountingImportMapColCopyCheck =Convert.ToBoolean(dr["GLAccountingImportMapColCopyCheck"]);
                    obj.GLAccountingImportMapColCopyDisplayColumnName = dr["GLAccountingImportMapColCopyDisplayColumnName"].ToString();
                    lstGLAccountingImportMapCols.Add(obj);
                }
            }

            return lstGLAccountingImportMapCols;
        }
        public List<GLAccountingImportMapColsInfo> GetObjectByGLAccountingImportMapColMapColumnName(String strGLAccountingImportMapColsMapColumnName, string strGLAccountingImportMapColType)
        {
            List<GLAccountingImportMapColsInfo> lstGLAccountingImportMapCols = new List<GLAccountingImportMapColsInfo>();
            String strQuery = String.Format(@" SELECT *
                                                FROM dbo.GLAccountingImportMapCols
                                                WHERE GLAccountingImportMapColMapColumnName = N'{0}' AND GLAccountingImportMapColType = '{1}'
                                                ", strGLAccountingImportMapColsMapColumnName, strGLAccountingImportMapColType);

            DataSet ds = GetDataSet(strQuery);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        GLAccountingImportMapColsInfo obj = new GLAccountingImportMapColsInfo();
                        if (dr["GLAccountingImportMapColTableName"].ToString() != "")
                            obj.GLAccountingImportMapColTableName = dr["GLAccountingImportMapColTableName"].ToString();
                        if (dr["GLAccountingImportMapColColumnName"].ToString() != "")
                            obj.GLAccountingImportMapColColumnName = dr["GLAccountingImportMapColColumnName"].ToString();
                        if (dr["GLAccountingImportMapColMapColumnName"].ToString() != "")
                            obj.GLAccountingImportMapColMapColumnName = dr["GLAccountingImportMapColMapColumnName"].ToString();
                        if (dr["GLAccountingImportMapColCopyCheck"].ToString() != "")
                            obj.GLAccountingImportMapColCopyCheck = Convert.ToBoolean(dr["GLAccountingImportMapColCopyCheck"]);
                        if (dr["GLAccountingImportMapColCopyDisplayColumnName"].ToString() != "")
                            obj.GLAccountingImportMapColCopyDisplayColumnName = dr["GLAccountingImportMapColCopyDisplayColumnName"].ToString();
                        lstGLAccountingImportMapCols.Add(obj);
                    }
                    catch (Exception)
                    { }
                }
            }

            return lstGLAccountingImportMapCols;
        }
        public List<GLAccountingImportMapColsInfo> GetAllDataByType(string strType)
        {
            string strQuery = string.Format(@"SELECT * FROM GLAccountingImportMapCols
                                WHERE GLAccountingImportMapColTypeCombo = '{0}'
                                ORDER BY GLAccountingImportMapColSort", strType);
            DataSet ds = GetDataSet(strQuery);
            return GetListFromDataset(ds).Cast<GLAccountingImportMapColsInfo>().ToList();
        }
    }
	#endregion
}